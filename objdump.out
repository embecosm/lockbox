
lockbox.exe:     file format elf32-littleriscv


Disassembly of section .init:

20400000 <_start>:
	.section .init
	.globl _start
	.type _start,@function

_start:
	la gp, _gp
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	c2818193          	addi	gp,gp,-984 # 80000c28 <_gp>
	la sp, _sp
20400008:	5fc04117          	auipc	sp,0x5fc04
2040000c:	ff810113          	addi	sp,sp,-8 # 80004000 <_sp>

	/* Load data section */
	la a0, _data_lma
20400010:	00004517          	auipc	a0,0x4
20400014:	be850513          	addi	a0,a0,-1048 # 20403bf8 <__fini_array_end>
	la a1, _data
20400018:	5fc00597          	auipc	a1,0x5fc00
2040001c:	fe858593          	addi	a1,a1,-24 # 80000000 <_data>
	la a2, _edata
20400020:	5fc00617          	auipc	a2,0x5fc00
20400024:	41860613          	addi	a2,a2,1048 # 80000438 <conversion_error>
	bgeu a1, a2, 2f
20400028:	00c5fa63          	bleu	a2,a1,2040003c <_start+0x3c>
1:
	lw t0, (a0)
2040002c:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
20400030:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
20400034:	0511                	addi	a0,a0,4
	addi a1, a1, 4
20400036:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
20400038:	fec5eae3          	bltu	a1,a2,2040002c <_start+0x2c>
2:

	/* Clear bss section */
	la a0, __bss_start
2040003c:	5fc00517          	auipc	a0,0x5fc00
20400040:	3fc50513          	addi	a0,a0,1020 # 80000438 <conversion_error>
	la a1, _end
20400044:	5fc00597          	auipc	a1,0x5fc00
20400048:	45458593          	addi	a1,a1,1108 # 80000498 <_end>
	bgeu a0, a1, 2f
2040004c:	00b57763          	bleu	a1,a0,2040005a <_start+0x5a>
1:
	sw zero, (a0)
20400050:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
20400054:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
20400056:	feb56de3          	bltu	a0,a1,20400050 <_start+0x50>
2:

	/* Call global constructors */
	la a0, __libc_fini_array
2040005a:	00003517          	auipc	a0,0x3
2040005e:	09e50513          	addi	a0,a0,158 # 204030f8 <__libc_fini_array>
	call atexit
20400062:	04e030ef          	jal	ra,204030b0 <atexit>
20400066:	0f2030ef          	jal	ra,20403158 <__libc_init_array>
	call __libc_init_array
2040006a:	4501                	li	a0,0
2040006c:	4581                	li	a1,0
2040006e:	2815                	jal	204000a2 <main>
20400070:	0540306f          	j	204030c4 <exit>

20400074 <_fini>:
1:
#endif

	/* argc = argv = 0 */
	li a0, 0
	li a1, 0
20400074:	8082                	ret

Disassembly of section .text:

20400078 <_GLOBAL__sub_I_Serial>:
	call main
20400078:	800007b7          	lui	a5,0x80000
2040007c:	20404337          	lui	t1,0x20404
	tail exit
20400080:	45c78293          	addi	t0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400084:	3e800713          	li	a4,1000
#include "HardwareSerial.h"

class UARTClass : public HardwareSerial
{
  public:
    UARTClass(uint32_t base = UART0_BASE_ADDR ) : serbase(reinterpret_cast<uint8_t*>(base)) {}
20400088:	acc30393          	addi	t2,t1,-1332 # 20403acc <_ZTV9UARTClass+0x8>
2040008c:	10013537          	lui	a0,0x10013
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
20400090:	0002a223          	sw	zero,4(t0)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
20400094:	00e2a423          	sw	a4,8(t0)
20400098:	0072a023          	sw	t2,0(t0)
2040009c:	00a2a823          	sw	a0,16(t0)
204000a0:	8082                	ret

204000a2 <main>:
 */
int main( void )
{
  //	init();
  // Compute F_CPU inverse, used for millis and micros functions.
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
204000a2:	800005b7          	lui	a1,0x80000
204000a6:	6511                	lui	a0,0x4
{
204000a8:	1141                	addi	sp,sp,-16
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
204000aa:	48858593          	addi	a1,a1,1160 # 80000488 <_sp+0xffffc488>
204000ae:	e8050513          	addi	a0,a0,-384 # 3e80 <__stack_size+0x3680>
{
204000b2:	c606                	sw	ra,12(sp)
204000b4:	c422                	sw	s0,8(sp)
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
204000b6:	0ef020ef          	jal	ra,204029a4 <calc_inv>
  calc_inv(F_CPU/1000000, &f_cpu_1000000_inv);
204000ba:	800002b7          	lui	t0,0x80000
204000be:	47c28593          	addi	a1,t0,1148 # 8000047c <_sp+0xffffc47c>
204000c2:	4541                	li	a0,16
204000c4:	00000437          	lui	s0,0x0
204000c8:	0dd020ef          	jal	ra,204029a4 <calc_inv>
204000cc:	00040413          	mv	s0,s0
  freedom_e300_specific_initialization();
204000d0:	6a9020ef          	jal	ra,20402f78 <_Z36freedom_e300_specific_initializationv>
  setup();
204000d4:	2a85                	jal	20400244 <setup>
  
  do {
    loop();
204000d6:	2e95                	jal	2040044a <loop>
    if (serialEventRun)
204000d8:	dc7d                	beqz	s0,204000d6 <main+0x34>
      serialEventRun();
204000da:	dfc00317          	auipc	t1,0xdfc00
204000de:	f26300e7          	jalr	-218(t1) # 0 <__stack_size-0x800>
204000e2:	bfd5                	j	204000d6 <main+0x34>

204000e4 <_ZN5Print5writeEPKcj>:
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
204000e4:	1101                	addi	sp,sp,-32
204000e6:	ce06                	sw	ra,28(sp)
204000e8:	cc22                	sw	s0,24(sp)
204000ea:	1000                	addi	s0,sp,32
204000ec:	fea42623          	sw	a0,-20(s0) # ffffffec <_sp+0x7fffbfec>
204000f0:	feb42423          	sw	a1,-24(s0)
204000f4:	fec42223          	sw	a2,-28(s0)
      return write((const uint8_t *)buffer, size);
204000f8:	fec42783          	lw	a5,-20(s0)
204000fc:	439c                	lw	a5,0(a5)
204000fe:	0791                	addi	a5,a5,4
20400100:	439c                	lw	a5,0(a5)
20400102:	fe442603          	lw	a2,-28(s0)
20400106:	fe842583          	lw	a1,-24(s0)
2040010a:	fec42503          	lw	a0,-20(s0)
2040010e:	9782                	jalr	a5
20400110:	87aa                	mv	a5,a0
    }
20400112:	853e                	mv	a0,a5
20400114:	838a                	mv	t2,sp
20400116:	40f2                	lw	ra,28(sp)
20400118:	4462                	lw	s0,24(sp)
2040011a:	6105                	addi	sp,sp,32
2040011c:	8082                	ret

2040011e <_Z7datahexPKcj>:
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// For parsing user input back into a value.
int conversion_error;

uint32_t datahex(const char* string, size_t slength) {
2040011e:	7139                	addi	sp,sp,-64
20400120:	de22                	sw	s0,60(sp)
20400122:	0080                	addi	s0,sp,64
20400124:	fca42623          	sw	a0,-52(s0)
20400128:	fcb42423          	sw	a1,-56(s0)

    conversion_error = 0;
2040012c:	800007b7          	lui	a5,0x80000
20400130:	4207ac23          	sw	zero,1080(a5) # 80000438 <_sp+0xffffc438>

    // must be 8 chars, null pointers bad news.
    if(string == NULL || slength != 8) {
20400134:	fcc42783          	lw	a5,-52(s0)
20400138:	c791                	beqz	a5,20400144 <_Z7datahexPKcj+0x26>
2040013a:	fc842703          	lw	a4,-56(s0)
2040013e:	47a1                	li	a5,8
20400140:	00f70963          	beq	a4,a5,20400152 <_Z7datahexPKcj+0x34>
      conversion_error = 1;
20400144:	800007b7          	lui	a5,0x80000
20400148:	4705                	li	a4,1
2040014a:	42e7ac23          	sw	a4,1080(a5) # 80000438 <_sp+0xffffc438>
      return 0;
2040014e:	4781                	li	a5,0
20400150:	a0ed                	j	2040023a <_Z7datahexPKcj+0x11c>
    }

    uint32_t res = 0;
20400152:	fe042623          	sw	zero,-20(s0)

    size_t index = 0;
20400156:	fe042423          	sw	zero,-24(s0)
    while (index < slength) {
2040015a:	fe842703          	lw	a4,-24(s0)
2040015e:	fc842783          	lw	a5,-56(s0)
20400162:	0cf77a63          	bleu	a5,a4,20400236 <_Z7datahexPKcj+0x118>
        char c = string[index];
20400166:	fcc42703          	lw	a4,-52(s0)
2040016a:	fe842783          	lw	a5,-24(s0)
2040016e:	97ba                	add	a5,a5,a4
20400170:	0007c783          	lbu	a5,0(a5)
20400174:	fef401a3          	sb	a5,-29(s0)
        int value = 0;
20400178:	fe042223          	sw	zero,-28(s0)
        if(c >= '0' && c <= '9')
2040017c:	fe344703          	lbu	a4,-29(s0)
20400180:	02f00793          	li	a5,47
20400184:	00e7ff63          	bleu	a4,a5,204001a2 <_Z7datahexPKcj+0x84>
20400188:	fe344703          	lbu	a4,-29(s0)
2040018c:	03900793          	li	a5,57
20400190:	00e7e963          	bltu	a5,a4,204001a2 <_Z7datahexPKcj+0x84>
          value = (c - '0');
20400194:	fe344783          	lbu	a5,-29(s0)
20400198:	fd078793          	addi	a5,a5,-48
2040019c:	fef42223          	sw	a5,-28(s0)
204001a0:	a8b1                	j	204001fc <_Z7datahexPKcj+0xde>
        else if (c >= 'A' && c <= 'F')
204001a2:	fe344703          	lbu	a4,-29(s0)
204001a6:	04000793          	li	a5,64
204001aa:	00e7ff63          	bleu	a4,a5,204001c8 <_Z7datahexPKcj+0xaa>
204001ae:	fe344703          	lbu	a4,-29(s0)
204001b2:	04600793          	li	a5,70
204001b6:	00e7e963          	bltu	a5,a4,204001c8 <_Z7datahexPKcj+0xaa>
          value = (10 + (c - 'A'));
204001ba:	fe344783          	lbu	a5,-29(s0)
204001be:	fc978793          	addi	a5,a5,-55
204001c2:	fef42223          	sw	a5,-28(s0)
204001c6:	a81d                	j	204001fc <_Z7datahexPKcj+0xde>
        else if (c >= 'a' && c <= 'f')
204001c8:	fe344703          	lbu	a4,-29(s0)
204001cc:	06000793          	li	a5,96
204001d0:	00e7ff63          	bleu	a4,a5,204001ee <_Z7datahexPKcj+0xd0>
204001d4:	fe344703          	lbu	a4,-29(s0)
204001d8:	06600793          	li	a5,102
204001dc:	00e7e963          	bltu	a5,a4,204001ee <_Z7datahexPKcj+0xd0>
          value = (10 + (c - 'a'));
204001e0:	fe344783          	lbu	a5,-29(s0)
204001e4:	fa978793          	addi	a5,a5,-87
204001e8:	fef42223          	sw	a5,-28(s0)
204001ec:	a801                	j	204001fc <_Z7datahexPKcj+0xde>
        else {
          // non-hex digit
          conversion_error = 1;
204001ee:	800007b7          	lui	a5,0x80000
204001f2:	4705                	li	a4,1
204001f4:	42e7ac23          	sw	a4,1080(a5) # 80000438 <_sp+0xffffc438>
          return 0;
204001f8:	4781                	li	a5,0
204001fa:	a081                	j	2040023a <_Z7datahexPKcj+0x11c>
        }

        uint32_t shift =  ((7 - index) * 4);
204001fc:	fe842703          	lw	a4,-24(s0)
20400200:	4781                	li	a5,0
20400202:	8f99                	sub	a5,a5,a4
20400204:	078a                	slli	a5,a5,0x2
20400206:	07f1                	addi	a5,a5,28
20400208:	fcf42e23          	sw	a5,-36(s0)
        uint32_t addition = value << shift;
2040020c:	fe442703          	lw	a4,-28(s0)
20400210:	fdc42783          	lw	a5,-36(s0)
20400214:	00f717b3          	sll	a5,a4,a5
20400218:	fcf42c23          	sw	a5,-40(s0)
        res = res | addition;
2040021c:	fec42703          	lw	a4,-20(s0)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8fd9                	or	a5,a5,a4
20400226:	fef42623          	sw	a5,-20(s0)

        index++;
2040022a:	fe842783          	lw	a5,-24(s0)
2040022e:	0785                	addi	a5,a5,1
20400230:	fef42423          	sw	a5,-24(s0)
    while (index < slength) {
20400234:	b71d                	j	2040015a <_Z7datahexPKcj+0x3c>
    }

    return res;
20400236:	fec42783          	lw	a5,-20(s0)
}
2040023a:	853e                	mv	a0,a5
2040023c:	838a                	mv	t2,sp
2040023e:	5472                	lw	s0,60(sp)
20400240:	6121                	addi	sp,sp,64
20400242:	8082                	ret

20400244 <setup>:


extern "C"
void setup() {
20400244:	1141                	addi	sp,sp,-16
20400246:	c606                	sw	ra,12(sp)
20400248:	c422                	sw	s0,8(sp)
2040024a:	0800                	addi	s0,sp,16
  
  pinMode(buttonPin, INPUT);
2040024c:	4581                	li	a1,0
2040024e:	4519                	li	a0,6
20400250:	031020ef          	jal	ra,20402a80 <pinMode>
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
20400254:	4681                	li	a3,0
20400256:	4609                	li	a2,2
20400258:	45c1                	li	a1,16
2040025a:	800007b7          	lui	a5,0x80000
2040025e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400262:	2961                	jal	204006fa <_ZN13LiquidCrystal5beginEhhh>
  // Print a message to the LCD.
  lcd.print("Stack Erase demo");
20400264:	204047b7          	lui	a5,0x20404
20400268:	9ec78593          	addi	a1,a5,-1556 # 204039ec <__divdi3+0x480>
2040026c:	800007b7          	lui	a5,0x80000
20400270:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400274:	1a1020ef          	jal	ra,20402c14 <_ZN5Print5printEPKc>

  Serial.begin(9600);
20400278:	6789                	lui	a5,0x2
2040027a:	58078593          	addi	a1,a5,1408 # 2580 <__stack_size+0x1d80>
2040027e:	800007b7          	lui	a5,0x80000
20400282:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400286:	31f020ef          	jal	ra,20402da4 <_ZN9UARTClass5beginEm>
}
2040028a:	0001                	nop
2040028c:	838a                	mv	t2,sp
2040028e:	40b2                	lw	ra,12(sp)
20400290:	4422                	lw	s0,8(sp)
20400292:	0141                	addi	sp,sp,16
20400294:	8082                	ret

20400296 <_Z12correctInputPKcj>:
bool locked = true;

// Uncomment to protect function with stack erase
//__attribute__((stack_erase))
bool correctInput(const char* recvBuf, size_t buflen)
{
20400296:	7179                	addi	sp,sp,-48
20400298:	d606                	sw	ra,44(sp)
2040029a:	d422                	sw	s0,40(sp)
2040029c:	1800                	addi	s0,sp,48
2040029e:	fca42e23          	sw	a0,-36(s0)
204002a2:	fcb42c23          	sw	a1,-40(s0)
  uint32_t K_try = datahex(recvBuf, buflen);
204002a6:	fd842583          	lw	a1,-40(s0)
204002aa:	fdc42503          	lw	a0,-36(s0)
204002ae:	3d85                	jal	2040011e <_Z7datahexPKcj>
204002b0:	fea42623          	sw	a0,-20(s0)
  uint32_t K_correct = K;
204002b4:	800007b7          	lui	a5,0x80000
204002b8:	43c7a783          	lw	a5,1084(a5) # 8000043c <_sp+0xffffc43c>
204002bc:	fef42423          	sw	a5,-24(s0)

  if (conversion_error)
204002c0:	800007b7          	lui	a5,0x80000
204002c4:	4387a783          	lw	a5,1080(a5) # 80000438 <_sp+0xffffc438>
204002c8:	c399                	beqz	a5,204002ce <_Z12correctInputPKcj+0x38>
    return false;
204002ca:	4781                	li	a5,0
204002cc:	a819                	j	204002e2 <_Z12correctInputPKcj+0x4c>

  return K_correct == K_try;
204002ce:	fe842703          	lw	a4,-24(s0)
204002d2:	fec42783          	lw	a5,-20(s0)
204002d6:	40f707b3          	sub	a5,a4,a5
204002da:	0017b793          	seqz	a5,a5
204002de:	0ff7f793          	andi	a5,a5,255
}
204002e2:	853e                	mv	a0,a5
204002e4:	838a                	mv	t2,sp
204002e6:	50b2                	lw	ra,44(sp)
204002e8:	5422                	lw	s0,40(sp)
204002ea:	6145                	addi	sp,sp,48
204002ec:	8082                	ret

204002ee <_Z13readSerialBufPc>:

uint32_t readSerialBuf(char * buf) {
204002ee:	7179                	addi	sp,sp,-48
204002f0:	d606                	sw	ra,44(sp)
204002f2:	d422                	sw	s0,40(sp)
204002f4:	1800                	addi	s0,sp,48
204002f6:	fca42e23          	sw	a0,-36(s0)
  int bufLoc = 0;
204002fa:	fe042623          	sw	zero,-20(s0)
  while (true) {
    if (Serial.available()) {
204002fe:	800007b7          	lui	a5,0x80000
20400302:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400306:	33f020ef          	jal	ra,20402e44 <_ZN9UARTClass9availableEv>
2040030a:	87aa                	mv	a5,a0
2040030c:	00f037b3          	snez	a5,a5
20400310:	0ff7f793          	andi	a5,a5,255
20400314:	d7ed                	beqz	a5,204002fe <_Z13readSerialBufPc+0x10>
      lcd.setCursor(10,0);
20400316:	4601                	li	a2,0
20400318:	45a9                	li	a1,10
2040031a:	800007b7          	lui	a5,0x80000
2040031e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400322:	2e5010ef          	jal	ra,20401e06 <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print(bufLoc);
20400326:	4629                	li	a2,10
20400328:	fec42583          	lw	a1,-20(s0)
2040032c:	800007b7          	lui	a5,0x80000
20400330:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400334:	255020ef          	jal	ra,20402d88 <_ZN5Print5printEii>
      buf[bufLoc] = Serial.read();
20400338:	800007b7          	lui	a5,0x80000
2040033c:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400340:	3ab020ef          	jal	ra,20402eea <_ZN9UARTClass4readEv>
20400344:	86aa                	mv	a3,a0
20400346:	fec42783          	lw	a5,-20(s0)
2040034a:	fdc42703          	lw	a4,-36(s0)
2040034e:	97ba                	add	a5,a5,a4
20400350:	0ff6f713          	andi	a4,a3,255
20400354:	00e78023          	sb	a4,0(a5)
      if (buf[bufLoc] == '\n') {
20400358:	fec42783          	lw	a5,-20(s0)
2040035c:	fdc42703          	lw	a4,-36(s0)
20400360:	97ba                	add	a5,a5,a4
20400362:	0007c703          	lbu	a4,0(a5)
20400366:	47a9                	li	a5,10
20400368:	02f71063          	bne	a4,a5,20400388 <_Z13readSerialBufPc+0x9a>
        Serial.write(buf, bufLoc+1);
2040036c:	fec42783          	lw	a5,-20(s0)
20400370:	0785                	addi	a5,a5,1
20400372:	863e                	mv	a2,a5
20400374:	fdc42583          	lw	a1,-36(s0)
20400378:	800007b7          	lui	a5,0x80000
2040037c:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400380:	3395                	jal	204000e4 <_ZN5Print5writeEPKcj>
        return bufLoc;
20400382:	fec42783          	lw	a5,-20(s0)
20400386:	a039                	j	20400394 <_Z13readSerialBufPc+0xa6>
      }
      bufLoc++;
20400388:	fec42783          	lw	a5,-20(s0)
2040038c:	0785                	addi	a5,a5,1
2040038e:	fef42623          	sw	a5,-20(s0)
    if (Serial.available()) {
20400392:	b7b5                	j	204002fe <_Z13readSerialBufPc+0x10>
    }
  }
}
20400394:	853e                	mv	a0,a5
20400396:	838a                	mv	t2,sp
20400398:	50b2                	lw	ra,44(sp)
2040039a:	5422                	lw	s0,40(sp)
2040039c:	6145                	addi	sp,sp,48
2040039e:	8082                	ret

204003a0 <_Z8doSerialv>:

void doSerial() {
204003a0:	1101                	addi	sp,sp,-32
204003a2:	ce06                	sw	ra,28(sp)
204003a4:	cc22                	sw	s0,24(sp)
204003a6:	1000                	addi	s0,sp,32
  char recvBuf[9]; // Eight key chars plus terminator. Should be enough for anybody.
  uint32_t bufLoc = 0; // Where are we writing to in the buffer?
204003a8:	fe042623          	sw	zero,-20(s0)
  Serial.print("Enter code: ");
204003ac:	204047b7          	lui	a5,0x20404
204003b0:	a0078593          	addi	a1,a5,-1536 # 20403a00 <__divdi3+0x494>
204003b4:	800007b7          	lui	a5,0x80000
204003b8:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
204003bc:	059020ef          	jal	ra,20402c14 <_ZN5Print5printEPKc>
  bufLoc = readSerialBuf(recvBuf);
204003c0:	fe040793          	addi	a5,s0,-32
204003c4:	853e                	mv	a0,a5
204003c6:	3725                	jal	204002ee <_Z13readSerialBufPc>
204003c8:	fea42623          	sw	a0,-20(s0)
  recvBuf[bufLoc] = '\0';
204003cc:	fec42783          	lw	a5,-20(s0)
204003d0:	ff040713          	addi	a4,s0,-16
204003d4:	97ba                	add	a5,a5,a4
204003d6:	fe078823          	sb	zero,-16(a5)
  if (correctInput(recvBuf, bufLoc)) {
204003da:	fe040793          	addi	a5,s0,-32
204003de:	fec42583          	lw	a1,-20(s0)
204003e2:	853e                	mv	a0,a5
204003e4:	3d4d                	jal	20400296 <_Z12correctInputPKcj>
204003e6:	87aa                	mv	a5,a0
204003e8:	c3b1                	beqz	a5,2040042c <_Z8doSerialv+0x8c>
    locked = false;
204003ea:	800007b7          	lui	a5,0x80000
204003ee:	42078623          	sb	zero,1068(a5) # 8000042c <_sp+0xffffc42c>
    Serial.print("Unlocking...\n");
204003f2:	204047b7          	lui	a5,0x20404
204003f6:	a1078593          	addi	a1,a5,-1520 # 20403a10 <__divdi3+0x4a4>
204003fa:	800007b7          	lui	a5,0x80000
204003fe:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400402:	013020ef          	jal	ra,20402c14 <_ZN5Print5printEPKc>
    lcd.setCursor(0, 0);
20400406:	4601                	li	a2,0
20400408:	4581                	li	a1,0
2040040a:	800007b7          	lui	a5,0x80000
2040040e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400412:	1f5010ef          	jal	ra,20401e06 <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print("UNLOCKED");
20400416:	204047b7          	lui	a5,0x20404
2040041a:	a2078593          	addi	a1,a5,-1504 # 20403a20 <__divdi3+0x4b4>
2040041e:	800007b7          	lui	a5,0x80000
20400422:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400426:	7ee020ef          	jal	ra,20402c14 <_ZN5Print5printEPKc>
2040042a:	a819                	j	20400440 <_Z8doSerialv+0xa0>
  } else {
    Serial.println("Incorrect code...");
2040042c:	204047b7          	lui	a5,0x20404
20400430:	a2c78593          	addi	a1,a5,-1492 # 20403a2c <__divdi3+0x4c0>
20400434:	800007b7          	lui	a5,0x80000
20400438:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
2040043c:	00b020ef          	jal	ra,20402c46 <_ZN5Print7printlnEPKc>
    return;
  }
}
20400440:	838a                	mv	t2,sp
20400442:	40f2                	lw	ra,28(sp)
20400444:	4462                	lw	s0,24(sp)
20400446:	6105                	addi	sp,sp,32
20400448:	8082                	ret

2040044a <loop>:


extern "C"
void loop() {
2040044a:	1101                	addi	sp,sp,-32
2040044c:	ce06                	sw	ra,28(sp)
2040044e:	cc22                	sw	s0,24(sp)
20400450:	1000                	addi	s0,sp,32
  unsigned int state = digitalRead(buttonPin);
20400452:	4519                	li	a0,6
20400454:	744020ef          	jal	ra,20402b98 <digitalRead>
20400458:	87aa                	mv	a5,a0
2040045a:	fef42623          	sw	a5,-20(s0)
  if (state == LOW) {
2040045e:	fec42783          	lw	a5,-20(s0)
20400462:	e7bd                	bnez	a5,204004d0 <loop+0x86>
    randomSeed(millis());
20400464:	5f8020ef          	jal	ra,20402a5c <millis>
20400468:	87aa                	mv	a5,a0
2040046a:	853e                	mv	a0,a5
2040046c:	305020ef          	jal	ra,20402f70 <_Z10randomSeedm>
    K = random();
20400470:	60d020ef          	jal	ra,2040327c <random>
20400474:	87aa                	mv	a5,a0
20400476:	873e                	mv	a4,a5
20400478:	800007b7          	lui	a5,0x80000
2040047c:	42e7ae23          	sw	a4,1084(a5) # 8000043c <_sp+0xffffc43c>
    lcd.setCursor(0, 1);
20400480:	4605                	li	a2,1
20400482:	4581                	li	a1,0
20400484:	800007b7          	lui	a5,0x80000
20400488:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
2040048c:	17b010ef          	jal	ra,20401e06 <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print(K, HEX);
20400490:	800007b7          	lui	a5,0x80000
20400494:	43c7a783          	lw	a5,1084(a5) # 8000043c <_sp+0xffffc43c>
20400498:	4641                	li	a2,16
2040049a:	85be                	mv	a1,a5
2040049c:	800007b7          	lui	a5,0x80000
204004a0:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004a4:	0e7020ef          	jal	ra,20402d8a <_ZN5Print5printEmi>

    lcd.setCursor(0, 0);
204004a8:	4601                	li	a2,0
204004aa:	4581                	li	a1,0
204004ac:	800007b7          	lui	a5,0x80000
204004b0:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004b4:	153010ef          	jal	ra,20401e06 <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print("LOCKED          ");
204004b8:	204047b7          	lui	a5,0x20404
204004bc:	a4078593          	addi	a1,a5,-1472 # 20403a40 <__divdi3+0x4d4>
204004c0:	800007b7          	lui	a5,0x80000
204004c4:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004c8:	74c020ef          	jal	ra,20402c14 <_ZN5Print5printEPKc>
    while (true) { doSerial(); }
204004cc:	3dd1                	jal	204003a0 <_Z8doSerialv>
204004ce:	bffd                	j	204004cc <loop+0x82>
  }
}
204004d0:	0001                	nop
204004d2:	838a                	mv	t2,sp
204004d4:	40f2                	lw	ra,28(sp)
204004d6:	4462                	lw	s0,24(sp)
204004d8:	6105                	addi	sp,sp,32
204004da:	8082                	ret

204004dc <_Z41__static_initialization_and_destruction_0ii>:
204004dc:	1101                	addi	sp,sp,-32
204004de:	ce06                	sw	ra,28(sp)
204004e0:	cc22                	sw	s0,24(sp)
204004e2:	1000                	addi	s0,sp,32
204004e4:	fea42623          	sw	a0,-20(s0)
204004e8:	feb42423          	sw	a1,-24(s0)
204004ec:	fec42703          	lw	a4,-20(s0)
204004f0:	4785                	li	a5,1
204004f2:	02f71363          	bne	a4,a5,20400518 <_Z41__static_initialization_and_destruction_0ii+0x3c>
204004f6:	fe842703          	lw	a4,-24(s0)
204004fa:	67c1                	lui	a5,0x10
204004fc:	17fd                	addi	a5,a5,-1
204004fe:	00f71d63          	bne	a4,a5,20400518 <_Z41__static_initialization_and_destruction_0ii+0x3c>
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
20400502:	4809                	li	a6,2
20400504:	478d                	li	a5,3
20400506:	4711                	li	a4,4
20400508:	4695                	li	a3,5
2040050a:	462d                	li	a2,11
2040050c:	45b1                	li	a1,12
2040050e:	80000537          	lui	a0,0x80000
20400512:	44050513          	addi	a0,a0,1088 # 80000440 <_sp+0xffffc440>
20400516:	2891                	jal	2040056a <_ZN13LiquidCrystalC1Ehhhhhh>
}
20400518:	0001                	nop
2040051a:	838a                	mv	t2,sp
2040051c:	40f2                	lw	ra,28(sp)
2040051e:	4462                	lw	s0,24(sp)
20400520:	6105                	addi	sp,sp,32
20400522:	8082                	ret

20400524 <_GLOBAL__sub_I_lcd>:
20400524:	1141                	addi	sp,sp,-16
20400526:	c606                	sw	ra,12(sp)
20400528:	c422                	sw	s0,8(sp)
2040052a:	0800                	addi	s0,sp,16
2040052c:	67c1                	lui	a5,0x10
2040052e:	fff78593          	addi	a1,a5,-1 # ffff <__stack_size+0xf7ff>
20400532:	4505                	li	a0,1
20400534:	3765                	jal	204004dc <_Z41__static_initialization_and_destruction_0ii>
20400536:	838a                	mv	t2,sp
20400538:	40b2                	lw	ra,12(sp)
2040053a:	4422                	lw	s0,8(sp)
2040053c:	0141                	addi	sp,sp,16
2040053e:	8082                	ret

20400540 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
20400540:	1101                	addi	sp,sp,-32
20400542:	ce22                	sw	s0,28(sp)
20400544:	1000                	addi	s0,sp,32
20400546:	fea42623          	sw	a0,-20(s0)
2040054a:	204047b7          	lui	a5,0x20404
2040054e:	abc78713          	addi	a4,a5,-1348 # 20403abc <_ZTV5Print+0x8>
20400552:	fec42783          	lw	a5,-20(s0)
20400556:	c398                	sw	a4,0(a5)
20400558:	fec42783          	lw	a5,-20(s0)
2040055c:	0007a223          	sw	zero,4(a5)
20400560:	0001                	nop
20400562:	838a                	mv	t2,sp
20400564:	4472                	lw	s0,28(sp)
20400566:	6105                	addi	sp,sp,32
20400568:	8082                	ret

2040056a <_ZN13LiquidCrystalC1Ehhhhhh>:
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
2040056a:	fc810113          	addi	sp,sp,-56
2040056e:	da06                	sw	ra,52(sp)
20400570:	d822                	sw	s0,48(sp)
20400572:	1820                	addi	s0,sp,56
20400574:	fea42623          	sw	a0,-20(s0)
20400578:	88ae                	mv	a7,a1
2040057a:	8532                	mv	a0,a2
2040057c:	85b6                	mv	a1,a3
2040057e:	863a                	mv	a2,a4
20400580:	86be                	mv	a3,a5
20400582:	8742                	mv	a4,a6
20400584:	87c6                	mv	a5,a7
20400586:	fef405a3          	sb	a5,-21(s0)
2040058a:	87aa                	mv	a5,a0
2040058c:	fef40523          	sb	a5,-22(s0)
20400590:	87ae                	mv	a5,a1
20400592:	fef404a3          	sb	a5,-23(s0)
20400596:	87b2                	mv	a5,a2
20400598:	fef40423          	sb	a5,-24(s0)
2040059c:	87b6                	mv	a5,a3
2040059e:	fef403a3          	sb	a5,-25(s0)
204005a2:	87ba                	mv	a5,a4
204005a4:	fef40323          	sb	a5,-26(s0)
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
204005a8:	fec42783          	lw	a5,-20(s0)
204005ac:	853e                	mv	a0,a5
204005ae:	3f49                	jal	20400540 <_ZN5PrintC1Ev>
204005b0:	204047b7          	lui	a5,0x20404
204005b4:	a5c78713          	addi	a4,a5,-1444 # 20403a5c <_ZTV13LiquidCrystal+0x8>
204005b8:	fec42783          	lw	a5,-20(s0)
204005bc:	c398                	sw	a4,0(a5)
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
204005be:	fe744503          	lbu	a0,-25(s0)
204005c2:	fe844583          	lbu	a1,-24(s0)
204005c6:	fe944683          	lbu	a3,-23(s0)
204005ca:	fea44703          	lbu	a4,-22(s0)
204005ce:	feb44603          	lbu	a2,-21(s0)
204005d2:	c802                	sw	zero,16(sp)
204005d4:	c602                	sw	zero,12(sp)
204005d6:	c402                	sw	zero,8(sp)
204005d8:	c202                	sw	zero,4(sp)
204005da:	fe644783          	lbu	a5,-26(s0)
204005de:	c03e                	sw	a5,0(sp)
204005e0:	88aa                	mv	a7,a0
204005e2:	882e                	mv	a6,a1
204005e4:	87b6                	mv	a5,a3
204005e6:	0ff00693          	li	a3,255
204005ea:	4585                	li	a1,1
204005ec:	fec42503          	lw	a0,-20(s0)
204005f0:	2801                	jal	20400600 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
}
204005f2:	0001                	nop
204005f4:	838a                	mv	t2,sp
204005f6:	50d2                	lw	ra,52(sp)
204005f8:	5442                	lw	s0,48(sp)
204005fa:	03810113          	addi	sp,sp,56
204005fe:	8082                	ret

20400600 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
20400600:	1101                	addi	sp,sp,-32
20400602:	ce06                	sw	ra,28(sp)
20400604:	cc22                	sw	s0,24(sp)
20400606:	1000                	addi	s0,sp,32
20400608:	fea42623          	sw	a0,-20(s0)
2040060c:	8e2e                	mv	t3,a1
2040060e:	8332                	mv	t1,a2
20400610:	8536                	mv	a0,a3
20400612:	85ba                	mv	a1,a4
20400614:	863e                	mv	a2,a5
20400616:	86c2                	mv	a3,a6
20400618:	8746                	mv	a4,a7
2040061a:	87f2                	mv	a5,t3
2040061c:	fef405a3          	sb	a5,-21(s0)
20400620:	879a                	mv	a5,t1
20400622:	fef40523          	sb	a5,-22(s0)
20400626:	87aa                	mv	a5,a0
20400628:	fef404a3          	sb	a5,-23(s0)
2040062c:	87ae                	mv	a5,a1
2040062e:	fef40423          	sb	a5,-24(s0)
20400632:	87b2                	mv	a5,a2
20400634:	fef403a3          	sb	a5,-25(s0)
20400638:	87b6                	mv	a5,a3
2040063a:	fef40323          	sb	a5,-26(s0)
2040063e:	87ba                	mv	a5,a4
20400640:	fef402a3          	sb	a5,-27(s0)
  _rs_pin = rs;
20400644:	fec42783          	lw	a5,-20(s0)
20400648:	fea44703          	lbu	a4,-22(s0)
2040064c:	00e78423          	sb	a4,8(a5)
  _rw_pin = rw;
20400650:	fec42783          	lw	a5,-20(s0)
20400654:	fe944703          	lbu	a4,-23(s0)
20400658:	00e784a3          	sb	a4,9(a5)
  _enable_pin = enable;
2040065c:	fec42783          	lw	a5,-20(s0)
20400660:	fe844703          	lbu	a4,-24(s0)
20400664:	00e78523          	sb	a4,10(a5)
  
  _data_pins[0] = d0;
20400668:	fec42783          	lw	a5,-20(s0)
2040066c:	fe744703          	lbu	a4,-25(s0)
20400670:	00e785a3          	sb	a4,11(a5)
  _data_pins[1] = d1;
20400674:	fec42783          	lw	a5,-20(s0)
20400678:	fe644703          	lbu	a4,-26(s0)
2040067c:	00e78623          	sb	a4,12(a5)
  _data_pins[2] = d2;
20400680:	fec42783          	lw	a5,-20(s0)
20400684:	fe544703          	lbu	a4,-27(s0)
20400688:	00e786a3          	sb	a4,13(a5)
  _data_pins[3] = d3; 
2040068c:	fec42783          	lw	a5,-20(s0)
20400690:	00044703          	lbu	a4,0(s0)
20400694:	00e78723          	sb	a4,14(a5)
  _data_pins[4] = d4;
20400698:	fec42783          	lw	a5,-20(s0)
2040069c:	00444703          	lbu	a4,4(s0)
204006a0:	00e787a3          	sb	a4,15(a5)
  _data_pins[5] = d5;
204006a4:	fec42783          	lw	a5,-20(s0)
204006a8:	00844703          	lbu	a4,8(s0)
204006ac:	00e78823          	sb	a4,16(a5)
  _data_pins[6] = d6;
204006b0:	fec42783          	lw	a5,-20(s0)
204006b4:	00c44703          	lbu	a4,12(s0)
204006b8:	00e788a3          	sb	a4,17(a5)
  _data_pins[7] = d7; 
204006bc:	fec42783          	lw	a5,-20(s0)
204006c0:	01044703          	lbu	a4,16(s0)
204006c4:	00e78923          	sb	a4,18(a5)

  if (fourbitmode)
204006c8:	feb44783          	lbu	a5,-21(s0)
204006cc:	c791                	beqz	a5,204006d8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xd8>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
204006ce:	fec42783          	lw	a5,-20(s0)
204006d2:	000789a3          	sb	zero,19(a5)
204006d6:	a031                	j	204006e2 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe2>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
204006d8:	fec42783          	lw	a5,-20(s0)
204006dc:	4741                	li	a4,16
204006de:	00e789a3          	sb	a4,19(a5)
  
  begin(16, 1);  
204006e2:	4681                	li	a3,0
204006e4:	4605                	li	a2,1
204006e6:	45c1                	li	a1,16
204006e8:	fec42503          	lw	a0,-20(s0)
204006ec:	2039                	jal	204006fa <_ZN13LiquidCrystal5beginEhhh>
}
204006ee:	0001                	nop
204006f0:	838a                	mv	t2,sp
204006f2:	40f2                	lw	ra,28(sp)
204006f4:	4462                	lw	s0,24(sp)
204006f6:	6105                	addi	sp,sp,32
204006f8:	8082                	ret

204006fa <_ZN13LiquidCrystal5beginEhhh>:

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
204006fa:	ad010113          	addi	sp,sp,-1328
204006fe:	52112623          	sw	ra,1324(sp)
20400702:	52812423          	sw	s0,1320(sp)
20400706:	53212223          	sw	s2,1316(sp)
2040070a:	53312023          	sw	s3,1312(sp)
2040070e:	51412e23          	sw	s4,1308(sp)
20400712:	51512c23          	sw	s5,1304(sp)
20400716:	51612a23          	sw	s6,1300(sp)
2040071a:	51712823          	sw	s7,1296(sp)
2040071e:	51812623          	sw	s8,1292(sp)
20400722:	51912423          	sw	s9,1288(sp)
20400726:	51a12223          	sw	s10,1284(sp)
2040072a:	51b12023          	sw	s11,1280(sp)
2040072e:	53010413          	addi	s0,sp,1328
20400732:	e0a42623          	sw	a0,-500(s0)
20400736:	87ae                	mv	a5,a1
20400738:	8732                	mv	a4,a2
2040073a:	e0f405a3          	sb	a5,-501(s0)
2040073e:	87ba                	mv	a5,a4
20400740:	e0f40523          	sb	a5,-502(s0)
20400744:	87b6                	mv	a5,a3
20400746:	e0f404a3          	sb	a5,-503(s0)
  if (lines > 1) {
2040074a:	e0a44703          	lbu	a4,-502(s0)
2040074e:	4785                	li	a5,1
20400750:	00e7fe63          	bleu	a4,a5,2040076c <_ZN13LiquidCrystal5beginEhhh+0x72>
    _displayfunction |= LCD_2LINE;
20400754:	e0c42783          	lw	a5,-500(s0)
20400758:	0137c783          	lbu	a5,19(a5)
2040075c:	0087e793          	ori	a5,a5,8
20400760:	0ff7f713          	andi	a4,a5,255
20400764:	e0c42783          	lw	a5,-500(s0)
20400768:	00e789a3          	sb	a4,19(a5)
  }
  _numlines = lines;
2040076c:	e0c42703          	lw	a4,-500(s0)
20400770:	e0a44783          	lbu	a5,-502(s0)
20400774:	00f70ba3          	sb	a5,23(a4)

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
20400778:	e0b44683          	lbu	a3,-501(s0)
2040077c:	e0b44783          	lbu	a5,-501(s0)
20400780:	04078793          	addi	a5,a5,64
20400784:	873e                	mv	a4,a5
20400786:	04000613          	li	a2,64
2040078a:	4581                	li	a1,0
2040078c:	e0c42503          	lw	a0,-500(s0)
20400790:	32c010ef          	jal	ra,20401abc <_ZN13LiquidCrystal13setRowOffsetsEiiii>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
20400794:	e0944783          	lbu	a5,-503(s0)
20400798:	c395                	beqz	a5,204007bc <_ZN13LiquidCrystal5beginEhhh+0xc2>
2040079a:	e0a44703          	lbu	a4,-502(s0)
2040079e:	4785                	li	a5,1
204007a0:	00f71e63          	bne	a4,a5,204007bc <_ZN13LiquidCrystal5beginEhhh+0xc2>
    _displayfunction |= LCD_5x10DOTS;
204007a4:	e0c42783          	lw	a5,-500(s0)
204007a8:	0137c783          	lbu	a5,19(a5)
204007ac:	0047e793          	ori	a5,a5,4
204007b0:	0ff7f713          	andi	a4,a5,255
204007b4:	e0c42783          	lw	a5,-500(s0)
204007b8:	00e789a3          	sb	a4,19(a5)
  }

  pinMode(_rs_pin, OUTPUT);
204007bc:	e0c42783          	lw	a5,-500(s0)
204007c0:	0087c783          	lbu	a5,8(a5)
204007c4:	4585                	li	a1,1
204007c6:	853e                	mv	a0,a5
204007c8:	2b8020ef          	jal	ra,20402a80 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
204007cc:	e0c42783          	lw	a5,-500(s0)
204007d0:	0097c703          	lbu	a4,9(a5)
204007d4:	0ff00793          	li	a5,255
204007d8:	00f70a63          	beq	a4,a5,204007ec <_ZN13LiquidCrystal5beginEhhh+0xf2>
    pinMode(_rw_pin, OUTPUT);
204007dc:	e0c42783          	lw	a5,-500(s0)
204007e0:	0097c783          	lbu	a5,9(a5)
204007e4:	4585                	li	a1,1
204007e6:	853e                	mv	a0,a5
204007e8:	298020ef          	jal	ra,20402a80 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
204007ec:	e0c42783          	lw	a5,-500(s0)
204007f0:	00a7c783          	lbu	a5,10(a5)
204007f4:	4585                	li	a1,1
204007f6:	853e                	mv	a0,a5
204007f8:	288020ef          	jal	ra,20402a80 <pinMode>
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
204007fc:	fc042623          	sw	zero,-52(s0)
20400800:	e0c42783          	lw	a5,-500(s0)
20400804:	0137c783          	lbu	a5,19(a5)
20400808:	8bc1                	andi	a5,a5,16
2040080a:	c399                	beqz	a5,20400810 <_ZN13LiquidCrystal5beginEhhh+0x116>
2040080c:	4721                	li	a4,8
2040080e:	a011                	j	20400812 <_ZN13LiquidCrystal5beginEhhh+0x118>
20400810:	4711                	li	a4,4
20400812:	fcc42783          	lw	a5,-52(s0)
20400816:	02e7d363          	ble	a4,a5,2040083c <_ZN13LiquidCrystal5beginEhhh+0x142>
  {
    pinMode(_data_pins[i], OUTPUT);
2040081a:	e0c42703          	lw	a4,-500(s0)
2040081e:	fcc42783          	lw	a5,-52(s0)
20400822:	97ba                	add	a5,a5,a4
20400824:	00b7c783          	lbu	a5,11(a5)
20400828:	4585                	li	a1,1
2040082a:	853e                	mv	a0,a5
2040082c:	254020ef          	jal	ra,20402a80 <pinMode>
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
20400830:	fcc42783          	lw	a5,-52(s0)
20400834:	0785                	addi	a5,a5,1
20400836:	fcf42623          	sw	a5,-52(s0)
2040083a:	b7d9                	j	20400800 <_ZN13LiquidCrystal5beginEhhh+0x106>
2040083c:	67b1                	lui	a5,0xc
2040083e:	35078793          	addi	a5,a5,848 # c350 <__stack_size+0xbb50>
20400842:	fcf42423          	sw	a5,-56(s0)
 * \param dwUs the number of microseconds to pause (uint32_t)
 */

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec) {
  if (usec == 0) {
20400846:	fc842783          	lw	a5,-56(s0)
2040084a:	28078b63          	beqz	a5,20400ae0 <_ZN13LiquidCrystal5beginEhhh+0x3e6>
    return;
  }
  // TODO: Short delays at low frequencies.
  uint64_t current, later;
  rdmcycle(&current);
2040084e:	b80027f3          	csrr	a5,mcycleh
20400852:	b0002773          	csrr	a4,mcycle
20400856:	b80026f3          	csrr	a3,mcycleh
2040085a:	fed79ae3          	bne	a5,a3,2040084e <_ZN13LiquidCrystal5beginEhhh+0x154>
2040085e:	fcf42223          	sw	a5,-60(s0)
20400862:	fce42023          	sw	a4,-64(s0)
20400866:	fad42e23          	sw	a3,-68(s0)
2040086a:	fc042783          	lw	a5,-64(s0)
2040086e:	8c3e                	mv	s8,a5
20400870:	4c81                	li	s9,0
20400872:	fc442783          	lw	a5,-60(s0)
20400876:	dcf42c23          	sw	a5,-552(s0)
2040087a:	dc042e23          	sw	zero,-548(s0)
2040087e:	dd842783          	lw	a5,-552(s0)
20400882:	00079a93          	slli	s5,a5,0x0
20400886:	4a01                	li	s4,0
20400888:	014c67b3          	or	a5,s8,s4
2040088c:	dcf42823          	sw	a5,-560(s0)
20400890:	015ce7b3          	or	a5,s9,s5
20400894:	dcf42a23          	sw	a5,-556(s0)
20400898:	dd042783          	lw	a5,-560(s0)
2040089c:	dd442803          	lw	a6,-556(s0)
204008a0:	e0f42c23          	sw	a5,-488(s0)
204008a4:	e1042e23          	sw	a6,-484(s0)
  later = current + usec * (F_CPU/1000000);
204008a8:	fc842783          	lw	a5,-56(s0)
204008ac:	8b3e                	mv	s6,a5
204008ae:	4b81                	li	s7,0
204008b0:	01cb5793          	srli	a5,s6,0x1c
204008b4:	004b9993          	slli	s3,s7,0x4
204008b8:	0137e9b3          	or	s3,a5,s3
204008bc:	004b1913          	slli	s2,s6,0x4
204008c0:	87ca                	mv	a5,s2
204008c2:	884e                	mv	a6,s3
204008c4:	e1842683          	lw	a3,-488(s0)
204008c8:	e1c42703          	lw	a4,-484(s0)
204008cc:	00d78533          	add	a0,a5,a3
204008d0:	862a                	mv	a2,a0
204008d2:	00f63633          	sltu	a2,a2,a5
204008d6:	00e805b3          	add	a1,a6,a4
204008da:	00b607b3          	add	a5,a2,a1
204008de:	85be                	mv	a1,a5
204008e0:	faa42823          	sw	a0,-80(s0)
204008e4:	fab42a23          	sw	a1,-76(s0)
  if (later > current) // usual case
204008e8:	e1842603          	lw	a2,-488(s0)
204008ec:	e1c42683          	lw	a3,-484(s0)
204008f0:	fb442703          	lw	a4,-76(s0)
204008f4:	87b6                	mv	a5,a3
204008f6:	00e7ed63          	bltu	a5,a4,20400910 <_ZN13LiquidCrystal5beginEhhh+0x216>
204008fa:	fb442703          	lw	a4,-76(s0)
204008fe:	87b6                	mv	a5,a3
20400900:	0af71163          	bne	a4,a5,204009a2 <_ZN13LiquidCrystal5beginEhhh+0x2a8>
20400904:	fb042703          	lw	a4,-80(s0)
20400908:	87b2                	mv	a5,a2
2040090a:	00e7e363          	bltu	a5,a4,20400910 <_ZN13LiquidCrystal5beginEhhh+0x216>
2040090e:	a851                	j	204009a2 <_ZN13LiquidCrystal5beginEhhh+0x2a8>
    {
      while (later > current) {
20400910:	e1842603          	lw	a2,-488(s0)
20400914:	e1c42683          	lw	a3,-484(s0)
20400918:	fb442703          	lw	a4,-76(s0)
2040091c:	87b6                	mv	a5,a3
2040091e:	00e7ec63          	bltu	a5,a4,20400936 <_ZN13LiquidCrystal5beginEhhh+0x23c>
20400922:	fb442703          	lw	a4,-76(s0)
20400926:	87b6                	mv	a5,a3
20400928:	1af71d63          	bne	a4,a5,20400ae2 <_ZN13LiquidCrystal5beginEhhh+0x3e8>
2040092c:	fb042703          	lw	a4,-80(s0)
20400930:	87b2                	mv	a5,a2
20400932:	1ae7f863          	bleu	a4,a5,20400ae2 <_ZN13LiquidCrystal5beginEhhh+0x3e8>
	rdmcycle(&current);
20400936:	b80027f3          	csrr	a5,mcycleh
2040093a:	b0002773          	csrr	a4,mcycle
2040093e:	b80026f3          	csrr	a3,mcycleh
20400942:	fed79ae3          	bne	a5,a3,20400936 <_ZN13LiquidCrystal5beginEhhh+0x23c>
20400946:	faf42623          	sw	a5,-84(s0)
2040094a:	fae42423          	sw	a4,-88(s0)
2040094e:	fad42223          	sw	a3,-92(s0)
20400952:	fa842783          	lw	a5,-88(s0)
20400956:	dcf42423          	sw	a5,-568(s0)
2040095a:	dc042623          	sw	zero,-564(s0)
2040095e:	fac42783          	lw	a5,-84(s0)
20400962:	dcf42023          	sw	a5,-576(s0)
20400966:	dc042223          	sw	zero,-572(s0)
2040096a:	dc042783          	lw	a5,-576(s0)
2040096e:	00079d93          	slli	s11,a5,0x0
20400972:	4d01                	li	s10,0
20400974:	dc842783          	lw	a5,-568(s0)
20400978:	dcc42803          	lw	a6,-564(s0)
2040097c:	873e                	mv	a4,a5
2040097e:	01a76733          	or	a4,a4,s10
20400982:	dae42c23          	sw	a4,-584(s0)
20400986:	87c2                	mv	a5,a6
20400988:	01b7e7b3          	or	a5,a5,s11
2040098c:	daf42e23          	sw	a5,-580(s0)
20400990:	db842783          	lw	a5,-584(s0)
20400994:	dbc42803          	lw	a6,-580(s0)
20400998:	e0f42c23          	sw	a5,-488(s0)
2040099c:	e1042e23          	sw	a6,-484(s0)
204009a0:	bf85                	j	20400910 <_ZN13LiquidCrystal5beginEhhh+0x216>
      }
    }
  else // wrap. Though this is unlikely to be hit w/ 64-bit mcycle
    {
      while (later < current) {
204009a2:	e1842603          	lw	a2,-488(s0)
204009a6:	e1c42683          	lw	a3,-484(s0)
204009aa:	fb442703          	lw	a4,-76(s0)
204009ae:	87b6                	mv	a5,a3
204009b0:	00f76d63          	bltu	a4,a5,204009ca <_ZN13LiquidCrystal5beginEhhh+0x2d0>
204009b4:	fb442703          	lw	a4,-76(s0)
204009b8:	87b6                	mv	a5,a3
204009ba:	08f71463          	bne	a4,a5,20400a42 <_ZN13LiquidCrystal5beginEhhh+0x348>
204009be:	fb042703          	lw	a4,-80(s0)
204009c2:	87b2                	mv	a5,a2
204009c4:	00f76363          	bltu	a4,a5,204009ca <_ZN13LiquidCrystal5beginEhhh+0x2d0>
204009c8:	a8ad                	j	20400a42 <_ZN13LiquidCrystal5beginEhhh+0x348>
	rdmcycle(&current);
204009ca:	b80027f3          	csrr	a5,mcycleh
204009ce:	b0002773          	csrr	a4,mcycle
204009d2:	b80026f3          	csrr	a3,mcycleh
204009d6:	fed79ae3          	bne	a5,a3,204009ca <_ZN13LiquidCrystal5beginEhhh+0x2d0>
204009da:	faf42023          	sw	a5,-96(s0)
204009de:	f8e42e23          	sw	a4,-100(s0)
204009e2:	f8d42c23          	sw	a3,-104(s0)
204009e6:	f9c42783          	lw	a5,-100(s0)
204009ea:	daf42823          	sw	a5,-592(s0)
204009ee:	da042a23          	sw	zero,-588(s0)
204009f2:	fa042783          	lw	a5,-96(s0)
204009f6:	daf42423          	sw	a5,-600(s0)
204009fa:	da042623          	sw	zero,-596(s0)
204009fe:	da842783          	lw	a5,-600(s0)
20400a02:	00079793          	slli	a5,a5,0x0
20400a06:	daf42223          	sw	a5,-604(s0)
20400a0a:	da042023          	sw	zero,-608(s0)
20400a0e:	db042683          	lw	a3,-592(s0)
20400a12:	db442703          	lw	a4,-588(s0)
20400a16:	8636                	mv	a2,a3
20400a18:	da042783          	lw	a5,-608(s0)
20400a1c:	da442803          	lw	a6,-604(s0)
20400a20:	85be                	mv	a1,a5
20400a22:	8e4d                	or	a2,a2,a1
20400a24:	d8c42c23          	sw	a2,-616(s0)
20400a28:	87c2                	mv	a5,a6
20400a2a:	8fd9                	or	a5,a5,a4
20400a2c:	d8f42e23          	sw	a5,-612(s0)
20400a30:	d9842783          	lw	a5,-616(s0)
20400a34:	d9c42803          	lw	a6,-612(s0)
20400a38:	e0f42c23          	sw	a5,-488(s0)
20400a3c:	e1042e23          	sw	a6,-484(s0)
20400a40:	b78d                	j	204009a2 <_ZN13LiquidCrystal5beginEhhh+0x2a8>
      }
      while (current < later) {
20400a42:	e1842603          	lw	a2,-488(s0)
20400a46:	e1c42683          	lw	a3,-484(s0)
20400a4a:	fb442703          	lw	a4,-76(s0)
20400a4e:	87b6                	mv	a5,a3
20400a50:	00e7ec63          	bltu	a5,a4,20400a68 <_ZN13LiquidCrystal5beginEhhh+0x36e>
20400a54:	fb442703          	lw	a4,-76(s0)
20400a58:	87b6                	mv	a5,a3
20400a5a:	08f71463          	bne	a4,a5,20400ae2 <_ZN13LiquidCrystal5beginEhhh+0x3e8>
20400a5e:	fb042703          	lw	a4,-80(s0)
20400a62:	87b2                	mv	a5,a2
20400a64:	06e7ff63          	bleu	a4,a5,20400ae2 <_ZN13LiquidCrystal5beginEhhh+0x3e8>
	rdmcycle(&current);
20400a68:	b80027f3          	csrr	a5,mcycleh
20400a6c:	b0002773          	csrr	a4,mcycle
20400a70:	b80026f3          	csrr	a3,mcycleh
20400a74:	fed79ae3          	bne	a5,a3,20400a68 <_ZN13LiquidCrystal5beginEhhh+0x36e>
20400a78:	f8f42a23          	sw	a5,-108(s0)
20400a7c:	f8e42823          	sw	a4,-112(s0)
20400a80:	f8d42623          	sw	a3,-116(s0)
20400a84:	f9042783          	lw	a5,-112(s0)
20400a88:	d8f42823          	sw	a5,-624(s0)
20400a8c:	d8042a23          	sw	zero,-620(s0)
20400a90:	f9442783          	lw	a5,-108(s0)
20400a94:	d8f42423          	sw	a5,-632(s0)
20400a98:	d8042623          	sw	zero,-628(s0)
20400a9c:	d8842783          	lw	a5,-632(s0)
20400aa0:	00079793          	slli	a5,a5,0x0
20400aa4:	d8f42223          	sw	a5,-636(s0)
20400aa8:	d8042023          	sw	zero,-640(s0)
20400aac:	d9042683          	lw	a3,-624(s0)
20400ab0:	d9442703          	lw	a4,-620(s0)
20400ab4:	8636                	mv	a2,a3
20400ab6:	d8042783          	lw	a5,-640(s0)
20400aba:	d8442803          	lw	a6,-636(s0)
20400abe:	85be                	mv	a1,a5
20400ac0:	8e4d                	or	a2,a2,a1
20400ac2:	d6c42c23          	sw	a2,-648(s0)
20400ac6:	87c2                	mv	a5,a6
20400ac8:	8fd9                	or	a5,a5,a4
20400aca:	d6f42e23          	sw	a5,-644(s0)
20400ace:	d7842783          	lw	a5,-648(s0)
20400ad2:	d7c42803          	lw	a6,-644(s0)
20400ad6:	e0f42c23          	sw	a5,-488(s0)
20400ada:	e1042e23          	sw	a6,-484(s0)
20400ade:	b795                	j	20400a42 <_ZN13LiquidCrystal5beginEhhh+0x348>
    return;
20400ae0:	0001                	nop
  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
20400ae2:	e0c42783          	lw	a5,-500(s0)
20400ae6:	0087c783          	lbu	a5,8(a5)
20400aea:	4581                	li	a1,0
20400aec:	853e                	mv	a0,a5
20400aee:	054020ef          	jal	ra,20402b42 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
20400af2:	e0c42783          	lw	a5,-500(s0)
20400af6:	00a7c783          	lbu	a5,10(a5)
20400afa:	4581                	li	a1,0
20400afc:	853e                	mv	a0,a5
20400afe:	044020ef          	jal	ra,20402b42 <digitalWrite>
  if (_rw_pin != 255) { 
20400b02:	e0c42783          	lw	a5,-500(s0)
20400b06:	0097c703          	lbu	a4,9(a5)
20400b0a:	0ff00793          	li	a5,255
20400b0e:	00f70a63          	beq	a4,a5,20400b22 <_ZN13LiquidCrystal5beginEhhh+0x428>
    digitalWrite(_rw_pin, LOW);
20400b12:	e0c42783          	lw	a5,-500(s0)
20400b16:	0097c783          	lbu	a5,9(a5)
20400b1a:	4581                	li	a1,0
20400b1c:	853e                	mv	a0,a5
20400b1e:	024020ef          	jal	ra,20402b42 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
20400b22:	e0c42783          	lw	a5,-500(s0)
20400b26:	0137c783          	lbu	a5,19(a5)
20400b2a:	8bc1                	andi	a5,a5,16
20400b2c:	0e0795e3          	bnez	a5,20401416 <_ZN13LiquidCrystal5beginEhhh+0xd1c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
20400b30:	458d                	li	a1,3
20400b32:	e0c42503          	lw	a0,-500(s0)
20400b36:	5a7010ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
20400b3a:	6785                	lui	a5,0x1
20400b3c:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20400b40:	f0f42423          	sw	a5,-248(s0)
  if (usec == 0) {
20400b44:	f0842783          	lw	a5,-248(s0)
20400b48:	2c078e63          	beqz	a5,20400e24 <_ZN13LiquidCrystal5beginEhhh+0x72a>
  rdmcycle(&current);
20400b4c:	b80027f3          	csrr	a5,mcycleh
20400b50:	b0002773          	csrr	a4,mcycle
20400b54:	b80026f3          	csrr	a3,mcycleh
20400b58:	fed79ae3          	bne	a5,a3,20400b4c <_ZN13LiquidCrystal5beginEhhh+0x452>
20400b5c:	f0f42223          	sw	a5,-252(s0)
20400b60:	f0e42023          	sw	a4,-256(s0)
20400b64:	eed42e23          	sw	a3,-260(s0)
20400b68:	f0042783          	lw	a5,-256(s0)
20400b6c:	c6f42023          	sw	a5,-928(s0)
20400b70:	c6042223          	sw	zero,-924(s0)
20400b74:	f0442783          	lw	a5,-252(s0)
20400b78:	c4f42c23          	sw	a5,-936(s0)
20400b7c:	c4042e23          	sw	zero,-932(s0)
20400b80:	c5842783          	lw	a5,-936(s0)
20400b84:	00079793          	slli	a5,a5,0x0
20400b88:	c4f42a23          	sw	a5,-940(s0)
20400b8c:	c4042823          	sw	zero,-944(s0)
20400b90:	c6042683          	lw	a3,-928(s0)
20400b94:	c6442703          	lw	a4,-924(s0)
20400b98:	8636                	mv	a2,a3
20400b9a:	c5042783          	lw	a5,-944(s0)
20400b9e:	c5442803          	lw	a6,-940(s0)
20400ba2:	85be                	mv	a1,a5
20400ba4:	8e4d                	or	a2,a2,a1
20400ba6:	c4c42423          	sw	a2,-952(s0)
20400baa:	87c2                	mv	a5,a6
20400bac:	8fd9                	or	a5,a5,a4
20400bae:	c4f42623          	sw	a5,-948(s0)
20400bb2:	c4842783          	lw	a5,-952(s0)
20400bb6:	c4c42803          	lw	a6,-948(s0)
20400bba:	e2f42823          	sw	a5,-464(s0)
20400bbe:	e3042a23          	sw	a6,-460(s0)
  later = current + usec * (F_CPU/1000000);
20400bc2:	f0842783          	lw	a5,-248(s0)
20400bc6:	c4f42023          	sw	a5,-960(s0)
20400bca:	c4042223          	sw	zero,-956(s0)
20400bce:	c4042683          	lw	a3,-960(s0)
20400bd2:	c4442703          	lw	a4,-956(s0)
20400bd6:	87b6                	mv	a5,a3
20400bd8:	83f1                	srli	a5,a5,0x1c
20400bda:	863a                	mv	a2,a4
20400bdc:	0612                	slli	a2,a2,0x4
20400bde:	dec42a23          	sw	a2,-524(s0)
20400be2:	df442603          	lw	a2,-524(s0)
20400be6:	8fd1                	or	a5,a5,a2
20400be8:	def42a23          	sw	a5,-524(s0)
20400bec:	87b6                	mv	a5,a3
20400bee:	0792                	slli	a5,a5,0x4
20400bf0:	def42823          	sw	a5,-528(s0)
20400bf4:	df042783          	lw	a5,-528(s0)
20400bf8:	df442803          	lw	a6,-524(s0)
20400bfc:	e3042683          	lw	a3,-464(s0)
20400c00:	e3442703          	lw	a4,-460(s0)
20400c04:	00d78533          	add	a0,a5,a3
20400c08:	862a                	mv	a2,a0
20400c0a:	00f63633          	sltu	a2,a2,a5
20400c0e:	00e805b3          	add	a1,a6,a4
20400c12:	00b607b3          	add	a5,a2,a1
20400c16:	85be                	mv	a1,a5
20400c18:	eea42823          	sw	a0,-272(s0)
20400c1c:	eeb42a23          	sw	a1,-268(s0)
  if (later > current) // usual case
20400c20:	e3042603          	lw	a2,-464(s0)
20400c24:	e3442683          	lw	a3,-460(s0)
20400c28:	ef442703          	lw	a4,-268(s0)
20400c2c:	87b6                	mv	a5,a3
20400c2e:	00e7ed63          	bltu	a5,a4,20400c48 <_ZN13LiquidCrystal5beginEhhh+0x54e>
20400c32:	ef442703          	lw	a4,-268(s0)
20400c36:	87b6                	mv	a5,a3
20400c38:	0af71763          	bne	a4,a5,20400ce6 <_ZN13LiquidCrystal5beginEhhh+0x5ec>
20400c3c:	ef042703          	lw	a4,-272(s0)
20400c40:	87b2                	mv	a5,a2
20400c42:	00e7e363          	bltu	a5,a4,20400c48 <_ZN13LiquidCrystal5beginEhhh+0x54e>
20400c46:	a045                	j	20400ce6 <_ZN13LiquidCrystal5beginEhhh+0x5ec>
      while (later > current) {
20400c48:	e3042603          	lw	a2,-464(s0)
20400c4c:	e3442683          	lw	a3,-460(s0)
20400c50:	ef442703          	lw	a4,-268(s0)
20400c54:	87b6                	mv	a5,a3
20400c56:	00e7ec63          	bltu	a5,a4,20400c6e <_ZN13LiquidCrystal5beginEhhh+0x574>
20400c5a:	ef442703          	lw	a4,-268(s0)
20400c5e:	87b6                	mv	a5,a3
20400c60:	1cf71363          	bne	a4,a5,20400e26 <_ZN13LiquidCrystal5beginEhhh+0x72c>
20400c64:	ef042703          	lw	a4,-272(s0)
20400c68:	87b2                	mv	a5,a2
20400c6a:	1ae7fe63          	bleu	a4,a5,20400e26 <_ZN13LiquidCrystal5beginEhhh+0x72c>
	rdmcycle(&current);
20400c6e:	b80027f3          	csrr	a5,mcycleh
20400c72:	b0002773          	csrr	a4,mcycle
20400c76:	b80026f3          	csrr	a3,mcycleh
20400c7a:	fed79ae3          	bne	a5,a3,20400c6e <_ZN13LiquidCrystal5beginEhhh+0x574>
20400c7e:	eef42623          	sw	a5,-276(s0)
20400c82:	eee42423          	sw	a4,-280(s0)
20400c86:	eed42223          	sw	a3,-284(s0)
20400c8a:	ee842783          	lw	a5,-280(s0)
20400c8e:	c2f42c23          	sw	a5,-968(s0)
20400c92:	c2042e23          	sw	zero,-964(s0)
20400c96:	eec42783          	lw	a5,-276(s0)
20400c9a:	c2f42823          	sw	a5,-976(s0)
20400c9e:	c2042a23          	sw	zero,-972(s0)
20400ca2:	c3042783          	lw	a5,-976(s0)
20400ca6:	00079793          	slli	a5,a5,0x0
20400caa:	c2f42623          	sw	a5,-980(s0)
20400cae:	c2042423          	sw	zero,-984(s0)
20400cb2:	c3842683          	lw	a3,-968(s0)
20400cb6:	c3c42703          	lw	a4,-964(s0)
20400cba:	8636                	mv	a2,a3
20400cbc:	c2842783          	lw	a5,-984(s0)
20400cc0:	c2c42803          	lw	a6,-980(s0)
20400cc4:	85be                	mv	a1,a5
20400cc6:	8e4d                	or	a2,a2,a1
20400cc8:	c2c42023          	sw	a2,-992(s0)
20400ccc:	87c2                	mv	a5,a6
20400cce:	8fd9                	or	a5,a5,a4
20400cd0:	c2f42223          	sw	a5,-988(s0)
20400cd4:	c2042783          	lw	a5,-992(s0)
20400cd8:	c2442803          	lw	a6,-988(s0)
20400cdc:	e2f42823          	sw	a5,-464(s0)
20400ce0:	e3042a23          	sw	a6,-460(s0)
20400ce4:	b795                	j	20400c48 <_ZN13LiquidCrystal5beginEhhh+0x54e>
      while (later < current) {
20400ce6:	e3042603          	lw	a2,-464(s0)
20400cea:	e3442683          	lw	a3,-460(s0)
20400cee:	ef442703          	lw	a4,-268(s0)
20400cf2:	87b6                	mv	a5,a3
20400cf4:	00f76d63          	bltu	a4,a5,20400d0e <_ZN13LiquidCrystal5beginEhhh+0x614>
20400cf8:	ef442703          	lw	a4,-268(s0)
20400cfc:	87b6                	mv	a5,a3
20400cfe:	08f71463          	bne	a4,a5,20400d86 <_ZN13LiquidCrystal5beginEhhh+0x68c>
20400d02:	ef042703          	lw	a4,-272(s0)
20400d06:	87b2                	mv	a5,a2
20400d08:	00f76363          	bltu	a4,a5,20400d0e <_ZN13LiquidCrystal5beginEhhh+0x614>
20400d0c:	a8ad                	j	20400d86 <_ZN13LiquidCrystal5beginEhhh+0x68c>
	rdmcycle(&current);
20400d0e:	b80027f3          	csrr	a5,mcycleh
20400d12:	b0002773          	csrr	a4,mcycle
20400d16:	b80026f3          	csrr	a3,mcycleh
20400d1a:	fed79ae3          	bne	a5,a3,20400d0e <_ZN13LiquidCrystal5beginEhhh+0x614>
20400d1e:	eef42023          	sw	a5,-288(s0)
20400d22:	ece42e23          	sw	a4,-292(s0)
20400d26:	ecd42c23          	sw	a3,-296(s0)
20400d2a:	edc42783          	lw	a5,-292(s0)
20400d2e:	c0f42c23          	sw	a5,-1000(s0)
20400d32:	c0042e23          	sw	zero,-996(s0)
20400d36:	ee042783          	lw	a5,-288(s0)
20400d3a:	c0f42823          	sw	a5,-1008(s0)
20400d3e:	c0042a23          	sw	zero,-1004(s0)
20400d42:	c1042783          	lw	a5,-1008(s0)
20400d46:	00079793          	slli	a5,a5,0x0
20400d4a:	c0f42623          	sw	a5,-1012(s0)
20400d4e:	c0042423          	sw	zero,-1016(s0)
20400d52:	c1842683          	lw	a3,-1000(s0)
20400d56:	c1c42703          	lw	a4,-996(s0)
20400d5a:	8636                	mv	a2,a3
20400d5c:	c0842783          	lw	a5,-1016(s0)
20400d60:	c0c42803          	lw	a6,-1012(s0)
20400d64:	85be                	mv	a1,a5
20400d66:	8e4d                	or	a2,a2,a1
20400d68:	c0c42023          	sw	a2,-1024(s0)
20400d6c:	87c2                	mv	a5,a6
20400d6e:	8fd9                	or	a5,a5,a4
20400d70:	c0f42223          	sw	a5,-1020(s0)
20400d74:	c0042783          	lw	a5,-1024(s0)
20400d78:	c0442803          	lw	a6,-1020(s0)
20400d7c:	e2f42823          	sw	a5,-464(s0)
20400d80:	e3042a23          	sw	a6,-460(s0)
20400d84:	b78d                	j	20400ce6 <_ZN13LiquidCrystal5beginEhhh+0x5ec>
      while (current < later) {
20400d86:	e3042603          	lw	a2,-464(s0)
20400d8a:	e3442683          	lw	a3,-460(s0)
20400d8e:	ef442703          	lw	a4,-268(s0)
20400d92:	87b6                	mv	a5,a3
20400d94:	00e7ec63          	bltu	a5,a4,20400dac <_ZN13LiquidCrystal5beginEhhh+0x6b2>
20400d98:	ef442703          	lw	a4,-268(s0)
20400d9c:	87b6                	mv	a5,a3
20400d9e:	08f71463          	bne	a4,a5,20400e26 <_ZN13LiquidCrystal5beginEhhh+0x72c>
20400da2:	ef042703          	lw	a4,-272(s0)
20400da6:	87b2                	mv	a5,a2
20400da8:	06e7ff63          	bleu	a4,a5,20400e26 <_ZN13LiquidCrystal5beginEhhh+0x72c>
	rdmcycle(&current);
20400dac:	b80027f3          	csrr	a5,mcycleh
20400db0:	b0002773          	csrr	a4,mcycle
20400db4:	b80026f3          	csrr	a3,mcycleh
20400db8:	fed79ae3          	bne	a5,a3,20400dac <_ZN13LiquidCrystal5beginEhhh+0x6b2>
20400dbc:	ecf42a23          	sw	a5,-300(s0)
20400dc0:	ece42823          	sw	a4,-304(s0)
20400dc4:	ecd42623          	sw	a3,-308(s0)
20400dc8:	ed042783          	lw	a5,-304(s0)
20400dcc:	bef42c23          	sw	a5,-1032(s0)
20400dd0:	be042e23          	sw	zero,-1028(s0)
20400dd4:	ed442783          	lw	a5,-300(s0)
20400dd8:	bef42823          	sw	a5,-1040(s0)
20400ddc:	be042a23          	sw	zero,-1036(s0)
20400de0:	bf042783          	lw	a5,-1040(s0)
20400de4:	00079793          	slli	a5,a5,0x0
20400de8:	bef42623          	sw	a5,-1044(s0)
20400dec:	be042423          	sw	zero,-1048(s0)
20400df0:	bf842683          	lw	a3,-1032(s0)
20400df4:	bfc42703          	lw	a4,-1028(s0)
20400df8:	8636                	mv	a2,a3
20400dfa:	be842783          	lw	a5,-1048(s0)
20400dfe:	bec42803          	lw	a6,-1044(s0)
20400e02:	85be                	mv	a1,a5
20400e04:	8e4d                	or	a2,a2,a1
20400e06:	bec42023          	sw	a2,-1056(s0)
20400e0a:	87c2                	mv	a5,a6
20400e0c:	8fd9                	or	a5,a5,a4
20400e0e:	bef42223          	sw	a5,-1052(s0)
20400e12:	be042783          	lw	a5,-1056(s0)
20400e16:	be442803          	lw	a6,-1052(s0)
20400e1a:	e2f42823          	sw	a5,-464(s0)
20400e1e:	e3042a23          	sw	a6,-460(s0)
20400e22:	b795                	j	20400d86 <_ZN13LiquidCrystal5beginEhhh+0x68c>
    return;
20400e24:	0001                	nop
    delayMicroseconds(4500); // wait min 4.1ms

    // second try
    write4bits(0x03);
20400e26:	458d                	li	a1,3
20400e28:	e0c42503          	lw	a0,-500(s0)
20400e2c:	2b1010ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
20400e30:	6785                	lui	a5,0x1
20400e32:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20400e36:	f4f42423          	sw	a5,-184(s0)
  if (usec == 0) {
20400e3a:	f4842783          	lw	a5,-184(s0)
20400e3e:	2c078e63          	beqz	a5,2040111a <_ZN13LiquidCrystal5beginEhhh+0xa20>
  rdmcycle(&current);
20400e42:	b80027f3          	csrr	a5,mcycleh
20400e46:	b0002773          	csrr	a4,mcycle
20400e4a:	b80026f3          	csrr	a3,mcycleh
20400e4e:	fed79ae3          	bne	a5,a3,20400e42 <_ZN13LiquidCrystal5beginEhhh+0x748>
20400e52:	f4f42223          	sw	a5,-188(s0)
20400e56:	f4e42023          	sw	a4,-192(s0)
20400e5a:	f2d42e23          	sw	a3,-196(s0)
20400e5e:	f4042783          	lw	a5,-192(s0)
20400e62:	cef42423          	sw	a5,-792(s0)
20400e66:	ce042623          	sw	zero,-788(s0)
20400e6a:	f4442783          	lw	a5,-188(s0)
20400e6e:	cef42023          	sw	a5,-800(s0)
20400e72:	ce042223          	sw	zero,-796(s0)
20400e76:	ce042783          	lw	a5,-800(s0)
20400e7a:	00079793          	slli	a5,a5,0x0
20400e7e:	ccf42e23          	sw	a5,-804(s0)
20400e82:	cc042c23          	sw	zero,-808(s0)
20400e86:	ce842683          	lw	a3,-792(s0)
20400e8a:	cec42703          	lw	a4,-788(s0)
20400e8e:	8636                	mv	a2,a3
20400e90:	cd842783          	lw	a5,-808(s0)
20400e94:	cdc42803          	lw	a6,-804(s0)
20400e98:	85be                	mv	a1,a5
20400e9a:	8e4d                	or	a2,a2,a1
20400e9c:	ccc42823          	sw	a2,-816(s0)
20400ea0:	87c2                	mv	a5,a6
20400ea2:	8fd9                	or	a5,a5,a4
20400ea4:	ccf42a23          	sw	a5,-812(s0)
20400ea8:	cd042783          	lw	a5,-816(s0)
20400eac:	cd442803          	lw	a6,-812(s0)
20400eb0:	e2f42423          	sw	a5,-472(s0)
20400eb4:	e3042623          	sw	a6,-468(s0)
  later = current + usec * (F_CPU/1000000);
20400eb8:	f4842783          	lw	a5,-184(s0)
20400ebc:	ccf42423          	sw	a5,-824(s0)
20400ec0:	cc042623          	sw	zero,-820(s0)
20400ec4:	cc842683          	lw	a3,-824(s0)
20400ec8:	ccc42703          	lw	a4,-820(s0)
20400ecc:	87b6                	mv	a5,a3
20400ece:	83f1                	srli	a5,a5,0x1c
20400ed0:	863a                	mv	a2,a4
20400ed2:	0612                	slli	a2,a2,0x4
20400ed4:	dec42e23          	sw	a2,-516(s0)
20400ed8:	dfc42603          	lw	a2,-516(s0)
20400edc:	8fd1                	or	a5,a5,a2
20400ede:	def42e23          	sw	a5,-516(s0)
20400ee2:	87b6                	mv	a5,a3
20400ee4:	0792                	slli	a5,a5,0x4
20400ee6:	def42c23          	sw	a5,-520(s0)
20400eea:	df842783          	lw	a5,-520(s0)
20400eee:	dfc42803          	lw	a6,-516(s0)
20400ef2:	e2842683          	lw	a3,-472(s0)
20400ef6:	e2c42703          	lw	a4,-468(s0)
20400efa:	00d78533          	add	a0,a5,a3
20400efe:	862a                	mv	a2,a0
20400f00:	00f63633          	sltu	a2,a2,a5
20400f04:	00e805b3          	add	a1,a6,a4
20400f08:	00b607b3          	add	a5,a2,a1
20400f0c:	85be                	mv	a1,a5
20400f0e:	f2a42823          	sw	a0,-208(s0)
20400f12:	f2b42a23          	sw	a1,-204(s0)
  if (later > current) // usual case
20400f16:	e2842603          	lw	a2,-472(s0)
20400f1a:	e2c42683          	lw	a3,-468(s0)
20400f1e:	f3442703          	lw	a4,-204(s0)
20400f22:	87b6                	mv	a5,a3
20400f24:	00e7ed63          	bltu	a5,a4,20400f3e <_ZN13LiquidCrystal5beginEhhh+0x844>
20400f28:	f3442703          	lw	a4,-204(s0)
20400f2c:	87b6                	mv	a5,a3
20400f2e:	0af71763          	bne	a4,a5,20400fdc <_ZN13LiquidCrystal5beginEhhh+0x8e2>
20400f32:	f3042703          	lw	a4,-208(s0)
20400f36:	87b2                	mv	a5,a2
20400f38:	00e7e363          	bltu	a5,a4,20400f3e <_ZN13LiquidCrystal5beginEhhh+0x844>
20400f3c:	a045                	j	20400fdc <_ZN13LiquidCrystal5beginEhhh+0x8e2>
      while (later > current) {
20400f3e:	e2842603          	lw	a2,-472(s0)
20400f42:	e2c42683          	lw	a3,-468(s0)
20400f46:	f3442703          	lw	a4,-204(s0)
20400f4a:	87b6                	mv	a5,a3
20400f4c:	00e7ec63          	bltu	a5,a4,20400f64 <_ZN13LiquidCrystal5beginEhhh+0x86a>
20400f50:	f3442703          	lw	a4,-204(s0)
20400f54:	87b6                	mv	a5,a3
20400f56:	1cf71363          	bne	a4,a5,2040111c <_ZN13LiquidCrystal5beginEhhh+0xa22>
20400f5a:	f3042703          	lw	a4,-208(s0)
20400f5e:	87b2                	mv	a5,a2
20400f60:	1ae7fe63          	bleu	a4,a5,2040111c <_ZN13LiquidCrystal5beginEhhh+0xa22>
	rdmcycle(&current);
20400f64:	b80027f3          	csrr	a5,mcycleh
20400f68:	b0002773          	csrr	a4,mcycle
20400f6c:	b80026f3          	csrr	a3,mcycleh
20400f70:	fed79ae3          	bne	a5,a3,20400f64 <_ZN13LiquidCrystal5beginEhhh+0x86a>
20400f74:	f2f42623          	sw	a5,-212(s0)
20400f78:	f2e42423          	sw	a4,-216(s0)
20400f7c:	f2d42223          	sw	a3,-220(s0)
20400f80:	f2842783          	lw	a5,-216(s0)
20400f84:	ccf42023          	sw	a5,-832(s0)
20400f88:	cc042223          	sw	zero,-828(s0)
20400f8c:	f2c42783          	lw	a5,-212(s0)
20400f90:	caf42c23          	sw	a5,-840(s0)
20400f94:	ca042e23          	sw	zero,-836(s0)
20400f98:	cb842783          	lw	a5,-840(s0)
20400f9c:	00079793          	slli	a5,a5,0x0
20400fa0:	caf42a23          	sw	a5,-844(s0)
20400fa4:	ca042823          	sw	zero,-848(s0)
20400fa8:	cc042683          	lw	a3,-832(s0)
20400fac:	cc442703          	lw	a4,-828(s0)
20400fb0:	8636                	mv	a2,a3
20400fb2:	cb042783          	lw	a5,-848(s0)
20400fb6:	cb442803          	lw	a6,-844(s0)
20400fba:	85be                	mv	a1,a5
20400fbc:	8e4d                	or	a2,a2,a1
20400fbe:	cac42423          	sw	a2,-856(s0)
20400fc2:	87c2                	mv	a5,a6
20400fc4:	8fd9                	or	a5,a5,a4
20400fc6:	caf42623          	sw	a5,-852(s0)
20400fca:	ca842783          	lw	a5,-856(s0)
20400fce:	cac42803          	lw	a6,-852(s0)
20400fd2:	e2f42423          	sw	a5,-472(s0)
20400fd6:	e3042623          	sw	a6,-468(s0)
20400fda:	b795                	j	20400f3e <_ZN13LiquidCrystal5beginEhhh+0x844>
      while (later < current) {
20400fdc:	e2842603          	lw	a2,-472(s0)
20400fe0:	e2c42683          	lw	a3,-468(s0)
20400fe4:	f3442703          	lw	a4,-204(s0)
20400fe8:	87b6                	mv	a5,a3
20400fea:	00f76d63          	bltu	a4,a5,20401004 <_ZN13LiquidCrystal5beginEhhh+0x90a>
20400fee:	f3442703          	lw	a4,-204(s0)
20400ff2:	87b6                	mv	a5,a3
20400ff4:	08f71463          	bne	a4,a5,2040107c <_ZN13LiquidCrystal5beginEhhh+0x982>
20400ff8:	f3042703          	lw	a4,-208(s0)
20400ffc:	87b2                	mv	a5,a2
20400ffe:	00f76363          	bltu	a4,a5,20401004 <_ZN13LiquidCrystal5beginEhhh+0x90a>
20401002:	a8ad                	j	2040107c <_ZN13LiquidCrystal5beginEhhh+0x982>
	rdmcycle(&current);
20401004:	b80027f3          	csrr	a5,mcycleh
20401008:	b0002773          	csrr	a4,mcycle
2040100c:	b80026f3          	csrr	a3,mcycleh
20401010:	fed79ae3          	bne	a5,a3,20401004 <_ZN13LiquidCrystal5beginEhhh+0x90a>
20401014:	f2f42023          	sw	a5,-224(s0)
20401018:	f0e42e23          	sw	a4,-228(s0)
2040101c:	f0d42c23          	sw	a3,-232(s0)
20401020:	f1c42783          	lw	a5,-228(s0)
20401024:	caf42023          	sw	a5,-864(s0)
20401028:	ca042223          	sw	zero,-860(s0)
2040102c:	f2042783          	lw	a5,-224(s0)
20401030:	c8f42c23          	sw	a5,-872(s0)
20401034:	c8042e23          	sw	zero,-868(s0)
20401038:	c9842783          	lw	a5,-872(s0)
2040103c:	00079793          	slli	a5,a5,0x0
20401040:	c8f42a23          	sw	a5,-876(s0)
20401044:	c8042823          	sw	zero,-880(s0)
20401048:	ca042683          	lw	a3,-864(s0)
2040104c:	ca442703          	lw	a4,-860(s0)
20401050:	8636                	mv	a2,a3
20401052:	c9042783          	lw	a5,-880(s0)
20401056:	c9442803          	lw	a6,-876(s0)
2040105a:	85be                	mv	a1,a5
2040105c:	8e4d                	or	a2,a2,a1
2040105e:	c8c42423          	sw	a2,-888(s0)
20401062:	87c2                	mv	a5,a6
20401064:	8fd9                	or	a5,a5,a4
20401066:	c8f42623          	sw	a5,-884(s0)
2040106a:	c8842783          	lw	a5,-888(s0)
2040106e:	c8c42803          	lw	a6,-884(s0)
20401072:	e2f42423          	sw	a5,-472(s0)
20401076:	e3042623          	sw	a6,-468(s0)
2040107a:	b78d                	j	20400fdc <_ZN13LiquidCrystal5beginEhhh+0x8e2>
      while (current < later) {
2040107c:	e2842603          	lw	a2,-472(s0)
20401080:	e2c42683          	lw	a3,-468(s0)
20401084:	f3442703          	lw	a4,-204(s0)
20401088:	87b6                	mv	a5,a3
2040108a:	00e7ec63          	bltu	a5,a4,204010a2 <_ZN13LiquidCrystal5beginEhhh+0x9a8>
2040108e:	f3442703          	lw	a4,-204(s0)
20401092:	87b6                	mv	a5,a3
20401094:	08f71463          	bne	a4,a5,2040111c <_ZN13LiquidCrystal5beginEhhh+0xa22>
20401098:	f3042703          	lw	a4,-208(s0)
2040109c:	87b2                	mv	a5,a2
2040109e:	06e7ff63          	bleu	a4,a5,2040111c <_ZN13LiquidCrystal5beginEhhh+0xa22>
	rdmcycle(&current);
204010a2:	b80027f3          	csrr	a5,mcycleh
204010a6:	b0002773          	csrr	a4,mcycle
204010aa:	b80026f3          	csrr	a3,mcycleh
204010ae:	fed79ae3          	bne	a5,a3,204010a2 <_ZN13LiquidCrystal5beginEhhh+0x9a8>
204010b2:	f0f42a23          	sw	a5,-236(s0)
204010b6:	f0e42823          	sw	a4,-240(s0)
204010ba:	f0d42623          	sw	a3,-244(s0)
204010be:	f1042783          	lw	a5,-240(s0)
204010c2:	c8f42023          	sw	a5,-896(s0)
204010c6:	c8042223          	sw	zero,-892(s0)
204010ca:	f1442783          	lw	a5,-236(s0)
204010ce:	c6f42c23          	sw	a5,-904(s0)
204010d2:	c6042e23          	sw	zero,-900(s0)
204010d6:	c7842783          	lw	a5,-904(s0)
204010da:	00079793          	slli	a5,a5,0x0
204010de:	c6f42a23          	sw	a5,-908(s0)
204010e2:	c6042823          	sw	zero,-912(s0)
204010e6:	c8042683          	lw	a3,-896(s0)
204010ea:	c8442703          	lw	a4,-892(s0)
204010ee:	8636                	mv	a2,a3
204010f0:	c7042783          	lw	a5,-912(s0)
204010f4:	c7442803          	lw	a6,-908(s0)
204010f8:	85be                	mv	a1,a5
204010fa:	8e4d                	or	a2,a2,a1
204010fc:	c6c42423          	sw	a2,-920(s0)
20401100:	87c2                	mv	a5,a6
20401102:	8fd9                	or	a5,a5,a4
20401104:	c6f42623          	sw	a5,-916(s0)
20401108:	c6842783          	lw	a5,-920(s0)
2040110c:	c6c42803          	lw	a6,-916(s0)
20401110:	e2f42423          	sw	a5,-472(s0)
20401114:	e3042623          	sw	a6,-468(s0)
20401118:	b795                	j	2040107c <_ZN13LiquidCrystal5beginEhhh+0x982>
    return;
2040111a:	0001                	nop
    delayMicroseconds(4500); // wait min 4.1ms
    
    // third go!
    write4bits(0x03); 
2040111c:	458d                	li	a1,3
2040111e:	e0c42503          	lw	a0,-500(s0)
20401122:	7ba010ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
20401126:	09600793          	li	a5,150
2040112a:	f8f42423          	sw	a5,-120(s0)
  if (usec == 0) {
2040112e:	f8842783          	lw	a5,-120(s0)
20401132:	2c078b63          	beqz	a5,20401408 <_ZN13LiquidCrystal5beginEhhh+0xd0e>
  rdmcycle(&current);
20401136:	b80027f3          	csrr	a5,mcycleh
2040113a:	b0002773          	csrr	a4,mcycle
2040113e:	b80026f3          	csrr	a3,mcycleh
20401142:	fed79ae3          	bne	a5,a3,20401136 <_ZN13LiquidCrystal5beginEhhh+0xa3c>
20401146:	f8f42223          	sw	a5,-124(s0)
2040114a:	f8e42023          	sw	a4,-128(s0)
2040114e:	f6d42e23          	sw	a3,-132(s0)
20401152:	f8042783          	lw	a5,-128(s0)
20401156:	d6f42823          	sw	a5,-656(s0)
2040115a:	d6042a23          	sw	zero,-652(s0)
2040115e:	f8442783          	lw	a5,-124(s0)
20401162:	d6f42423          	sw	a5,-664(s0)
20401166:	d6042623          	sw	zero,-660(s0)
2040116a:	d6842783          	lw	a5,-664(s0)
2040116e:	00079793          	slli	a5,a5,0x0
20401172:	d6f42223          	sw	a5,-668(s0)
20401176:	d6042023          	sw	zero,-672(s0)
2040117a:	d7042683          	lw	a3,-656(s0)
2040117e:	d7442703          	lw	a4,-652(s0)
20401182:	8636                	mv	a2,a3
20401184:	d6042783          	lw	a5,-672(s0)
20401188:	d6442803          	lw	a6,-668(s0)
2040118c:	85be                	mv	a1,a5
2040118e:	8e4d                	or	a2,a2,a1
20401190:	d4c42c23          	sw	a2,-680(s0)
20401194:	87c2                	mv	a5,a6
20401196:	8fd9                	or	a5,a5,a4
20401198:	d4f42e23          	sw	a5,-676(s0)
2040119c:	d5842783          	lw	a5,-680(s0)
204011a0:	d5c42803          	lw	a6,-676(s0)
204011a4:	e2f42023          	sw	a5,-480(s0)
204011a8:	e3042223          	sw	a6,-476(s0)
  later = current + usec * (F_CPU/1000000);
204011ac:	f8842783          	lw	a5,-120(s0)
204011b0:	d4f42823          	sw	a5,-688(s0)
204011b4:	d4042a23          	sw	zero,-684(s0)
204011b8:	d5042683          	lw	a3,-688(s0)
204011bc:	d5442703          	lw	a4,-684(s0)
204011c0:	87b6                	mv	a5,a3
204011c2:	83f1                	srli	a5,a5,0x1c
204011c4:	863a                	mv	a2,a4
204011c6:	0612                	slli	a2,a2,0x4
204011c8:	e0c42223          	sw	a2,-508(s0)
204011cc:	e0442603          	lw	a2,-508(s0)
204011d0:	8fd1                	or	a5,a5,a2
204011d2:	e0f42223          	sw	a5,-508(s0)
204011d6:	87b6                	mv	a5,a3
204011d8:	0792                	slli	a5,a5,0x4
204011da:	e0f42023          	sw	a5,-512(s0)
204011de:	e0042683          	lw	a3,-512(s0)
204011e2:	e0442703          	lw	a4,-508(s0)
204011e6:	e2042503          	lw	a0,-480(s0)
204011ea:	e2442583          	lw	a1,-476(s0)
204011ee:	00a687b3          	add	a5,a3,a0
204011f2:	863e                	mv	a2,a5
204011f4:	00d63633          	sltu	a2,a2,a3
204011f8:	00b70833          	add	a6,a4,a1
204011fc:	01060733          	add	a4,a2,a6
20401200:	883a                	mv	a6,a4
20401202:	f6f42823          	sw	a5,-144(s0)
20401206:	f7042a23          	sw	a6,-140(s0)
  if (later > current) // usual case
2040120a:	e2042683          	lw	a3,-480(s0)
2040120e:	e2442703          	lw	a4,-476(s0)
20401212:	f7442783          	lw	a5,-140(s0)
20401216:	863a                	mv	a2,a4
20401218:	00f66d63          	bltu	a2,a5,20401232 <_ZN13LiquidCrystal5beginEhhh+0xb38>
2040121c:	f7442783          	lw	a5,-140(s0)
20401220:	863a                	mv	a2,a4
20401222:	0ac79663          	bne	a5,a2,204012ce <_ZN13LiquidCrystal5beginEhhh+0xbd4>
20401226:	f7042783          	lw	a5,-144(s0)
2040122a:	8736                	mv	a4,a3
2040122c:	00f76363          	bltu	a4,a5,20401232 <_ZN13LiquidCrystal5beginEhhh+0xb38>
20401230:	a879                	j	204012ce <_ZN13LiquidCrystal5beginEhhh+0xbd4>
      while (later > current) {
20401232:	e2042783          	lw	a5,-480(s0)
20401236:	e2442803          	lw	a6,-476(s0)
2040123a:	f7442703          	lw	a4,-140(s0)
2040123e:	86c2                	mv	a3,a6
20401240:	00e6eb63          	bltu	a3,a4,20401256 <_ZN13LiquidCrystal5beginEhhh+0xb5c>
20401244:	f7442703          	lw	a4,-140(s0)
20401248:	86c2                	mv	a3,a6
2040124a:	1cd71063          	bne	a4,a3,2040140a <_ZN13LiquidCrystal5beginEhhh+0xd10>
2040124e:	f7042703          	lw	a4,-144(s0)
20401252:	1ae7fc63          	bleu	a4,a5,2040140a <_ZN13LiquidCrystal5beginEhhh+0xd10>
	rdmcycle(&current);
20401256:	b80026f3          	csrr	a3,mcycleh
2040125a:	b0002773          	csrr	a4,mcycle
2040125e:	b80027f3          	csrr	a5,mcycleh
20401262:	fef69ae3          	bne	a3,a5,20401256 <_ZN13LiquidCrystal5beginEhhh+0xb5c>
20401266:	f6d42623          	sw	a3,-148(s0)
2040126a:	f6e42423          	sw	a4,-152(s0)
2040126e:	f6f42223          	sw	a5,-156(s0)
20401272:	f6842783          	lw	a5,-152(s0)
20401276:	d4f42423          	sw	a5,-696(s0)
2040127a:	d4042623          	sw	zero,-692(s0)
2040127e:	f6c42783          	lw	a5,-148(s0)
20401282:	d4f42023          	sw	a5,-704(s0)
20401286:	d4042223          	sw	zero,-700(s0)
2040128a:	d4042783          	lw	a5,-704(s0)
2040128e:	00079793          	slli	a5,a5,0x0
20401292:	d2f42e23          	sw	a5,-708(s0)
20401296:	d2042c23          	sw	zero,-712(s0)
2040129a:	d4842683          	lw	a3,-696(s0)
2040129e:	d4c42703          	lw	a4,-692(s0)
204012a2:	8636                	mv	a2,a3
204012a4:	d3842783          	lw	a5,-712(s0)
204012a8:	d3c42803          	lw	a6,-708(s0)
204012ac:	85be                	mv	a1,a5
204012ae:	8e4d                	or	a2,a2,a1
204012b0:	d2c42823          	sw	a2,-720(s0)
204012b4:	87c2                	mv	a5,a6
204012b6:	8fd9                	or	a5,a5,a4
204012b8:	d2f42a23          	sw	a5,-716(s0)
204012bc:	d3042783          	lw	a5,-720(s0)
204012c0:	d3442803          	lw	a6,-716(s0)
204012c4:	e2f42023          	sw	a5,-480(s0)
204012c8:	e3042223          	sw	a6,-476(s0)
204012cc:	b79d                	j	20401232 <_ZN13LiquidCrystal5beginEhhh+0xb38>
      while (later < current) {
204012ce:	e2042783          	lw	a5,-480(s0)
204012d2:	e2442803          	lw	a6,-476(s0)
204012d6:	f7442703          	lw	a4,-140(s0)
204012da:	86c2                	mv	a3,a6
204012dc:	00d76c63          	bltu	a4,a3,204012f4 <_ZN13LiquidCrystal5beginEhhh+0xbfa>
204012e0:	f7442703          	lw	a4,-140(s0)
204012e4:	86c2                	mv	a3,a6
204012e6:	08d71363          	bne	a4,a3,2040136c <_ZN13LiquidCrystal5beginEhhh+0xc72>
204012ea:	f7042703          	lw	a4,-144(s0)
204012ee:	00f76363          	bltu	a4,a5,204012f4 <_ZN13LiquidCrystal5beginEhhh+0xbfa>
204012f2:	a8ad                	j	2040136c <_ZN13LiquidCrystal5beginEhhh+0xc72>
	rdmcycle(&current);
204012f4:	b80026f3          	csrr	a3,mcycleh
204012f8:	b0002773          	csrr	a4,mcycle
204012fc:	b80027f3          	csrr	a5,mcycleh
20401300:	fef69ae3          	bne	a3,a5,204012f4 <_ZN13LiquidCrystal5beginEhhh+0xbfa>
20401304:	f6d42023          	sw	a3,-160(s0)
20401308:	f4e42e23          	sw	a4,-164(s0)
2040130c:	f4f42c23          	sw	a5,-168(s0)
20401310:	f5c42783          	lw	a5,-164(s0)
20401314:	d2f42423          	sw	a5,-728(s0)
20401318:	d2042623          	sw	zero,-724(s0)
2040131c:	f6042783          	lw	a5,-160(s0)
20401320:	d2f42023          	sw	a5,-736(s0)
20401324:	d2042223          	sw	zero,-732(s0)
20401328:	d2042783          	lw	a5,-736(s0)
2040132c:	00079793          	slli	a5,a5,0x0
20401330:	d0f42e23          	sw	a5,-740(s0)
20401334:	d0042c23          	sw	zero,-744(s0)
20401338:	d2842683          	lw	a3,-728(s0)
2040133c:	d2c42703          	lw	a4,-724(s0)
20401340:	8636                	mv	a2,a3
20401342:	d1842783          	lw	a5,-744(s0)
20401346:	d1c42803          	lw	a6,-740(s0)
2040134a:	85be                	mv	a1,a5
2040134c:	8e4d                	or	a2,a2,a1
2040134e:	d0c42823          	sw	a2,-752(s0)
20401352:	87c2                	mv	a5,a6
20401354:	8fd9                	or	a5,a5,a4
20401356:	d0f42a23          	sw	a5,-748(s0)
2040135a:	d1042783          	lw	a5,-752(s0)
2040135e:	d1442803          	lw	a6,-748(s0)
20401362:	e2f42023          	sw	a5,-480(s0)
20401366:	e3042223          	sw	a6,-476(s0)
2040136a:	b795                	j	204012ce <_ZN13LiquidCrystal5beginEhhh+0xbd4>
      while (current < later) {
2040136c:	e2042783          	lw	a5,-480(s0)
20401370:	e2442803          	lw	a6,-476(s0)
20401374:	f7442703          	lw	a4,-140(s0)
20401378:	86c2                	mv	a3,a6
2040137a:	00e6eb63          	bltu	a3,a4,20401390 <_ZN13LiquidCrystal5beginEhhh+0xc96>
2040137e:	f7442703          	lw	a4,-140(s0)
20401382:	86c2                	mv	a3,a6
20401384:	08d71363          	bne	a4,a3,2040140a <_ZN13LiquidCrystal5beginEhhh+0xd10>
20401388:	f7042703          	lw	a4,-144(s0)
2040138c:	06e7ff63          	bleu	a4,a5,2040140a <_ZN13LiquidCrystal5beginEhhh+0xd10>
	rdmcycle(&current);
20401390:	b80026f3          	csrr	a3,mcycleh
20401394:	b0002773          	csrr	a4,mcycle
20401398:	b80027f3          	csrr	a5,mcycleh
2040139c:	fef69ae3          	bne	a3,a5,20401390 <_ZN13LiquidCrystal5beginEhhh+0xc96>
204013a0:	f4d42a23          	sw	a3,-172(s0)
204013a4:	f4e42823          	sw	a4,-176(s0)
204013a8:	f4f42623          	sw	a5,-180(s0)
204013ac:	f5042783          	lw	a5,-176(s0)
204013b0:	d0f42423          	sw	a5,-760(s0)
204013b4:	d0042623          	sw	zero,-756(s0)
204013b8:	f5442783          	lw	a5,-172(s0)
204013bc:	d0f42023          	sw	a5,-768(s0)
204013c0:	d0042223          	sw	zero,-764(s0)
204013c4:	d0042783          	lw	a5,-768(s0)
204013c8:	00079793          	slli	a5,a5,0x0
204013cc:	cef42e23          	sw	a5,-772(s0)
204013d0:	ce042c23          	sw	zero,-776(s0)
204013d4:	d0842683          	lw	a3,-760(s0)
204013d8:	d0c42703          	lw	a4,-756(s0)
204013dc:	8636                	mv	a2,a3
204013de:	cf842783          	lw	a5,-776(s0)
204013e2:	cfc42803          	lw	a6,-772(s0)
204013e6:	85be                	mv	a1,a5
204013e8:	8e4d                	or	a2,a2,a1
204013ea:	cec42823          	sw	a2,-784(s0)
204013ee:	87c2                	mv	a5,a6
204013f0:	8fd9                	or	a5,a5,a4
204013f2:	cef42a23          	sw	a5,-780(s0)
204013f6:	cf042783          	lw	a5,-784(s0)
204013fa:	cf442803          	lw	a6,-780(s0)
204013fe:	e2f42023          	sw	a5,-480(s0)
20401402:	e3042223          	sw	a6,-476(s0)
20401406:	b79d                	j	2040136c <_ZN13LiquidCrystal5beginEhhh+0xc72>
    return;
20401408:	0001                	nop
    delayMicroseconds(150);

    // finally, set to 4-bit interface
    write4bits(0x02); 
2040140a:	4589                	li	a1,2
2040140c:	e0c42503          	lw	a0,-500(s0)
20401410:	4cc010ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
20401414:	ad39                	j	20401a32 <_ZN13LiquidCrystal5beginEhhh+0x1338>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
20401416:	e0c42783          	lw	a5,-500(s0)
2040141a:	0137c783          	lbu	a5,19(a5)
2040141e:	0207e793          	ori	a5,a5,32
20401422:	0ff7f793          	andi	a5,a5,255
20401426:	85be                	mv	a1,a5
20401428:	e0c42503          	lw	a0,-500(s0)
2040142c:	2ad000ef          	jal	ra,20401ed8 <_ZN13LiquidCrystal7commandEh>
20401430:	6785                	lui	a5,0x1
20401432:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20401436:	e8f42423          	sw	a5,-376(s0)
  if (usec == 0) {
2040143a:	e8842783          	lw	a5,-376(s0)
2040143e:	2c078e63          	beqz	a5,2040171a <_ZN13LiquidCrystal5beginEhhh+0x1020>
  rdmcycle(&current);
20401442:	b80027f3          	csrr	a5,mcycleh
20401446:	b0002773          	csrr	a4,mcycle
2040144a:	b80026f3          	csrr	a3,mcycleh
2040144e:	fed79ae3          	bne	a5,a3,20401442 <_ZN13LiquidCrystal5beginEhhh+0xd48>
20401452:	e8f42223          	sw	a5,-380(s0)
20401456:	e8e42023          	sw	a4,-384(s0)
2040145a:	e6d42e23          	sw	a3,-388(s0)
2040145e:	e8042783          	lw	a5,-384(s0)
20401462:	b4f42823          	sw	a5,-1200(s0)
20401466:	b4042a23          	sw	zero,-1196(s0)
2040146a:	e8442783          	lw	a5,-380(s0)
2040146e:	b4f42423          	sw	a5,-1208(s0)
20401472:	b4042623          	sw	zero,-1204(s0)
20401476:	b4842783          	lw	a5,-1208(s0)
2040147a:	00079793          	slli	a5,a5,0x0
2040147e:	b4f42223          	sw	a5,-1212(s0)
20401482:	b4042023          	sw	zero,-1216(s0)
20401486:	b5042683          	lw	a3,-1200(s0)
2040148a:	b5442703          	lw	a4,-1196(s0)
2040148e:	8636                	mv	a2,a3
20401490:	b4042783          	lw	a5,-1216(s0)
20401494:	b4442803          	lw	a6,-1212(s0)
20401498:	85be                	mv	a1,a5
2040149a:	8e4d                	or	a2,a2,a1
2040149c:	b2c42c23          	sw	a2,-1224(s0)
204014a0:	87c2                	mv	a5,a6
204014a2:	8fd9                	or	a5,a5,a4
204014a4:	b2f42e23          	sw	a5,-1220(s0)
204014a8:	b3842783          	lw	a5,-1224(s0)
204014ac:	b3c42803          	lw	a6,-1220(s0)
204014b0:	e4f42023          	sw	a5,-448(s0)
204014b4:	e5042223          	sw	a6,-444(s0)
  later = current + usec * (F_CPU/1000000);
204014b8:	e8842783          	lw	a5,-376(s0)
204014bc:	b2f42823          	sw	a5,-1232(s0)
204014c0:	b2042a23          	sw	zero,-1228(s0)
204014c4:	b3042683          	lw	a3,-1232(s0)
204014c8:	b3442703          	lw	a4,-1228(s0)
204014cc:	87b6                	mv	a5,a3
204014ce:	83f1                	srli	a5,a5,0x1c
204014d0:	863a                	mv	a2,a4
204014d2:	0612                	slli	a2,a2,0x4
204014d4:	dec42223          	sw	a2,-540(s0)
204014d8:	de442603          	lw	a2,-540(s0)
204014dc:	8fd1                	or	a5,a5,a2
204014de:	def42223          	sw	a5,-540(s0)
204014e2:	87b6                	mv	a5,a3
204014e4:	0792                	slli	a5,a5,0x4
204014e6:	def42023          	sw	a5,-544(s0)
204014ea:	de042783          	lw	a5,-544(s0)
204014ee:	de442803          	lw	a6,-540(s0)
204014f2:	e4042683          	lw	a3,-448(s0)
204014f6:	e4442703          	lw	a4,-444(s0)
204014fa:	00d78533          	add	a0,a5,a3
204014fe:	862a                	mv	a2,a0
20401500:	00f63633          	sltu	a2,a2,a5
20401504:	00e805b3          	add	a1,a6,a4
20401508:	00b607b3          	add	a5,a2,a1
2040150c:	85be                	mv	a1,a5
2040150e:	e6a42823          	sw	a0,-400(s0)
20401512:	e6b42a23          	sw	a1,-396(s0)
  if (later > current) // usual case
20401516:	e4042603          	lw	a2,-448(s0)
2040151a:	e4442683          	lw	a3,-444(s0)
2040151e:	e7442703          	lw	a4,-396(s0)
20401522:	87b6                	mv	a5,a3
20401524:	00e7ed63          	bltu	a5,a4,2040153e <_ZN13LiquidCrystal5beginEhhh+0xe44>
20401528:	e7442703          	lw	a4,-396(s0)
2040152c:	87b6                	mv	a5,a3
2040152e:	0af71763          	bne	a4,a5,204015dc <_ZN13LiquidCrystal5beginEhhh+0xee2>
20401532:	e7042703          	lw	a4,-400(s0)
20401536:	87b2                	mv	a5,a2
20401538:	00e7e363          	bltu	a5,a4,2040153e <_ZN13LiquidCrystal5beginEhhh+0xe44>
2040153c:	a045                	j	204015dc <_ZN13LiquidCrystal5beginEhhh+0xee2>
      while (later > current) {
2040153e:	e4042603          	lw	a2,-448(s0)
20401542:	e4442683          	lw	a3,-444(s0)
20401546:	e7442703          	lw	a4,-396(s0)
2040154a:	87b6                	mv	a5,a3
2040154c:	00e7ec63          	bltu	a5,a4,20401564 <_ZN13LiquidCrystal5beginEhhh+0xe6a>
20401550:	e7442703          	lw	a4,-396(s0)
20401554:	87b6                	mv	a5,a3
20401556:	1cf71363          	bne	a4,a5,2040171c <_ZN13LiquidCrystal5beginEhhh+0x1022>
2040155a:	e7042703          	lw	a4,-400(s0)
2040155e:	87b2                	mv	a5,a2
20401560:	1ae7fe63          	bleu	a4,a5,2040171c <_ZN13LiquidCrystal5beginEhhh+0x1022>
	rdmcycle(&current);
20401564:	b80027f3          	csrr	a5,mcycleh
20401568:	b0002773          	csrr	a4,mcycle
2040156c:	b80026f3          	csrr	a3,mcycleh
20401570:	fed79ae3          	bne	a5,a3,20401564 <_ZN13LiquidCrystal5beginEhhh+0xe6a>
20401574:	e6f42623          	sw	a5,-404(s0)
20401578:	e6e42423          	sw	a4,-408(s0)
2040157c:	e6d42223          	sw	a3,-412(s0)
20401580:	e6842783          	lw	a5,-408(s0)
20401584:	b2f42423          	sw	a5,-1240(s0)
20401588:	b2042623          	sw	zero,-1236(s0)
2040158c:	e6c42783          	lw	a5,-404(s0)
20401590:	b2f42023          	sw	a5,-1248(s0)
20401594:	b2042223          	sw	zero,-1244(s0)
20401598:	b2042783          	lw	a5,-1248(s0)
2040159c:	00079793          	slli	a5,a5,0x0
204015a0:	b0f42e23          	sw	a5,-1252(s0)
204015a4:	b0042c23          	sw	zero,-1256(s0)
204015a8:	b2842683          	lw	a3,-1240(s0)
204015ac:	b2c42703          	lw	a4,-1236(s0)
204015b0:	8636                	mv	a2,a3
204015b2:	b1842783          	lw	a5,-1256(s0)
204015b6:	b1c42803          	lw	a6,-1252(s0)
204015ba:	85be                	mv	a1,a5
204015bc:	8e4d                	or	a2,a2,a1
204015be:	b0c42823          	sw	a2,-1264(s0)
204015c2:	87c2                	mv	a5,a6
204015c4:	8fd9                	or	a5,a5,a4
204015c6:	b0f42a23          	sw	a5,-1260(s0)
204015ca:	b1042783          	lw	a5,-1264(s0)
204015ce:	b1442803          	lw	a6,-1260(s0)
204015d2:	e4f42023          	sw	a5,-448(s0)
204015d6:	e5042223          	sw	a6,-444(s0)
204015da:	b795                	j	2040153e <_ZN13LiquidCrystal5beginEhhh+0xe44>
      while (later < current) {
204015dc:	e4042603          	lw	a2,-448(s0)
204015e0:	e4442683          	lw	a3,-444(s0)
204015e4:	e7442703          	lw	a4,-396(s0)
204015e8:	87b6                	mv	a5,a3
204015ea:	00f76d63          	bltu	a4,a5,20401604 <_ZN13LiquidCrystal5beginEhhh+0xf0a>
204015ee:	e7442703          	lw	a4,-396(s0)
204015f2:	87b6                	mv	a5,a3
204015f4:	08f71463          	bne	a4,a5,2040167c <_ZN13LiquidCrystal5beginEhhh+0xf82>
204015f8:	e7042703          	lw	a4,-400(s0)
204015fc:	87b2                	mv	a5,a2
204015fe:	00f76363          	bltu	a4,a5,20401604 <_ZN13LiquidCrystal5beginEhhh+0xf0a>
20401602:	a8ad                	j	2040167c <_ZN13LiquidCrystal5beginEhhh+0xf82>
	rdmcycle(&current);
20401604:	b80027f3          	csrr	a5,mcycleh
20401608:	b0002773          	csrr	a4,mcycle
2040160c:	b80026f3          	csrr	a3,mcycleh
20401610:	fed79ae3          	bne	a5,a3,20401604 <_ZN13LiquidCrystal5beginEhhh+0xf0a>
20401614:	e6f42023          	sw	a5,-416(s0)
20401618:	e4e42e23          	sw	a4,-420(s0)
2040161c:	e4d42c23          	sw	a3,-424(s0)
20401620:	e5c42783          	lw	a5,-420(s0)
20401624:	b0f42423          	sw	a5,-1272(s0)
20401628:	b0042623          	sw	zero,-1268(s0)
2040162c:	e6042783          	lw	a5,-416(s0)
20401630:	b0f42023          	sw	a5,-1280(s0)
20401634:	b0042223          	sw	zero,-1276(s0)
20401638:	b0042783          	lw	a5,-1280(s0)
2040163c:	00079793          	slli	a5,a5,0x0
20401640:	aef42e23          	sw	a5,-1284(s0)
20401644:	ae042c23          	sw	zero,-1288(s0)
20401648:	b0842683          	lw	a3,-1272(s0)
2040164c:	b0c42703          	lw	a4,-1268(s0)
20401650:	8636                	mv	a2,a3
20401652:	af842783          	lw	a5,-1288(s0)
20401656:	afc42803          	lw	a6,-1284(s0)
2040165a:	85be                	mv	a1,a5
2040165c:	8e4d                	or	a2,a2,a1
2040165e:	aec42823          	sw	a2,-1296(s0)
20401662:	87c2                	mv	a5,a6
20401664:	8fd9                	or	a5,a5,a4
20401666:	aef42a23          	sw	a5,-1292(s0)
2040166a:	af042783          	lw	a5,-1296(s0)
2040166e:	af442803          	lw	a6,-1292(s0)
20401672:	e4f42023          	sw	a5,-448(s0)
20401676:	e5042223          	sw	a6,-444(s0)
2040167a:	b78d                	j	204015dc <_ZN13LiquidCrystal5beginEhhh+0xee2>
      while (current < later) {
2040167c:	e4042603          	lw	a2,-448(s0)
20401680:	e4442683          	lw	a3,-444(s0)
20401684:	e7442703          	lw	a4,-396(s0)
20401688:	87b6                	mv	a5,a3
2040168a:	00e7ec63          	bltu	a5,a4,204016a2 <_ZN13LiquidCrystal5beginEhhh+0xfa8>
2040168e:	e7442703          	lw	a4,-396(s0)
20401692:	87b6                	mv	a5,a3
20401694:	08f71463          	bne	a4,a5,2040171c <_ZN13LiquidCrystal5beginEhhh+0x1022>
20401698:	e7042703          	lw	a4,-400(s0)
2040169c:	87b2                	mv	a5,a2
2040169e:	06e7ff63          	bleu	a4,a5,2040171c <_ZN13LiquidCrystal5beginEhhh+0x1022>
	rdmcycle(&current);
204016a2:	b80027f3          	csrr	a5,mcycleh
204016a6:	b0002773          	csrr	a4,mcycle
204016aa:	b80026f3          	csrr	a3,mcycleh
204016ae:	fed79ae3          	bne	a5,a3,204016a2 <_ZN13LiquidCrystal5beginEhhh+0xfa8>
204016b2:	e4f42a23          	sw	a5,-428(s0)
204016b6:	e4e42823          	sw	a4,-432(s0)
204016ba:	e4d42623          	sw	a3,-436(s0)
204016be:	e5042783          	lw	a5,-432(s0)
204016c2:	aef42423          	sw	a5,-1304(s0)
204016c6:	ae042623          	sw	zero,-1300(s0)
204016ca:	e5442783          	lw	a5,-428(s0)
204016ce:	aef42023          	sw	a5,-1312(s0)
204016d2:	ae042223          	sw	zero,-1308(s0)
204016d6:	ae042783          	lw	a5,-1312(s0)
204016da:	00079793          	slli	a5,a5,0x0
204016de:	acf42e23          	sw	a5,-1316(s0)
204016e2:	ac042c23          	sw	zero,-1320(s0)
204016e6:	ae842683          	lw	a3,-1304(s0)
204016ea:	aec42703          	lw	a4,-1300(s0)
204016ee:	8636                	mv	a2,a3
204016f0:	ad842783          	lw	a5,-1320(s0)
204016f4:	adc42803          	lw	a6,-1316(s0)
204016f8:	85be                	mv	a1,a5
204016fa:	8e4d                	or	a2,a2,a1
204016fc:	acc42823          	sw	a2,-1328(s0)
20401700:	87c2                	mv	a5,a6
20401702:	8fd9                	or	a5,a5,a4
20401704:	acf42a23          	sw	a5,-1324(s0)
20401708:	ad042783          	lw	a5,-1328(s0)
2040170c:	ad442803          	lw	a6,-1324(s0)
20401710:	e4f42023          	sw	a5,-448(s0)
20401714:	e5042223          	sw	a6,-444(s0)
20401718:	b795                	j	2040167c <_ZN13LiquidCrystal5beginEhhh+0xf82>
    return;
2040171a:	0001                	nop
    delayMicroseconds(4500);  // wait more than 4.1ms

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
2040171c:	e0c42783          	lw	a5,-500(s0)
20401720:	0137c783          	lbu	a5,19(a5)
20401724:	0207e793          	ori	a5,a5,32
20401728:	0ff7f793          	andi	a5,a5,255
2040172c:	85be                	mv	a1,a5
2040172e:	e0c42503          	lw	a0,-500(s0)
20401732:	7a6000ef          	jal	ra,20401ed8 <_ZN13LiquidCrystal7commandEh>
20401736:	09600793          	li	a5,150
2040173a:	ecf42423          	sw	a5,-312(s0)
  if (usec == 0) {
2040173e:	ec842783          	lw	a5,-312(s0)
20401742:	2c078b63          	beqz	a5,20401a18 <_ZN13LiquidCrystal5beginEhhh+0x131e>
  rdmcycle(&current);
20401746:	b80027f3          	csrr	a5,mcycleh
2040174a:	b0002773          	csrr	a4,mcycle
2040174e:	b80026f3          	csrr	a3,mcycleh
20401752:	fed79ae3          	bne	a5,a3,20401746 <_ZN13LiquidCrystal5beginEhhh+0x104c>
20401756:	ecf42223          	sw	a5,-316(s0)
2040175a:	ece42023          	sw	a4,-320(s0)
2040175e:	ead42e23          	sw	a3,-324(s0)
20401762:	ec042783          	lw	a5,-320(s0)
20401766:	bcf42c23          	sw	a5,-1064(s0)
2040176a:	bc042e23          	sw	zero,-1060(s0)
2040176e:	ec442783          	lw	a5,-316(s0)
20401772:	bcf42823          	sw	a5,-1072(s0)
20401776:	bc042a23          	sw	zero,-1068(s0)
2040177a:	bd042783          	lw	a5,-1072(s0)
2040177e:	00079793          	slli	a5,a5,0x0
20401782:	bcf42623          	sw	a5,-1076(s0)
20401786:	bc042423          	sw	zero,-1080(s0)
2040178a:	bd842683          	lw	a3,-1064(s0)
2040178e:	bdc42703          	lw	a4,-1060(s0)
20401792:	8636                	mv	a2,a3
20401794:	bc842783          	lw	a5,-1080(s0)
20401798:	bcc42803          	lw	a6,-1076(s0)
2040179c:	85be                	mv	a1,a5
2040179e:	8e4d                	or	a2,a2,a1
204017a0:	bcc42023          	sw	a2,-1088(s0)
204017a4:	87c2                	mv	a5,a6
204017a6:	8fd9                	or	a5,a5,a4
204017a8:	bcf42223          	sw	a5,-1084(s0)
204017ac:	bc042783          	lw	a5,-1088(s0)
204017b0:	bc442803          	lw	a6,-1084(s0)
204017b4:	e2f42c23          	sw	a5,-456(s0)
204017b8:	e3042e23          	sw	a6,-452(s0)
  later = current + usec * (F_CPU/1000000);
204017bc:	ec842783          	lw	a5,-312(s0)
204017c0:	baf42c23          	sw	a5,-1096(s0)
204017c4:	ba042e23          	sw	zero,-1092(s0)
204017c8:	bb842683          	lw	a3,-1096(s0)
204017cc:	bbc42703          	lw	a4,-1092(s0)
204017d0:	87b6                	mv	a5,a3
204017d2:	83f1                	srli	a5,a5,0x1c
204017d4:	863a                	mv	a2,a4
204017d6:	0612                	slli	a2,a2,0x4
204017d8:	dec42623          	sw	a2,-532(s0)
204017dc:	dec42603          	lw	a2,-532(s0)
204017e0:	8fd1                	or	a5,a5,a2
204017e2:	def42623          	sw	a5,-532(s0)
204017e6:	87b6                	mv	a5,a3
204017e8:	0792                	slli	a5,a5,0x4
204017ea:	def42423          	sw	a5,-536(s0)
204017ee:	de842683          	lw	a3,-536(s0)
204017f2:	dec42703          	lw	a4,-532(s0)
204017f6:	e3842503          	lw	a0,-456(s0)
204017fa:	e3c42583          	lw	a1,-452(s0)
204017fe:	00a687b3          	add	a5,a3,a0
20401802:	863e                	mv	a2,a5
20401804:	00d63633          	sltu	a2,a2,a3
20401808:	00b70833          	add	a6,a4,a1
2040180c:	01060733          	add	a4,a2,a6
20401810:	883a                	mv	a6,a4
20401812:	eaf42823          	sw	a5,-336(s0)
20401816:	eb042a23          	sw	a6,-332(s0)
  if (later > current) // usual case
2040181a:	e3842683          	lw	a3,-456(s0)
2040181e:	e3c42703          	lw	a4,-452(s0)
20401822:	eb442783          	lw	a5,-332(s0)
20401826:	863a                	mv	a2,a4
20401828:	00f66d63          	bltu	a2,a5,20401842 <_ZN13LiquidCrystal5beginEhhh+0x1148>
2040182c:	eb442783          	lw	a5,-332(s0)
20401830:	863a                	mv	a2,a4
20401832:	0ac79663          	bne	a5,a2,204018de <_ZN13LiquidCrystal5beginEhhh+0x11e4>
20401836:	eb042783          	lw	a5,-336(s0)
2040183a:	8736                	mv	a4,a3
2040183c:	00f76363          	bltu	a4,a5,20401842 <_ZN13LiquidCrystal5beginEhhh+0x1148>
20401840:	a879                	j	204018de <_ZN13LiquidCrystal5beginEhhh+0x11e4>
      while (later > current) {
20401842:	e3842783          	lw	a5,-456(s0)
20401846:	e3c42803          	lw	a6,-452(s0)
2040184a:	eb442703          	lw	a4,-332(s0)
2040184e:	86c2                	mv	a3,a6
20401850:	00e6eb63          	bltu	a3,a4,20401866 <_ZN13LiquidCrystal5beginEhhh+0x116c>
20401854:	eb442703          	lw	a4,-332(s0)
20401858:	86c2                	mv	a3,a6
2040185a:	1cd71063          	bne	a4,a3,20401a1a <_ZN13LiquidCrystal5beginEhhh+0x1320>
2040185e:	eb042703          	lw	a4,-336(s0)
20401862:	1ae7fc63          	bleu	a4,a5,20401a1a <_ZN13LiquidCrystal5beginEhhh+0x1320>
	rdmcycle(&current);
20401866:	b80026f3          	csrr	a3,mcycleh
2040186a:	b0002773          	csrr	a4,mcycle
2040186e:	b80027f3          	csrr	a5,mcycleh
20401872:	fef69ae3          	bne	a3,a5,20401866 <_ZN13LiquidCrystal5beginEhhh+0x116c>
20401876:	ead42623          	sw	a3,-340(s0)
2040187a:	eae42423          	sw	a4,-344(s0)
2040187e:	eaf42223          	sw	a5,-348(s0)
20401882:	ea842783          	lw	a5,-344(s0)
20401886:	baf42823          	sw	a5,-1104(s0)
2040188a:	ba042a23          	sw	zero,-1100(s0)
2040188e:	eac42783          	lw	a5,-340(s0)
20401892:	baf42423          	sw	a5,-1112(s0)
20401896:	ba042623          	sw	zero,-1108(s0)
2040189a:	ba842783          	lw	a5,-1112(s0)
2040189e:	00079793          	slli	a5,a5,0x0
204018a2:	baf42223          	sw	a5,-1116(s0)
204018a6:	ba042023          	sw	zero,-1120(s0)
204018aa:	bb042683          	lw	a3,-1104(s0)
204018ae:	bb442703          	lw	a4,-1100(s0)
204018b2:	8636                	mv	a2,a3
204018b4:	ba042783          	lw	a5,-1120(s0)
204018b8:	ba442803          	lw	a6,-1116(s0)
204018bc:	85be                	mv	a1,a5
204018be:	8e4d                	or	a2,a2,a1
204018c0:	b8c42c23          	sw	a2,-1128(s0)
204018c4:	87c2                	mv	a5,a6
204018c6:	8fd9                	or	a5,a5,a4
204018c8:	b8f42e23          	sw	a5,-1124(s0)
204018cc:	b9842783          	lw	a5,-1128(s0)
204018d0:	b9c42803          	lw	a6,-1124(s0)
204018d4:	e2f42c23          	sw	a5,-456(s0)
204018d8:	e3042e23          	sw	a6,-452(s0)
204018dc:	b79d                	j	20401842 <_ZN13LiquidCrystal5beginEhhh+0x1148>
      while (later < current) {
204018de:	e3842783          	lw	a5,-456(s0)
204018e2:	e3c42803          	lw	a6,-452(s0)
204018e6:	eb442703          	lw	a4,-332(s0)
204018ea:	86c2                	mv	a3,a6
204018ec:	00d76c63          	bltu	a4,a3,20401904 <_ZN13LiquidCrystal5beginEhhh+0x120a>
204018f0:	eb442703          	lw	a4,-332(s0)
204018f4:	86c2                	mv	a3,a6
204018f6:	08d71363          	bne	a4,a3,2040197c <_ZN13LiquidCrystal5beginEhhh+0x1282>
204018fa:	eb042703          	lw	a4,-336(s0)
204018fe:	00f76363          	bltu	a4,a5,20401904 <_ZN13LiquidCrystal5beginEhhh+0x120a>
20401902:	a8ad                	j	2040197c <_ZN13LiquidCrystal5beginEhhh+0x1282>
	rdmcycle(&current);
20401904:	b80026f3          	csrr	a3,mcycleh
20401908:	b0002773          	csrr	a4,mcycle
2040190c:	b80027f3          	csrr	a5,mcycleh
20401910:	fef69ae3          	bne	a3,a5,20401904 <_ZN13LiquidCrystal5beginEhhh+0x120a>
20401914:	ead42023          	sw	a3,-352(s0)
20401918:	e8e42e23          	sw	a4,-356(s0)
2040191c:	e8f42c23          	sw	a5,-360(s0)
20401920:	e9c42783          	lw	a5,-356(s0)
20401924:	b8f42823          	sw	a5,-1136(s0)
20401928:	b8042a23          	sw	zero,-1132(s0)
2040192c:	ea042783          	lw	a5,-352(s0)
20401930:	b8f42423          	sw	a5,-1144(s0)
20401934:	b8042623          	sw	zero,-1140(s0)
20401938:	b8842783          	lw	a5,-1144(s0)
2040193c:	00079793          	slli	a5,a5,0x0
20401940:	b8f42223          	sw	a5,-1148(s0)
20401944:	b8042023          	sw	zero,-1152(s0)
20401948:	b9042683          	lw	a3,-1136(s0)
2040194c:	b9442703          	lw	a4,-1132(s0)
20401950:	8636                	mv	a2,a3
20401952:	b8042783          	lw	a5,-1152(s0)
20401956:	b8442803          	lw	a6,-1148(s0)
2040195a:	85be                	mv	a1,a5
2040195c:	8e4d                	or	a2,a2,a1
2040195e:	b6c42c23          	sw	a2,-1160(s0)
20401962:	87c2                	mv	a5,a6
20401964:	8fd9                	or	a5,a5,a4
20401966:	b6f42e23          	sw	a5,-1156(s0)
2040196a:	b7842783          	lw	a5,-1160(s0)
2040196e:	b7c42803          	lw	a6,-1156(s0)
20401972:	e2f42c23          	sw	a5,-456(s0)
20401976:	e3042e23          	sw	a6,-452(s0)
2040197a:	b795                	j	204018de <_ZN13LiquidCrystal5beginEhhh+0x11e4>
      while (current < later) {
2040197c:	e3842783          	lw	a5,-456(s0)
20401980:	e3c42803          	lw	a6,-452(s0)
20401984:	eb442703          	lw	a4,-332(s0)
20401988:	86c2                	mv	a3,a6
2040198a:	00e6eb63          	bltu	a3,a4,204019a0 <_ZN13LiquidCrystal5beginEhhh+0x12a6>
2040198e:	eb442703          	lw	a4,-332(s0)
20401992:	86c2                	mv	a3,a6
20401994:	08d71363          	bne	a4,a3,20401a1a <_ZN13LiquidCrystal5beginEhhh+0x1320>
20401998:	eb042703          	lw	a4,-336(s0)
2040199c:	06e7ff63          	bleu	a4,a5,20401a1a <_ZN13LiquidCrystal5beginEhhh+0x1320>
	rdmcycle(&current);
204019a0:	b80026f3          	csrr	a3,mcycleh
204019a4:	b0002773          	csrr	a4,mcycle
204019a8:	b80027f3          	csrr	a5,mcycleh
204019ac:	fef69ae3          	bne	a3,a5,204019a0 <_ZN13LiquidCrystal5beginEhhh+0x12a6>
204019b0:	e8d42a23          	sw	a3,-364(s0)
204019b4:	e8e42823          	sw	a4,-368(s0)
204019b8:	e8f42623          	sw	a5,-372(s0)
204019bc:	e9042783          	lw	a5,-368(s0)
204019c0:	b6f42823          	sw	a5,-1168(s0)
204019c4:	b6042a23          	sw	zero,-1164(s0)
204019c8:	e9442783          	lw	a5,-364(s0)
204019cc:	b6f42423          	sw	a5,-1176(s0)
204019d0:	b6042623          	sw	zero,-1172(s0)
204019d4:	b6842783          	lw	a5,-1176(s0)
204019d8:	00079793          	slli	a5,a5,0x0
204019dc:	b6f42223          	sw	a5,-1180(s0)
204019e0:	b6042023          	sw	zero,-1184(s0)
204019e4:	b7042683          	lw	a3,-1168(s0)
204019e8:	b7442703          	lw	a4,-1164(s0)
204019ec:	8636                	mv	a2,a3
204019ee:	b6042783          	lw	a5,-1184(s0)
204019f2:	b6442803          	lw	a6,-1180(s0)
204019f6:	85be                	mv	a1,a5
204019f8:	8e4d                	or	a2,a2,a1
204019fa:	b4c42c23          	sw	a2,-1192(s0)
204019fe:	87c2                	mv	a5,a6
20401a00:	8fd9                	or	a5,a5,a4
20401a02:	b4f42e23          	sw	a5,-1188(s0)
20401a06:	b5842783          	lw	a5,-1192(s0)
20401a0a:	b5c42803          	lw	a6,-1188(s0)
20401a0e:	e2f42c23          	sw	a5,-456(s0)
20401a12:	e3042e23          	sw	a6,-452(s0)
20401a16:	b79d                	j	2040197c <_ZN13LiquidCrystal5beginEhhh+0x1282>
    return;
20401a18:	0001                	nop
    delayMicroseconds(150);

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
20401a1a:	e0c42783          	lw	a5,-500(s0)
20401a1e:	0137c783          	lbu	a5,19(a5)
20401a22:	0207e793          	ori	a5,a5,32
20401a26:	0ff7f793          	andi	a5,a5,255
20401a2a:	85be                	mv	a1,a5
20401a2c:	e0c42503          	lw	a0,-500(s0)
20401a30:	2165                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
20401a32:	e0c42783          	lw	a5,-500(s0)
20401a36:	0137c783          	lbu	a5,19(a5)
20401a3a:	0207e793          	ori	a5,a5,32
20401a3e:	0ff7f793          	andi	a5,a5,255
20401a42:	85be                	mv	a1,a5
20401a44:	e0c42503          	lw	a0,-500(s0)
20401a48:	2941                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
20401a4a:	e0c42783          	lw	a5,-500(s0)
20401a4e:	4711                	li	a4,4
20401a50:	00e78a23          	sb	a4,20(a5)
  display();
20401a54:	e0c42503          	lw	a0,-500(s0)
20401a58:	2925                	jal	20401e90 <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
20401a5a:	e0c42503          	lw	a0,-500(s0)
20401a5e:	20c9                	jal	20401b20 <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
20401a60:	e0c42783          	lw	a5,-500(s0)
20401a64:	4709                	li	a4,2
20401a66:	00e78aa3          	sb	a4,21(a5)
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
20401a6a:	e0c42783          	lw	a5,-500(s0)
20401a6e:	0157c783          	lbu	a5,21(a5)
20401a72:	0047e793          	ori	a5,a5,4
20401a76:	0ff7f793          	andi	a5,a5,255
20401a7a:	85be                	mv	a1,a5
20401a7c:	e0c42503          	lw	a0,-500(s0)
20401a80:	29a1                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>

}
20401a82:	0001                	nop
20401a84:	838a                	mv	t2,sp
20401a86:	52c12083          	lw	ra,1324(sp)
20401a8a:	52812403          	lw	s0,1320(sp)
20401a8e:	52412903          	lw	s2,1316(sp)
20401a92:	52012983          	lw	s3,1312(sp)
20401a96:	51c12a03          	lw	s4,1308(sp)
20401a9a:	51812a83          	lw	s5,1304(sp)
20401a9e:	51412b03          	lw	s6,1300(sp)
20401aa2:	51012b83          	lw	s7,1296(sp)
20401aa6:	50c12c03          	lw	s8,1292(sp)
20401aaa:	50812c83          	lw	s9,1288(sp)
20401aae:	50412d03          	lw	s10,1284(sp)
20401ab2:	50012d83          	lw	s11,1280(sp)
20401ab6:	53010113          	addi	sp,sp,1328
20401aba:	8082                	ret

20401abc <_ZN13LiquidCrystal13setRowOffsetsEiiii>:

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
20401abc:	7179                	addi	sp,sp,-48
20401abe:	d622                	sw	s0,44(sp)
20401ac0:	1800                	addi	s0,sp,48
20401ac2:	fea42623          	sw	a0,-20(s0)
20401ac6:	feb42423          	sw	a1,-24(s0)
20401aca:	fec42223          	sw	a2,-28(s0)
20401ace:	fed42023          	sw	a3,-32(s0)
20401ad2:	fce42e23          	sw	a4,-36(s0)
  _row_offsets[0] = row0;
20401ad6:	fe842783          	lw	a5,-24(s0)
20401ada:	0ff7f713          	andi	a4,a5,255
20401ade:	fec42783          	lw	a5,-20(s0)
20401ae2:	00e78c23          	sb	a4,24(a5)
  _row_offsets[1] = row1;
20401ae6:	fe442783          	lw	a5,-28(s0)
20401aea:	0ff7f713          	andi	a4,a5,255
20401aee:	fec42783          	lw	a5,-20(s0)
20401af2:	00e78ca3          	sb	a4,25(a5)
  _row_offsets[2] = row2;
20401af6:	fe042783          	lw	a5,-32(s0)
20401afa:	0ff7f713          	andi	a4,a5,255
20401afe:	fec42783          	lw	a5,-20(s0)
20401b02:	00e78d23          	sb	a4,26(a5)
  _row_offsets[3] = row3;
20401b06:	fdc42783          	lw	a5,-36(s0)
20401b0a:	0ff7f713          	andi	a4,a5,255
20401b0e:	fec42783          	lw	a5,-20(s0)
20401b12:	00e78da3          	sb	a4,27(a5)
}
20401b16:	0001                	nop
20401b18:	838a                	mv	t2,sp
20401b1a:	5432                	lw	s0,44(sp)
20401b1c:	6145                	addi	sp,sp,48
20401b1e:	8082                	ret

20401b20 <_ZN13LiquidCrystal5clearEv>:

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
20401b20:	7151                	addi	sp,sp,-240
20401b22:	d786                	sw	ra,236(sp)
20401b24:	d5a2                	sw	s0,232(sp)
20401b26:	d3ca                	sw	s2,228(sp)
20401b28:	d1ce                	sw	s3,224(sp)
20401b2a:	cfd2                	sw	s4,220(sp)
20401b2c:	cdd6                	sw	s5,216(sp)
20401b2e:	cbda                	sw	s6,212(sp)
20401b30:	c9de                	sw	s7,208(sp)
20401b32:	c7e2                	sw	s8,204(sp)
20401b34:	c5e6                	sw	s9,200(sp)
20401b36:	c3ea                	sw	s10,196(sp)
20401b38:	c1ee                	sw	s11,192(sp)
20401b3a:	1980                	addi	s0,sp,240
20401b3c:	f6a42e23          	sw	a0,-132(s0)
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
20401b40:	4585                	li	a1,1
20401b42:	f7c42503          	lw	a0,-132(s0)
20401b46:	2e49                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>
20401b48:	7d000793          	li	a5,2000
20401b4c:	fcf42623          	sw	a5,-52(s0)
  if (usec == 0) {
20401b50:	fcc42783          	lw	a5,-52(s0)
20401b54:	e399                	bnez	a5,20401b5a <_ZN13LiquidCrystal5clearEv+0x3a>
    return;
20401b56:	0001                	nop
  delayMicroseconds(2000);  // this command takes a long time!
}
20401b58:	a479                	j	20401de6 <_ZN13LiquidCrystal5clearEv+0x2c6>
  rdmcycle(&current);
20401b5a:	b80027f3          	csrr	a5,mcycleh
20401b5e:	b0002773          	csrr	a4,mcycle
20401b62:	b80026f3          	csrr	a3,mcycleh
20401b66:	fed79ae3          	bne	a5,a3,20401b5a <_ZN13LiquidCrystal5clearEv+0x3a>
20401b6a:	fcf42423          	sw	a5,-56(s0)
20401b6e:	fce42223          	sw	a4,-60(s0)
20401b72:	fcd42023          	sw	a3,-64(s0)
20401b76:	fc442783          	lw	a5,-60(s0)
20401b7a:	8c3e                	mv	s8,a5
20401b7c:	4c81                	li	s9,0
20401b7e:	fc842783          	lw	a5,-56(s0)
20401b82:	f6f42823          	sw	a5,-144(s0)
20401b86:	f6042a23          	sw	zero,-140(s0)
20401b8a:	f7042783          	lw	a5,-144(s0)
20401b8e:	00079a93          	slli	s5,a5,0x0
20401b92:	4a01                	li	s4,0
20401b94:	014c6d33          	or	s10,s8,s4
20401b98:	015cedb3          	or	s11,s9,s5
20401b9c:	f9a42423          	sw	s10,-120(s0)
20401ba0:	f9b42623          	sw	s11,-116(s0)
  later = current + usec * (F_CPU/1000000);
20401ba4:	fcc42783          	lw	a5,-52(s0)
20401ba8:	8b3e                	mv	s6,a5
20401baa:	4b81                	li	s7,0
20401bac:	01cb5793          	srli	a5,s6,0x1c
20401bb0:	004b9993          	slli	s3,s7,0x4
20401bb4:	0137e9b3          	or	s3,a5,s3
20401bb8:	004b1913          	slli	s2,s6,0x4
20401bbc:	87ca                	mv	a5,s2
20401bbe:	884e                	mv	a6,s3
20401bc0:	f8842583          	lw	a1,-120(s0)
20401bc4:	f8c42603          	lw	a2,-116(s0)
20401bc8:	00b786b3          	add	a3,a5,a1
20401bcc:	8536                	mv	a0,a3
20401bce:	00f53533          	sltu	a0,a0,a5
20401bd2:	00c80733          	add	a4,a6,a2
20401bd6:	00e507b3          	add	a5,a0,a4
20401bda:	873e                	mv	a4,a5
20401bdc:	fad42c23          	sw	a3,-72(s0)
20401be0:	fae42e23          	sw	a4,-68(s0)
  if (later > current) // usual case
20401be4:	f8842683          	lw	a3,-120(s0)
20401be8:	f8c42703          	lw	a4,-116(s0)
20401bec:	fbc42603          	lw	a2,-68(s0)
20401bf0:	87ba                	mv	a5,a4
20401bf2:	00c7ed63          	bltu	a5,a2,20401c0c <_ZN13LiquidCrystal5clearEv+0xec>
20401bf6:	fbc42603          	lw	a2,-68(s0)
20401bfa:	87ba                	mv	a5,a4
20401bfc:	0af61763          	bne	a2,a5,20401caa <_ZN13LiquidCrystal5clearEv+0x18a>
20401c00:	fb842783          	lw	a5,-72(s0)
20401c04:	8736                	mv	a4,a3
20401c06:	00f76363          	bltu	a4,a5,20401c0c <_ZN13LiquidCrystal5clearEv+0xec>
20401c0a:	a045                	j	20401caa <_ZN13LiquidCrystal5clearEv+0x18a>
      while (later > current) {
20401c0c:	f8842783          	lw	a5,-120(s0)
20401c10:	f8c42803          	lw	a6,-116(s0)
20401c14:	fbc42703          	lw	a4,-68(s0)
20401c18:	86c2                	mv	a3,a6
20401c1a:	00e6ec63          	bltu	a3,a4,20401c32 <_ZN13LiquidCrystal5clearEv+0x112>
20401c1e:	fbc42703          	lw	a4,-68(s0)
20401c22:	86c2                	mv	a3,a6
20401c24:	1cd71163          	bne	a4,a3,20401de6 <_ZN13LiquidCrystal5clearEv+0x2c6>
20401c28:	fb842703          	lw	a4,-72(s0)
20401c2c:	00e7e363          	bltu	a5,a4,20401c32 <_ZN13LiquidCrystal5clearEv+0x112>
20401c30:	aa5d                	j	20401de6 <_ZN13LiquidCrystal5clearEv+0x2c6>
	rdmcycle(&current);
20401c32:	b80026f3          	csrr	a3,mcycleh
20401c36:	b0002773          	csrr	a4,mcycle
20401c3a:	b80027f3          	csrr	a5,mcycleh
20401c3e:	fef69ae3          	bne	a3,a5,20401c32 <_ZN13LiquidCrystal5clearEv+0x112>
20401c42:	fad42a23          	sw	a3,-76(s0)
20401c46:	fae42823          	sw	a4,-80(s0)
20401c4a:	faf42623          	sw	a5,-84(s0)
20401c4e:	fb042783          	lw	a5,-80(s0)
20401c52:	f6f42423          	sw	a5,-152(s0)
20401c56:	f6042623          	sw	zero,-148(s0)
20401c5a:	fb442783          	lw	a5,-76(s0)
20401c5e:	f6f42023          	sw	a5,-160(s0)
20401c62:	f6042223          	sw	zero,-156(s0)
20401c66:	f6042783          	lw	a5,-160(s0)
20401c6a:	00079793          	slli	a5,a5,0x0
20401c6e:	f4f42e23          	sw	a5,-164(s0)
20401c72:	f4042c23          	sw	zero,-168(s0)
20401c76:	f6842683          	lw	a3,-152(s0)
20401c7a:	f6c42703          	lw	a4,-148(s0)
20401c7e:	8636                	mv	a2,a3
20401c80:	f5842783          	lw	a5,-168(s0)
20401c84:	f5c42803          	lw	a6,-164(s0)
20401c88:	85be                	mv	a1,a5
20401c8a:	8e4d                	or	a2,a2,a1
20401c8c:	f4c42823          	sw	a2,-176(s0)
20401c90:	87c2                	mv	a5,a6
20401c92:	8fd9                	or	a5,a5,a4
20401c94:	f4f42a23          	sw	a5,-172(s0)
20401c98:	f5042783          	lw	a5,-176(s0)
20401c9c:	f5442803          	lw	a6,-172(s0)
20401ca0:	f8f42423          	sw	a5,-120(s0)
20401ca4:	f9042623          	sw	a6,-116(s0)
20401ca8:	b795                	j	20401c0c <_ZN13LiquidCrystal5clearEv+0xec>
      while (later < current) {
20401caa:	f8842783          	lw	a5,-120(s0)
20401cae:	f8c42803          	lw	a6,-116(s0)
20401cb2:	fbc42703          	lw	a4,-68(s0)
20401cb6:	86c2                	mv	a3,a6
20401cb8:	00d76c63          	bltu	a4,a3,20401cd0 <_ZN13LiquidCrystal5clearEv+0x1b0>
20401cbc:	fbc42703          	lw	a4,-68(s0)
20401cc0:	86c2                	mv	a3,a6
20401cc2:	08d71363          	bne	a4,a3,20401d48 <_ZN13LiquidCrystal5clearEv+0x228>
20401cc6:	fb842703          	lw	a4,-72(s0)
20401cca:	00f76363          	bltu	a4,a5,20401cd0 <_ZN13LiquidCrystal5clearEv+0x1b0>
20401cce:	a8ad                	j	20401d48 <_ZN13LiquidCrystal5clearEv+0x228>
	rdmcycle(&current);
20401cd0:	b80026f3          	csrr	a3,mcycleh
20401cd4:	b0002773          	csrr	a4,mcycle
20401cd8:	b80027f3          	csrr	a5,mcycleh
20401cdc:	fef69ae3          	bne	a3,a5,20401cd0 <_ZN13LiquidCrystal5clearEv+0x1b0>
20401ce0:	fad42423          	sw	a3,-88(s0)
20401ce4:	fae42223          	sw	a4,-92(s0)
20401ce8:	faf42023          	sw	a5,-96(s0)
20401cec:	fa442783          	lw	a5,-92(s0)
20401cf0:	f4f42423          	sw	a5,-184(s0)
20401cf4:	f4042623          	sw	zero,-180(s0)
20401cf8:	fa842783          	lw	a5,-88(s0)
20401cfc:	f4f42023          	sw	a5,-192(s0)
20401d00:	f4042223          	sw	zero,-188(s0)
20401d04:	f4042783          	lw	a5,-192(s0)
20401d08:	00079793          	slli	a5,a5,0x0
20401d0c:	f2f42e23          	sw	a5,-196(s0)
20401d10:	f2042c23          	sw	zero,-200(s0)
20401d14:	f4842683          	lw	a3,-184(s0)
20401d18:	f4c42703          	lw	a4,-180(s0)
20401d1c:	8636                	mv	a2,a3
20401d1e:	f3842783          	lw	a5,-200(s0)
20401d22:	f3c42803          	lw	a6,-196(s0)
20401d26:	85be                	mv	a1,a5
20401d28:	8e4d                	or	a2,a2,a1
20401d2a:	f2c42823          	sw	a2,-208(s0)
20401d2e:	87c2                	mv	a5,a6
20401d30:	8fd9                	or	a5,a5,a4
20401d32:	f2f42a23          	sw	a5,-204(s0)
20401d36:	f3042783          	lw	a5,-208(s0)
20401d3a:	f3442803          	lw	a6,-204(s0)
20401d3e:	f8f42423          	sw	a5,-120(s0)
20401d42:	f9042623          	sw	a6,-116(s0)
20401d46:	b795                	j	20401caa <_ZN13LiquidCrystal5clearEv+0x18a>
      while (current < later) {
20401d48:	f8842783          	lw	a5,-120(s0)
20401d4c:	f8c42803          	lw	a6,-116(s0)
20401d50:	fbc42703          	lw	a4,-68(s0)
20401d54:	86c2                	mv	a3,a6
20401d56:	00e6ec63          	bltu	a3,a4,20401d6e <_ZN13LiquidCrystal5clearEv+0x24e>
20401d5a:	fbc42703          	lw	a4,-68(s0)
20401d5e:	86c2                	mv	a3,a6
20401d60:	08d71363          	bne	a4,a3,20401de6 <_ZN13LiquidCrystal5clearEv+0x2c6>
20401d64:	fb842703          	lw	a4,-72(s0)
20401d68:	00e7e363          	bltu	a5,a4,20401d6e <_ZN13LiquidCrystal5clearEv+0x24e>
20401d6c:	a8ad                	j	20401de6 <_ZN13LiquidCrystal5clearEv+0x2c6>
	rdmcycle(&current);
20401d6e:	b80026f3          	csrr	a3,mcycleh
20401d72:	b0002773          	csrr	a4,mcycle
20401d76:	b80027f3          	csrr	a5,mcycleh
20401d7a:	fef69ae3          	bne	a3,a5,20401d6e <_ZN13LiquidCrystal5clearEv+0x24e>
20401d7e:	f8d42e23          	sw	a3,-100(s0)
20401d82:	f8e42c23          	sw	a4,-104(s0)
20401d86:	f8f42a23          	sw	a5,-108(s0)
20401d8a:	f9842783          	lw	a5,-104(s0)
20401d8e:	f2f42423          	sw	a5,-216(s0)
20401d92:	f2042623          	sw	zero,-212(s0)
20401d96:	f9c42783          	lw	a5,-100(s0)
20401d9a:	f2f42023          	sw	a5,-224(s0)
20401d9e:	f2042223          	sw	zero,-220(s0)
20401da2:	f2042783          	lw	a5,-224(s0)
20401da6:	00079793          	slli	a5,a5,0x0
20401daa:	f0f42e23          	sw	a5,-228(s0)
20401dae:	f0042c23          	sw	zero,-232(s0)
20401db2:	f2842683          	lw	a3,-216(s0)
20401db6:	f2c42703          	lw	a4,-212(s0)
20401dba:	8636                	mv	a2,a3
20401dbc:	f1842783          	lw	a5,-232(s0)
20401dc0:	f1c42803          	lw	a6,-228(s0)
20401dc4:	85be                	mv	a1,a5
20401dc6:	8e4d                	or	a2,a2,a1
20401dc8:	f0c42823          	sw	a2,-240(s0)
20401dcc:	87c2                	mv	a5,a6
20401dce:	8fd9                	or	a5,a5,a4
20401dd0:	f0f42a23          	sw	a5,-236(s0)
20401dd4:	f1042783          	lw	a5,-240(s0)
20401dd8:	f1442803          	lw	a6,-236(s0)
20401ddc:	f8f42423          	sw	a5,-120(s0)
20401de0:	f9042623          	sw	a6,-116(s0)
20401de4:	b795                	j	20401d48 <_ZN13LiquidCrystal5clearEv+0x228>
20401de6:	0001                	nop
20401de8:	838a                	mv	t2,sp
20401dea:	50be                	lw	ra,236(sp)
20401dec:	542e                	lw	s0,232(sp)
20401dee:	591e                	lw	s2,228(sp)
20401df0:	598e                	lw	s3,224(sp)
20401df2:	4a7e                	lw	s4,220(sp)
20401df4:	4aee                	lw	s5,216(sp)
20401df6:	4b5e                	lw	s6,212(sp)
20401df8:	4bce                	lw	s7,208(sp)
20401dfa:	4c3e                	lw	s8,204(sp)
20401dfc:	4cae                	lw	s9,200(sp)
20401dfe:	4d1e                	lw	s10,196(sp)
20401e00:	4d8e                	lw	s11,192(sp)
20401e02:	616d                	addi	sp,sp,240
20401e04:	8082                	ret

20401e06 <_ZN13LiquidCrystal9setCursorEhh>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
20401e06:	7179                	addi	sp,sp,-48
20401e08:	d606                	sw	ra,44(sp)
20401e0a:	d422                	sw	s0,40(sp)
20401e0c:	1800                	addi	s0,sp,48
20401e0e:	fca42e23          	sw	a0,-36(s0)
20401e12:	87ae                	mv	a5,a1
20401e14:	8732                	mv	a4,a2
20401e16:	fcf40da3          	sb	a5,-37(s0)
20401e1a:	87ba                	mv	a5,a4
20401e1c:	fcf40d23          	sb	a5,-38(s0)
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
20401e20:	4791                	li	a5,4
20401e22:	fef42623          	sw	a5,-20(s0)
  if ( row >= max_lines ) {
20401e26:	fda44703          	lbu	a4,-38(s0)
20401e2a:	478d                	li	a5,3
20401e2c:	00e7f563          	bleu	a4,a5,20401e36 <_ZN13LiquidCrystal9setCursorEhh+0x30>
    row = max_lines - 1;    // we count rows starting w/0
20401e30:	478d                	li	a5,3
20401e32:	fcf40d23          	sb	a5,-38(s0)
  }
  if ( row >= _numlines ) {
20401e36:	fdc42783          	lw	a5,-36(s0)
20401e3a:	0177c783          	lbu	a5,23(a5)
20401e3e:	fda44703          	lbu	a4,-38(s0)
20401e42:	00f76963          	bltu	a4,a5,20401e54 <_ZN13LiquidCrystal9setCursorEhh+0x4e>
    row = _numlines - 1;    // we count rows starting w/0
20401e46:	fdc42783          	lw	a5,-36(s0)
20401e4a:	0177c783          	lbu	a5,23(a5)
20401e4e:	17fd                	addi	a5,a5,-1
20401e50:	fcf40d23          	sb	a5,-38(s0)
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
20401e54:	fda44783          	lbu	a5,-38(s0)
20401e58:	fdc42703          	lw	a4,-36(s0)
20401e5c:	97ba                	add	a5,a5,a4
20401e5e:	0187c703          	lbu	a4,24(a5)
20401e62:	fdb44783          	lbu	a5,-37(s0)
20401e66:	97ba                	add	a5,a5,a4
20401e68:	0ff7f793          	andi	a5,a5,255
20401e6c:	07e2                	slli	a5,a5,0x18
20401e6e:	87e1                	srai	a5,a5,0x18
20401e70:	f807e793          	ori	a5,a5,-128
20401e74:	07e2                	slli	a5,a5,0x18
20401e76:	87e1                	srai	a5,a5,0x18
20401e78:	0ff7f793          	andi	a5,a5,255
20401e7c:	85be                	mv	a1,a5
20401e7e:	fdc42503          	lw	a0,-36(s0)
20401e82:	2899                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>
}
20401e84:	0001                	nop
20401e86:	838a                	mv	t2,sp
20401e88:	50b2                	lw	ra,44(sp)
20401e8a:	5422                	lw	s0,40(sp)
20401e8c:	6145                	addi	sp,sp,48
20401e8e:	8082                	ret

20401e90 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
20401e90:	1101                	addi	sp,sp,-32
20401e92:	ce06                	sw	ra,28(sp)
20401e94:	cc22                	sw	s0,24(sp)
20401e96:	1000                	addi	s0,sp,32
20401e98:	fea42623          	sw	a0,-20(s0)
  _displaycontrol |= LCD_DISPLAYON;
20401e9c:	fec42783          	lw	a5,-20(s0)
20401ea0:	0147c783          	lbu	a5,20(a5)
20401ea4:	0047e793          	ori	a5,a5,4
20401ea8:	0ff7f713          	andi	a4,a5,255
20401eac:	fec42783          	lw	a5,-20(s0)
20401eb0:	00e78a23          	sb	a4,20(a5)
  command(LCD_DISPLAYCONTROL | _displaycontrol);
20401eb4:	fec42783          	lw	a5,-20(s0)
20401eb8:	0147c783          	lbu	a5,20(a5)
20401ebc:	0087e793          	ori	a5,a5,8
20401ec0:	0ff7f793          	andi	a5,a5,255
20401ec4:	85be                	mv	a1,a5
20401ec6:	fec42503          	lw	a0,-20(s0)
20401eca:	2039                	jal	20401ed8 <_ZN13LiquidCrystal7commandEh>
}
20401ecc:	0001                	nop
20401ece:	838a                	mv	t2,sp
20401ed0:	40f2                	lw	ra,28(sp)
20401ed2:	4462                	lw	s0,24(sp)
20401ed4:	6105                	addi	sp,sp,32
20401ed6:	8082                	ret

20401ed8 <_ZN13LiquidCrystal7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
20401ed8:	1101                	addi	sp,sp,-32
20401eda:	ce06                	sw	ra,28(sp)
20401edc:	cc22                	sw	s0,24(sp)
20401ede:	1000                	addi	s0,sp,32
20401ee0:	fea42623          	sw	a0,-20(s0)
20401ee4:	87ae                	mv	a5,a1
20401ee6:	fef405a3          	sb	a5,-21(s0)
  send(value, LOW);
20401eea:	feb44783          	lbu	a5,-21(s0)
20401eee:	4601                	li	a2,0
20401ef0:	85be                	mv	a1,a5
20401ef2:	fec42503          	lw	a0,-20(s0)
20401ef6:	2835                	jal	20401f32 <_ZN13LiquidCrystal4sendEhh>
}
20401ef8:	0001                	nop
20401efa:	838a                	mv	t2,sp
20401efc:	40f2                	lw	ra,28(sp)
20401efe:	4462                	lw	s0,24(sp)
20401f00:	6105                	addi	sp,sp,32
20401f02:	8082                	ret

20401f04 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
20401f04:	1101                	addi	sp,sp,-32
20401f06:	ce06                	sw	ra,28(sp)
20401f08:	cc22                	sw	s0,24(sp)
20401f0a:	1000                	addi	s0,sp,32
20401f0c:	fea42623          	sw	a0,-20(s0)
20401f10:	87ae                	mv	a5,a1
20401f12:	fef405a3          	sb	a5,-21(s0)
  send(value, HIGH);
20401f16:	feb44783          	lbu	a5,-21(s0)
20401f1a:	4605                	li	a2,1
20401f1c:	85be                	mv	a1,a5
20401f1e:	fec42503          	lw	a0,-20(s0)
20401f22:	2801                	jal	20401f32 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
20401f24:	4785                	li	a5,1
}
20401f26:	853e                	mv	a0,a5
20401f28:	838a                	mv	t2,sp
20401f2a:	40f2                	lw	ra,28(sp)
20401f2c:	4462                	lw	s0,24(sp)
20401f2e:	6105                	addi	sp,sp,32
20401f30:	8082                	ret

20401f32 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
20401f32:	1101                	addi	sp,sp,-32
20401f34:	ce06                	sw	ra,28(sp)
20401f36:	cc22                	sw	s0,24(sp)
20401f38:	1000                	addi	s0,sp,32
20401f3a:	fea42623          	sw	a0,-20(s0)
20401f3e:	87ae                	mv	a5,a1
20401f40:	8732                	mv	a4,a2
20401f42:	fef405a3          	sb	a5,-21(s0)
20401f46:	87ba                	mv	a5,a4
20401f48:	fef40523          	sb	a5,-22(s0)
  digitalWrite(_rs_pin, mode);
20401f4c:	fec42783          	lw	a5,-20(s0)
20401f50:	0087c783          	lbu	a5,8(a5)
20401f54:	873e                	mv	a4,a5
20401f56:	fea44783          	lbu	a5,-22(s0)
20401f5a:	85be                	mv	a1,a5
20401f5c:	853a                	mv	a0,a4
20401f5e:	3e5000ef          	jal	ra,20402b42 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
20401f62:	fec42783          	lw	a5,-20(s0)
20401f66:	0097c703          	lbu	a4,9(a5)
20401f6a:	0ff00793          	li	a5,255
20401f6e:	00f70a63          	beq	a4,a5,20401f82 <_ZN13LiquidCrystal4sendEhh+0x50>
    digitalWrite(_rw_pin, LOW);
20401f72:	fec42783          	lw	a5,-20(s0)
20401f76:	0097c783          	lbu	a5,9(a5)
20401f7a:	4581                	li	a1,0
20401f7c:	853e                	mv	a0,a5
20401f7e:	3c5000ef          	jal	ra,20402b42 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
20401f82:	fec42783          	lw	a5,-20(s0)
20401f86:	0137c783          	lbu	a5,19(a5)
20401f8a:	8bc1                	andi	a5,a5,16
20401f8c:	cb89                	beqz	a5,20401f9e <_ZN13LiquidCrystal4sendEhh+0x6c>
    write8bits(value); 
20401f8e:	feb44783          	lbu	a5,-21(s0)
20401f92:	85be                	mv	a1,a5
20401f94:	fec42503          	lw	a0,-20(s0)
20401f98:	1a9000ef          	jal	ra,20402940 <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
20401f9c:	a015                	j	20401fc0 <_ZN13LiquidCrystal4sendEhh+0x8e>
    write4bits(value>>4);
20401f9e:	feb44783          	lbu	a5,-21(s0)
20401fa2:	8791                	srai	a5,a5,0x4
20401fa4:	0ff7f793          	andi	a5,a5,255
20401fa8:	85be                	mv	a1,a5
20401faa:	fec42503          	lw	a0,-20(s0)
20401fae:	12f000ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
20401fb2:	feb44783          	lbu	a5,-21(s0)
20401fb6:	85be                	mv	a1,a5
20401fb8:	fec42503          	lw	a0,-20(s0)
20401fbc:	121000ef          	jal	ra,204028dc <_ZN13LiquidCrystal10write4bitsEh>
}
20401fc0:	0001                	nop
20401fc2:	838a                	mv	t2,sp
20401fc4:	40f2                	lw	ra,28(sp)
20401fc6:	4462                	lw	s0,24(sp)
20401fc8:	6105                	addi	sp,sp,32
20401fca:	8082                	ret

20401fcc <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
20401fcc:	d6010113          	addi	sp,sp,-672
20401fd0:	28112e23          	sw	ra,668(sp)
20401fd4:	28812c23          	sw	s0,664(sp)
20401fd8:	29212a23          	sw	s2,660(sp)
20401fdc:	29312823          	sw	s3,656(sp)
20401fe0:	29412623          	sw	s4,652(sp)
20401fe4:	29512423          	sw	s5,648(sp)
20401fe8:	29612223          	sw	s6,644(sp)
20401fec:	29712023          	sw	s7,640(sp)
20401ff0:	27812e23          	sw	s8,636(sp)
20401ff4:	27912c23          	sw	s9,632(sp)
20401ff8:	27a12a23          	sw	s10,628(sp)
20401ffc:	27b12823          	sw	s11,624(sp)
20402000:	1500                	addi	s0,sp,672
20402002:	eea42623          	sw	a0,-276(s0)
  digitalWrite(_enable_pin, LOW);
20402006:	eec42783          	lw	a5,-276(s0)
2040200a:	00a7c783          	lbu	a5,10(a5)
2040200e:	4581                	li	a1,0
20402010:	853e                	mv	a0,a5
20402012:	331000ef          	jal	ra,20402b42 <digitalWrite>
20402016:	4785                	li	a5,1
20402018:	f4f42823          	sw	a5,-176(s0)
  if (usec == 0) {
2040201c:	f5042783          	lw	a5,-176(s0)
20402020:	28078963          	beqz	a5,204022b2 <_ZN13LiquidCrystal11pulseEnableEv+0x2e6>
  rdmcycle(&current);
20402024:	b80027f3          	csrr	a5,mcycleh
20402028:	b0002773          	csrr	a4,mcycle
2040202c:	b80026f3          	csrr	a3,mcycleh
20402030:	fed79ae3          	bne	a5,a3,20402024 <_ZN13LiquidCrystal11pulseEnableEv+0x58>
20402034:	f4f42623          	sw	a5,-180(s0)
20402038:	f4e42423          	sw	a4,-184(s0)
2040203c:	f4d42223          	sw	a3,-188(s0)
20402040:	f4842783          	lw	a5,-184(s0)
20402044:	8c3e                	mv	s8,a5
20402046:	4c81                	li	s9,0
20402048:	f4c42783          	lw	a5,-180(s0)
2040204c:	dcf42023          	sw	a5,-576(s0)
20402050:	dc042223          	sw	zero,-572(s0)
20402054:	dc042783          	lw	a5,-576(s0)
20402058:	00079993          	slli	s3,a5,0x0
2040205c:	4901                	li	s2,0
2040205e:	012c6d33          	or	s10,s8,s2
20402062:	013cedb3          	or	s11,s9,s3
20402066:	f1a42423          	sw	s10,-248(s0)
2040206a:	f1b42623          	sw	s11,-244(s0)
  later = current + usec * (F_CPU/1000000);
2040206e:	f5042783          	lw	a5,-176(s0)
20402072:	8b3e                	mv	s6,a5
20402074:	4b81                	li	s7,0
20402076:	01cb5793          	srli	a5,s6,0x1c
2040207a:	004b9a93          	slli	s5,s7,0x4
2040207e:	0157eab3          	or	s5,a5,s5
20402082:	004b1a13          	slli	s4,s6,0x4
20402086:	87d2                	mv	a5,s4
20402088:	8856                	mv	a6,s5
2040208a:	f0842683          	lw	a3,-248(s0)
2040208e:	f0c42703          	lw	a4,-244(s0)
20402092:	00d78533          	add	a0,a5,a3
20402096:	862a                	mv	a2,a0
20402098:	00f63633          	sltu	a2,a2,a5
2040209c:	00e805b3          	add	a1,a6,a4
204020a0:	00b607b3          	add	a5,a2,a1
204020a4:	85be                	mv	a1,a5
204020a6:	f2a42c23          	sw	a0,-200(s0)
204020aa:	f2b42e23          	sw	a1,-196(s0)
  if (later > current) // usual case
204020ae:	f0842603          	lw	a2,-248(s0)
204020b2:	f0c42683          	lw	a3,-244(s0)
204020b6:	f3c42703          	lw	a4,-196(s0)
204020ba:	87b6                	mv	a5,a3
204020bc:	00e7ed63          	bltu	a5,a4,204020d6 <_ZN13LiquidCrystal11pulseEnableEv+0x10a>
204020c0:	f3c42703          	lw	a4,-196(s0)
204020c4:	87b6                	mv	a5,a3
204020c6:	0af71763          	bne	a4,a5,20402174 <_ZN13LiquidCrystal11pulseEnableEv+0x1a8>
204020ca:	f3842703          	lw	a4,-200(s0)
204020ce:	87b2                	mv	a5,a2
204020d0:	00e7e363          	bltu	a5,a4,204020d6 <_ZN13LiquidCrystal11pulseEnableEv+0x10a>
204020d4:	a045                	j	20402174 <_ZN13LiquidCrystal11pulseEnableEv+0x1a8>
      while (later > current) {
204020d6:	f0842603          	lw	a2,-248(s0)
204020da:	f0c42683          	lw	a3,-244(s0)
204020de:	f3c42703          	lw	a4,-196(s0)
204020e2:	87b6                	mv	a5,a3
204020e4:	00e7ec63          	bltu	a5,a4,204020fc <_ZN13LiquidCrystal11pulseEnableEv+0x130>
204020e8:	f3c42703          	lw	a4,-196(s0)
204020ec:	87b6                	mv	a5,a3
204020ee:	1cf71363          	bne	a4,a5,204022b4 <_ZN13LiquidCrystal11pulseEnableEv+0x2e8>
204020f2:	f3842703          	lw	a4,-200(s0)
204020f6:	87b2                	mv	a5,a2
204020f8:	1ae7fe63          	bleu	a4,a5,204022b4 <_ZN13LiquidCrystal11pulseEnableEv+0x2e8>
	rdmcycle(&current);
204020fc:	b80027f3          	csrr	a5,mcycleh
20402100:	b0002773          	csrr	a4,mcycle
20402104:	b80026f3          	csrr	a3,mcycleh
20402108:	fed79ae3          	bne	a5,a3,204020fc <_ZN13LiquidCrystal11pulseEnableEv+0x130>
2040210c:	f2f42a23          	sw	a5,-204(s0)
20402110:	f2e42823          	sw	a4,-208(s0)
20402114:	f2d42623          	sw	a3,-212(s0)
20402118:	f3042783          	lw	a5,-208(s0)
2040211c:	daf42c23          	sw	a5,-584(s0)
20402120:	da042e23          	sw	zero,-580(s0)
20402124:	f3442783          	lw	a5,-204(s0)
20402128:	daf42823          	sw	a5,-592(s0)
2040212c:	da042a23          	sw	zero,-588(s0)
20402130:	db042783          	lw	a5,-592(s0)
20402134:	00079793          	slli	a5,a5,0x0
20402138:	daf42623          	sw	a5,-596(s0)
2040213c:	da042423          	sw	zero,-600(s0)
20402140:	db842683          	lw	a3,-584(s0)
20402144:	dbc42703          	lw	a4,-580(s0)
20402148:	8636                	mv	a2,a3
2040214a:	da842783          	lw	a5,-600(s0)
2040214e:	dac42803          	lw	a6,-596(s0)
20402152:	85be                	mv	a1,a5
20402154:	8e4d                	or	a2,a2,a1
20402156:	dac42023          	sw	a2,-608(s0)
2040215a:	87c2                	mv	a5,a6
2040215c:	8fd9                	or	a5,a5,a4
2040215e:	daf42223          	sw	a5,-604(s0)
20402162:	da042783          	lw	a5,-608(s0)
20402166:	da442803          	lw	a6,-604(s0)
2040216a:	f0f42423          	sw	a5,-248(s0)
2040216e:	f1042623          	sw	a6,-244(s0)
20402172:	b795                	j	204020d6 <_ZN13LiquidCrystal11pulseEnableEv+0x10a>
      while (later < current) {
20402174:	f0842603          	lw	a2,-248(s0)
20402178:	f0c42683          	lw	a3,-244(s0)
2040217c:	f3c42703          	lw	a4,-196(s0)
20402180:	87b6                	mv	a5,a3
20402182:	00f76d63          	bltu	a4,a5,2040219c <_ZN13LiquidCrystal11pulseEnableEv+0x1d0>
20402186:	f3c42703          	lw	a4,-196(s0)
2040218a:	87b6                	mv	a5,a3
2040218c:	08f71463          	bne	a4,a5,20402214 <_ZN13LiquidCrystal11pulseEnableEv+0x248>
20402190:	f3842703          	lw	a4,-200(s0)
20402194:	87b2                	mv	a5,a2
20402196:	00f76363          	bltu	a4,a5,2040219c <_ZN13LiquidCrystal11pulseEnableEv+0x1d0>
2040219a:	a8ad                	j	20402214 <_ZN13LiquidCrystal11pulseEnableEv+0x248>
	rdmcycle(&current);
2040219c:	b80027f3          	csrr	a5,mcycleh
204021a0:	b0002773          	csrr	a4,mcycle
204021a4:	b80026f3          	csrr	a3,mcycleh
204021a8:	fed79ae3          	bne	a5,a3,2040219c <_ZN13LiquidCrystal11pulseEnableEv+0x1d0>
204021ac:	f2f42423          	sw	a5,-216(s0)
204021b0:	f2e42223          	sw	a4,-220(s0)
204021b4:	f2d42023          	sw	a3,-224(s0)
204021b8:	f2442783          	lw	a5,-220(s0)
204021bc:	d8f42c23          	sw	a5,-616(s0)
204021c0:	d8042e23          	sw	zero,-612(s0)
204021c4:	f2842783          	lw	a5,-216(s0)
204021c8:	d8f42823          	sw	a5,-624(s0)
204021cc:	d8042a23          	sw	zero,-620(s0)
204021d0:	d9042783          	lw	a5,-624(s0)
204021d4:	00079793          	slli	a5,a5,0x0
204021d8:	d8f42623          	sw	a5,-628(s0)
204021dc:	d8042423          	sw	zero,-632(s0)
204021e0:	d9842683          	lw	a3,-616(s0)
204021e4:	d9c42703          	lw	a4,-612(s0)
204021e8:	8636                	mv	a2,a3
204021ea:	d8842783          	lw	a5,-632(s0)
204021ee:	d8c42803          	lw	a6,-628(s0)
204021f2:	85be                	mv	a1,a5
204021f4:	8e4d                	or	a2,a2,a1
204021f6:	d8c42023          	sw	a2,-640(s0)
204021fa:	87c2                	mv	a5,a6
204021fc:	8fd9                	or	a5,a5,a4
204021fe:	d8f42223          	sw	a5,-636(s0)
20402202:	d8042783          	lw	a5,-640(s0)
20402206:	d8442803          	lw	a6,-636(s0)
2040220a:	f0f42423          	sw	a5,-248(s0)
2040220e:	f1042623          	sw	a6,-244(s0)
20402212:	b78d                	j	20402174 <_ZN13LiquidCrystal11pulseEnableEv+0x1a8>
      while (current < later) {
20402214:	f0842603          	lw	a2,-248(s0)
20402218:	f0c42683          	lw	a3,-244(s0)
2040221c:	f3c42703          	lw	a4,-196(s0)
20402220:	87b6                	mv	a5,a3
20402222:	00e7ec63          	bltu	a5,a4,2040223a <_ZN13LiquidCrystal11pulseEnableEv+0x26e>
20402226:	f3c42703          	lw	a4,-196(s0)
2040222a:	87b6                	mv	a5,a3
2040222c:	08f71463          	bne	a4,a5,204022b4 <_ZN13LiquidCrystal11pulseEnableEv+0x2e8>
20402230:	f3842703          	lw	a4,-200(s0)
20402234:	87b2                	mv	a5,a2
20402236:	06e7ff63          	bleu	a4,a5,204022b4 <_ZN13LiquidCrystal11pulseEnableEv+0x2e8>
	rdmcycle(&current);
2040223a:	b80027f3          	csrr	a5,mcycleh
2040223e:	b0002773          	csrr	a4,mcycle
20402242:	b80026f3          	csrr	a3,mcycleh
20402246:	fed79ae3          	bne	a5,a3,2040223a <_ZN13LiquidCrystal11pulseEnableEv+0x26e>
2040224a:	f0f42e23          	sw	a5,-228(s0)
2040224e:	f0e42c23          	sw	a4,-232(s0)
20402252:	f0d42a23          	sw	a3,-236(s0)
20402256:	f1842783          	lw	a5,-232(s0)
2040225a:	d6f42c23          	sw	a5,-648(s0)
2040225e:	d6042e23          	sw	zero,-644(s0)
20402262:	f1c42783          	lw	a5,-228(s0)
20402266:	d6f42823          	sw	a5,-656(s0)
2040226a:	d6042a23          	sw	zero,-652(s0)
2040226e:	d7042783          	lw	a5,-656(s0)
20402272:	00079793          	slli	a5,a5,0x0
20402276:	d6f42623          	sw	a5,-660(s0)
2040227a:	d6042423          	sw	zero,-664(s0)
2040227e:	d7842683          	lw	a3,-648(s0)
20402282:	d7c42703          	lw	a4,-644(s0)
20402286:	8636                	mv	a2,a3
20402288:	d6842783          	lw	a5,-664(s0)
2040228c:	d6c42803          	lw	a6,-660(s0)
20402290:	85be                	mv	a1,a5
20402292:	8e4d                	or	a2,a2,a1
20402294:	d6c42023          	sw	a2,-672(s0)
20402298:	87c2                	mv	a5,a6
2040229a:	8fd9                	or	a5,a5,a4
2040229c:	d6f42223          	sw	a5,-668(s0)
204022a0:	d6042783          	lw	a5,-672(s0)
204022a4:	d6442803          	lw	a6,-668(s0)
204022a8:	f0f42423          	sw	a5,-248(s0)
204022ac:	f1042623          	sw	a6,-244(s0)
204022b0:	b795                	j	20402214 <_ZN13LiquidCrystal11pulseEnableEv+0x248>
    return;
204022b2:	0001                	nop
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
204022b4:	eec42783          	lw	a5,-276(s0)
204022b8:	00a7c783          	lbu	a5,10(a5)
204022bc:	4585                	li	a1,1
204022be:	853e                	mv	a0,a5
204022c0:	083000ef          	jal	ra,20402b42 <digitalWrite>
204022c4:	4785                	li	a5,1
204022c6:	f8f42823          	sw	a5,-112(s0)
  if (usec == 0) {
204022ca:	f9042783          	lw	a5,-112(s0)
204022ce:	2c078e63          	beqz	a5,204025aa <_ZN13LiquidCrystal11pulseEnableEv+0x5de>
  rdmcycle(&current);
204022d2:	b80027f3          	csrr	a5,mcycleh
204022d6:	b0002773          	csrr	a4,mcycle
204022da:	b80026f3          	csrr	a3,mcycleh
204022de:	fed79ae3          	bne	a5,a3,204022d2 <_ZN13LiquidCrystal11pulseEnableEv+0x306>
204022e2:	f8f42623          	sw	a5,-116(s0)
204022e6:	f8e42423          	sw	a4,-120(s0)
204022ea:	f8d42223          	sw	a3,-124(s0)
204022ee:	f8842783          	lw	a5,-120(s0)
204022f2:	e4f42423          	sw	a5,-440(s0)
204022f6:	e4042623          	sw	zero,-436(s0)
204022fa:	f8c42783          	lw	a5,-116(s0)
204022fe:	e4f42023          	sw	a5,-448(s0)
20402302:	e4042223          	sw	zero,-444(s0)
20402306:	e4042783          	lw	a5,-448(s0)
2040230a:	00079793          	slli	a5,a5,0x0
2040230e:	e2f42e23          	sw	a5,-452(s0)
20402312:	e2042c23          	sw	zero,-456(s0)
20402316:	e4842683          	lw	a3,-440(s0)
2040231a:	e4c42703          	lw	a4,-436(s0)
2040231e:	8636                	mv	a2,a3
20402320:	e3842783          	lw	a5,-456(s0)
20402324:	e3c42803          	lw	a6,-452(s0)
20402328:	85be                	mv	a1,a5
2040232a:	8e4d                	or	a2,a2,a1
2040232c:	e2c42823          	sw	a2,-464(s0)
20402330:	87c2                	mv	a5,a6
20402332:	8fd9                	or	a5,a5,a4
20402334:	e2f42a23          	sw	a5,-460(s0)
20402338:	e3042783          	lw	a5,-464(s0)
2040233c:	e3442803          	lw	a6,-460(s0)
20402340:	f0f42023          	sw	a5,-256(s0)
20402344:	f1042223          	sw	a6,-252(s0)
  later = current + usec * (F_CPU/1000000);
20402348:	f9042783          	lw	a5,-112(s0)
2040234c:	e2f42423          	sw	a5,-472(s0)
20402350:	e2042623          	sw	zero,-468(s0)
20402354:	e2842683          	lw	a3,-472(s0)
20402358:	e2c42703          	lw	a4,-468(s0)
2040235c:	87b6                	mv	a5,a3
2040235e:	83f1                	srli	a5,a5,0x1c
20402360:	863a                	mv	a2,a4
20402362:	0612                	slli	a2,a2,0x4
20402364:	ecc42e23          	sw	a2,-292(s0)
20402368:	edc42603          	lw	a2,-292(s0)
2040236c:	8fd1                	or	a5,a5,a2
2040236e:	ecf42e23          	sw	a5,-292(s0)
20402372:	87b6                	mv	a5,a3
20402374:	0792                	slli	a5,a5,0x4
20402376:	ecf42c23          	sw	a5,-296(s0)
2040237a:	ed842783          	lw	a5,-296(s0)
2040237e:	edc42803          	lw	a6,-292(s0)
20402382:	f0042683          	lw	a3,-256(s0)
20402386:	f0442703          	lw	a4,-252(s0)
2040238a:	00d78533          	add	a0,a5,a3
2040238e:	862a                	mv	a2,a0
20402390:	00f63633          	sltu	a2,a2,a5
20402394:	00e805b3          	add	a1,a6,a4
20402398:	00b607b3          	add	a5,a2,a1
2040239c:	85be                	mv	a1,a5
2040239e:	f6a42c23          	sw	a0,-136(s0)
204023a2:	f6b42e23          	sw	a1,-132(s0)
  if (later > current) // usual case
204023a6:	f0042603          	lw	a2,-256(s0)
204023aa:	f0442683          	lw	a3,-252(s0)
204023ae:	f7c42703          	lw	a4,-132(s0)
204023b2:	87b6                	mv	a5,a3
204023b4:	00e7ed63          	bltu	a5,a4,204023ce <_ZN13LiquidCrystal11pulseEnableEv+0x402>
204023b8:	f7c42703          	lw	a4,-132(s0)
204023bc:	87b6                	mv	a5,a3
204023be:	0af71763          	bne	a4,a5,2040246c <_ZN13LiquidCrystal11pulseEnableEv+0x4a0>
204023c2:	f7842703          	lw	a4,-136(s0)
204023c6:	87b2                	mv	a5,a2
204023c8:	00e7e363          	bltu	a5,a4,204023ce <_ZN13LiquidCrystal11pulseEnableEv+0x402>
204023cc:	a045                	j	2040246c <_ZN13LiquidCrystal11pulseEnableEv+0x4a0>
      while (later > current) {
204023ce:	f0042603          	lw	a2,-256(s0)
204023d2:	f0442683          	lw	a3,-252(s0)
204023d6:	f7c42703          	lw	a4,-132(s0)
204023da:	87b6                	mv	a5,a3
204023dc:	00e7ec63          	bltu	a5,a4,204023f4 <_ZN13LiquidCrystal11pulseEnableEv+0x428>
204023e0:	f7c42703          	lw	a4,-132(s0)
204023e4:	87b6                	mv	a5,a3
204023e6:	1cf71363          	bne	a4,a5,204025ac <_ZN13LiquidCrystal11pulseEnableEv+0x5e0>
204023ea:	f7842703          	lw	a4,-136(s0)
204023ee:	87b2                	mv	a5,a2
204023f0:	1ae7fe63          	bleu	a4,a5,204025ac <_ZN13LiquidCrystal11pulseEnableEv+0x5e0>
	rdmcycle(&current);
204023f4:	b80027f3          	csrr	a5,mcycleh
204023f8:	b0002773          	csrr	a4,mcycle
204023fc:	b80026f3          	csrr	a3,mcycleh
20402400:	fed79ae3          	bne	a5,a3,204023f4 <_ZN13LiquidCrystal11pulseEnableEv+0x428>
20402404:	f6f42a23          	sw	a5,-140(s0)
20402408:	f6e42823          	sw	a4,-144(s0)
2040240c:	f6d42623          	sw	a3,-148(s0)
20402410:	f7042783          	lw	a5,-144(s0)
20402414:	e2f42023          	sw	a5,-480(s0)
20402418:	e2042223          	sw	zero,-476(s0)
2040241c:	f7442783          	lw	a5,-140(s0)
20402420:	e0f42c23          	sw	a5,-488(s0)
20402424:	e0042e23          	sw	zero,-484(s0)
20402428:	e1842783          	lw	a5,-488(s0)
2040242c:	00079793          	slli	a5,a5,0x0
20402430:	e0f42a23          	sw	a5,-492(s0)
20402434:	e0042823          	sw	zero,-496(s0)
20402438:	e2042683          	lw	a3,-480(s0)
2040243c:	e2442703          	lw	a4,-476(s0)
20402440:	8636                	mv	a2,a3
20402442:	e1042783          	lw	a5,-496(s0)
20402446:	e1442803          	lw	a6,-492(s0)
2040244a:	85be                	mv	a1,a5
2040244c:	8e4d                	or	a2,a2,a1
2040244e:	e0c42423          	sw	a2,-504(s0)
20402452:	87c2                	mv	a5,a6
20402454:	8fd9                	or	a5,a5,a4
20402456:	e0f42623          	sw	a5,-500(s0)
2040245a:	e0842783          	lw	a5,-504(s0)
2040245e:	e0c42803          	lw	a6,-500(s0)
20402462:	f0f42023          	sw	a5,-256(s0)
20402466:	f1042223          	sw	a6,-252(s0)
2040246a:	b795                	j	204023ce <_ZN13LiquidCrystal11pulseEnableEv+0x402>
      while (later < current) {
2040246c:	f0042603          	lw	a2,-256(s0)
20402470:	f0442683          	lw	a3,-252(s0)
20402474:	f7c42703          	lw	a4,-132(s0)
20402478:	87b6                	mv	a5,a3
2040247a:	00f76d63          	bltu	a4,a5,20402494 <_ZN13LiquidCrystal11pulseEnableEv+0x4c8>
2040247e:	f7c42703          	lw	a4,-132(s0)
20402482:	87b6                	mv	a5,a3
20402484:	08f71463          	bne	a4,a5,2040250c <_ZN13LiquidCrystal11pulseEnableEv+0x540>
20402488:	f7842703          	lw	a4,-136(s0)
2040248c:	87b2                	mv	a5,a2
2040248e:	00f76363          	bltu	a4,a5,20402494 <_ZN13LiquidCrystal11pulseEnableEv+0x4c8>
20402492:	a8ad                	j	2040250c <_ZN13LiquidCrystal11pulseEnableEv+0x540>
	rdmcycle(&current);
20402494:	b80027f3          	csrr	a5,mcycleh
20402498:	b0002773          	csrr	a4,mcycle
2040249c:	b80026f3          	csrr	a3,mcycleh
204024a0:	fed79ae3          	bne	a5,a3,20402494 <_ZN13LiquidCrystal11pulseEnableEv+0x4c8>
204024a4:	f6f42423          	sw	a5,-152(s0)
204024a8:	f6e42223          	sw	a4,-156(s0)
204024ac:	f6d42023          	sw	a3,-160(s0)
204024b0:	f6442783          	lw	a5,-156(s0)
204024b4:	e0f42023          	sw	a5,-512(s0)
204024b8:	e0042223          	sw	zero,-508(s0)
204024bc:	f6842783          	lw	a5,-152(s0)
204024c0:	def42c23          	sw	a5,-520(s0)
204024c4:	de042e23          	sw	zero,-516(s0)
204024c8:	df842783          	lw	a5,-520(s0)
204024cc:	00079793          	slli	a5,a5,0x0
204024d0:	def42a23          	sw	a5,-524(s0)
204024d4:	de042823          	sw	zero,-528(s0)
204024d8:	e0042683          	lw	a3,-512(s0)
204024dc:	e0442703          	lw	a4,-508(s0)
204024e0:	8636                	mv	a2,a3
204024e2:	df042783          	lw	a5,-528(s0)
204024e6:	df442803          	lw	a6,-524(s0)
204024ea:	85be                	mv	a1,a5
204024ec:	8e4d                	or	a2,a2,a1
204024ee:	dec42423          	sw	a2,-536(s0)
204024f2:	87c2                	mv	a5,a6
204024f4:	8fd9                	or	a5,a5,a4
204024f6:	def42623          	sw	a5,-532(s0)
204024fa:	de842783          	lw	a5,-536(s0)
204024fe:	dec42803          	lw	a6,-532(s0)
20402502:	f0f42023          	sw	a5,-256(s0)
20402506:	f1042223          	sw	a6,-252(s0)
2040250a:	b78d                	j	2040246c <_ZN13LiquidCrystal11pulseEnableEv+0x4a0>
      while (current < later) {
2040250c:	f0042603          	lw	a2,-256(s0)
20402510:	f0442683          	lw	a3,-252(s0)
20402514:	f7c42703          	lw	a4,-132(s0)
20402518:	87b6                	mv	a5,a3
2040251a:	00e7ec63          	bltu	a5,a4,20402532 <_ZN13LiquidCrystal11pulseEnableEv+0x566>
2040251e:	f7c42703          	lw	a4,-132(s0)
20402522:	87b6                	mv	a5,a3
20402524:	08f71463          	bne	a4,a5,204025ac <_ZN13LiquidCrystal11pulseEnableEv+0x5e0>
20402528:	f7842703          	lw	a4,-136(s0)
2040252c:	87b2                	mv	a5,a2
2040252e:	06e7ff63          	bleu	a4,a5,204025ac <_ZN13LiquidCrystal11pulseEnableEv+0x5e0>
	rdmcycle(&current);
20402532:	b80027f3          	csrr	a5,mcycleh
20402536:	b0002773          	csrr	a4,mcycle
2040253a:	b80026f3          	csrr	a3,mcycleh
2040253e:	fed79ae3          	bne	a5,a3,20402532 <_ZN13LiquidCrystal11pulseEnableEv+0x566>
20402542:	f4f42e23          	sw	a5,-164(s0)
20402546:	f4e42c23          	sw	a4,-168(s0)
2040254a:	f4d42a23          	sw	a3,-172(s0)
2040254e:	f5842783          	lw	a5,-168(s0)
20402552:	def42023          	sw	a5,-544(s0)
20402556:	de042223          	sw	zero,-540(s0)
2040255a:	f5c42783          	lw	a5,-164(s0)
2040255e:	dcf42c23          	sw	a5,-552(s0)
20402562:	dc042e23          	sw	zero,-548(s0)
20402566:	dd842783          	lw	a5,-552(s0)
2040256a:	00079793          	slli	a5,a5,0x0
2040256e:	dcf42a23          	sw	a5,-556(s0)
20402572:	dc042823          	sw	zero,-560(s0)
20402576:	de042683          	lw	a3,-544(s0)
2040257a:	de442703          	lw	a4,-540(s0)
2040257e:	8636                	mv	a2,a3
20402580:	dd042783          	lw	a5,-560(s0)
20402584:	dd442803          	lw	a6,-556(s0)
20402588:	85be                	mv	a1,a5
2040258a:	8e4d                	or	a2,a2,a1
2040258c:	dcc42423          	sw	a2,-568(s0)
20402590:	87c2                	mv	a5,a6
20402592:	8fd9                	or	a5,a5,a4
20402594:	dcf42623          	sw	a5,-564(s0)
20402598:	dc842783          	lw	a5,-568(s0)
2040259c:	dcc42803          	lw	a6,-564(s0)
204025a0:	f0f42023          	sw	a5,-256(s0)
204025a4:	f1042223          	sw	a6,-252(s0)
204025a8:	b795                	j	2040250c <_ZN13LiquidCrystal11pulseEnableEv+0x540>
    return;
204025aa:	0001                	nop
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
204025ac:	eec42783          	lw	a5,-276(s0)
204025b0:	00a7c783          	lbu	a5,10(a5)
204025b4:	4581                	li	a1,0
204025b6:	853e                	mv	a0,a5
204025b8:	2369                	jal	20402b42 <digitalWrite>
204025ba:	06400793          	li	a5,100
204025be:	fcf42623          	sw	a5,-52(s0)
  if (usec == 0) {
204025c2:	fcc42783          	lw	a5,-52(s0)
204025c6:	e399                	bnez	a5,204025cc <_ZN13LiquidCrystal11pulseEnableEv+0x600>
    return;
204025c8:	0001                	nop
  delayMicroseconds(100);   // commands need > 37us to settle
}
204025ca:	ace1                	j	204028a2 <_ZN13LiquidCrystal11pulseEnableEv+0x8d6>
  rdmcycle(&current);
204025cc:	b80027f3          	csrr	a5,mcycleh
204025d0:	b0002773          	csrr	a4,mcycle
204025d4:	b80026f3          	csrr	a3,mcycleh
204025d8:	fed79ae3          	bne	a5,a3,204025cc <_ZN13LiquidCrystal11pulseEnableEv+0x600>
204025dc:	fcf42423          	sw	a5,-56(s0)
204025e0:	fce42223          	sw	a4,-60(s0)
204025e4:	fcd42023          	sw	a3,-64(s0)
204025e8:	fc442783          	lw	a5,-60(s0)
204025ec:	ecf42823          	sw	a5,-304(s0)
204025f0:	ec042a23          	sw	zero,-300(s0)
204025f4:	fc842783          	lw	a5,-56(s0)
204025f8:	ecf42423          	sw	a5,-312(s0)
204025fc:	ec042623          	sw	zero,-308(s0)
20402600:	ec842783          	lw	a5,-312(s0)
20402604:	00079793          	slli	a5,a5,0x0
20402608:	ecf42223          	sw	a5,-316(s0)
2040260c:	ec042023          	sw	zero,-320(s0)
20402610:	ed042683          	lw	a3,-304(s0)
20402614:	ed442703          	lw	a4,-300(s0)
20402618:	8636                	mv	a2,a3
2040261a:	ec042783          	lw	a5,-320(s0)
2040261e:	ec442803          	lw	a6,-316(s0)
20402622:	85be                	mv	a1,a5
20402624:	8e4d                	or	a2,a2,a1
20402626:	eac42c23          	sw	a2,-328(s0)
2040262a:	87c2                	mv	a5,a6
2040262c:	8fd9                	or	a5,a5,a4
2040262e:	eaf42e23          	sw	a5,-324(s0)
20402632:	eb842783          	lw	a5,-328(s0)
20402636:	ebc42803          	lw	a6,-324(s0)
2040263a:	eef42c23          	sw	a5,-264(s0)
2040263e:	ef042e23          	sw	a6,-260(s0)
  later = current + usec * (F_CPU/1000000);
20402642:	fcc42783          	lw	a5,-52(s0)
20402646:	eaf42823          	sw	a5,-336(s0)
2040264a:	ea042a23          	sw	zero,-332(s0)
2040264e:	eb042683          	lw	a3,-336(s0)
20402652:	eb442703          	lw	a4,-332(s0)
20402656:	87b6                	mv	a5,a3
20402658:	83f1                	srli	a5,a5,0x1c
2040265a:	863a                	mv	a2,a4
2040265c:	0612                	slli	a2,a2,0x4
2040265e:	eec42223          	sw	a2,-284(s0)
20402662:	ee442603          	lw	a2,-284(s0)
20402666:	8fd1                	or	a5,a5,a2
20402668:	eef42223          	sw	a5,-284(s0)
2040266c:	87b6                	mv	a5,a3
2040266e:	0792                	slli	a5,a5,0x4
20402670:	eef42023          	sw	a5,-288(s0)
20402674:	ee042783          	lw	a5,-288(s0)
20402678:	ee442803          	lw	a6,-284(s0)
2040267c:	ef842583          	lw	a1,-264(s0)
20402680:	efc42603          	lw	a2,-260(s0)
20402684:	00b786b3          	add	a3,a5,a1
20402688:	8536                	mv	a0,a3
2040268a:	00f53533          	sltu	a0,a0,a5
2040268e:	00c80733          	add	a4,a6,a2
20402692:	00e507b3          	add	a5,a0,a4
20402696:	873e                	mv	a4,a5
20402698:	fad42c23          	sw	a3,-72(s0)
2040269c:	fae42e23          	sw	a4,-68(s0)
  if (later > current) // usual case
204026a0:	ef842683          	lw	a3,-264(s0)
204026a4:	efc42703          	lw	a4,-260(s0)
204026a8:	fbc42603          	lw	a2,-68(s0)
204026ac:	87ba                	mv	a5,a4
204026ae:	00c7ed63          	bltu	a5,a2,204026c8 <_ZN13LiquidCrystal11pulseEnableEv+0x6fc>
204026b2:	fbc42603          	lw	a2,-68(s0)
204026b6:	87ba                	mv	a5,a4
204026b8:	0af61763          	bne	a2,a5,20402766 <_ZN13LiquidCrystal11pulseEnableEv+0x79a>
204026bc:	fb842783          	lw	a5,-72(s0)
204026c0:	8736                	mv	a4,a3
204026c2:	00f76363          	bltu	a4,a5,204026c8 <_ZN13LiquidCrystal11pulseEnableEv+0x6fc>
204026c6:	a045                	j	20402766 <_ZN13LiquidCrystal11pulseEnableEv+0x79a>
      while (later > current) {
204026c8:	ef842783          	lw	a5,-264(s0)
204026cc:	efc42803          	lw	a6,-260(s0)
204026d0:	fbc42703          	lw	a4,-68(s0)
204026d4:	86c2                	mv	a3,a6
204026d6:	00e6ec63          	bltu	a3,a4,204026ee <_ZN13LiquidCrystal11pulseEnableEv+0x722>
204026da:	fbc42703          	lw	a4,-68(s0)
204026de:	86c2                	mv	a3,a6
204026e0:	1cd71163          	bne	a4,a3,204028a2 <_ZN13LiquidCrystal11pulseEnableEv+0x8d6>
204026e4:	fb842703          	lw	a4,-72(s0)
204026e8:	00e7e363          	bltu	a5,a4,204026ee <_ZN13LiquidCrystal11pulseEnableEv+0x722>
204026ec:	aa5d                	j	204028a2 <_ZN13LiquidCrystal11pulseEnableEv+0x8d6>
	rdmcycle(&current);
204026ee:	b80026f3          	csrr	a3,mcycleh
204026f2:	b0002773          	csrr	a4,mcycle
204026f6:	b80027f3          	csrr	a5,mcycleh
204026fa:	fef69ae3          	bne	a3,a5,204026ee <_ZN13LiquidCrystal11pulseEnableEv+0x722>
204026fe:	fad42a23          	sw	a3,-76(s0)
20402702:	fae42823          	sw	a4,-80(s0)
20402706:	faf42623          	sw	a5,-84(s0)
2040270a:	fb042783          	lw	a5,-80(s0)
2040270e:	eaf42423          	sw	a5,-344(s0)
20402712:	ea042623          	sw	zero,-340(s0)
20402716:	fb442783          	lw	a5,-76(s0)
2040271a:	eaf42023          	sw	a5,-352(s0)
2040271e:	ea042223          	sw	zero,-348(s0)
20402722:	ea042783          	lw	a5,-352(s0)
20402726:	00079793          	slli	a5,a5,0x0
2040272a:	e8f42e23          	sw	a5,-356(s0)
2040272e:	e8042c23          	sw	zero,-360(s0)
20402732:	ea842683          	lw	a3,-344(s0)
20402736:	eac42703          	lw	a4,-340(s0)
2040273a:	8636                	mv	a2,a3
2040273c:	e9842783          	lw	a5,-360(s0)
20402740:	e9c42803          	lw	a6,-356(s0)
20402744:	85be                	mv	a1,a5
20402746:	8e4d                	or	a2,a2,a1
20402748:	e8c42823          	sw	a2,-368(s0)
2040274c:	87c2                	mv	a5,a6
2040274e:	8fd9                	or	a5,a5,a4
20402750:	e8f42a23          	sw	a5,-364(s0)
20402754:	e9042783          	lw	a5,-368(s0)
20402758:	e9442803          	lw	a6,-364(s0)
2040275c:	eef42c23          	sw	a5,-264(s0)
20402760:	ef042e23          	sw	a6,-260(s0)
20402764:	b795                	j	204026c8 <_ZN13LiquidCrystal11pulseEnableEv+0x6fc>
      while (later < current) {
20402766:	ef842783          	lw	a5,-264(s0)
2040276a:	efc42803          	lw	a6,-260(s0)
2040276e:	fbc42703          	lw	a4,-68(s0)
20402772:	86c2                	mv	a3,a6
20402774:	00d76c63          	bltu	a4,a3,2040278c <_ZN13LiquidCrystal11pulseEnableEv+0x7c0>
20402778:	fbc42703          	lw	a4,-68(s0)
2040277c:	86c2                	mv	a3,a6
2040277e:	08d71363          	bne	a4,a3,20402804 <_ZN13LiquidCrystal11pulseEnableEv+0x838>
20402782:	fb842703          	lw	a4,-72(s0)
20402786:	00f76363          	bltu	a4,a5,2040278c <_ZN13LiquidCrystal11pulseEnableEv+0x7c0>
2040278a:	a8ad                	j	20402804 <_ZN13LiquidCrystal11pulseEnableEv+0x838>
	rdmcycle(&current);
2040278c:	b80026f3          	csrr	a3,mcycleh
20402790:	b0002773          	csrr	a4,mcycle
20402794:	b80027f3          	csrr	a5,mcycleh
20402798:	fef69ae3          	bne	a3,a5,2040278c <_ZN13LiquidCrystal11pulseEnableEv+0x7c0>
2040279c:	fad42423          	sw	a3,-88(s0)
204027a0:	fae42223          	sw	a4,-92(s0)
204027a4:	faf42023          	sw	a5,-96(s0)
204027a8:	fa442783          	lw	a5,-92(s0)
204027ac:	e8f42423          	sw	a5,-376(s0)
204027b0:	e8042623          	sw	zero,-372(s0)
204027b4:	fa842783          	lw	a5,-88(s0)
204027b8:	e8f42023          	sw	a5,-384(s0)
204027bc:	e8042223          	sw	zero,-380(s0)
204027c0:	e8042783          	lw	a5,-384(s0)
204027c4:	00079793          	slli	a5,a5,0x0
204027c8:	e6f42e23          	sw	a5,-388(s0)
204027cc:	e6042c23          	sw	zero,-392(s0)
204027d0:	e8842683          	lw	a3,-376(s0)
204027d4:	e8c42703          	lw	a4,-372(s0)
204027d8:	8636                	mv	a2,a3
204027da:	e7842783          	lw	a5,-392(s0)
204027de:	e7c42803          	lw	a6,-388(s0)
204027e2:	85be                	mv	a1,a5
204027e4:	8e4d                	or	a2,a2,a1
204027e6:	e6c42823          	sw	a2,-400(s0)
204027ea:	87c2                	mv	a5,a6
204027ec:	8fd9                	or	a5,a5,a4
204027ee:	e6f42a23          	sw	a5,-396(s0)
204027f2:	e7042783          	lw	a5,-400(s0)
204027f6:	e7442803          	lw	a6,-396(s0)
204027fa:	eef42c23          	sw	a5,-264(s0)
204027fe:	ef042e23          	sw	a6,-260(s0)
20402802:	b795                	j	20402766 <_ZN13LiquidCrystal11pulseEnableEv+0x79a>
      while (current < later) {
20402804:	ef842783          	lw	a5,-264(s0)
20402808:	efc42803          	lw	a6,-260(s0)
2040280c:	fbc42703          	lw	a4,-68(s0)
20402810:	86c2                	mv	a3,a6
20402812:	00e6ec63          	bltu	a3,a4,2040282a <_ZN13LiquidCrystal11pulseEnableEv+0x85e>
20402816:	fbc42703          	lw	a4,-68(s0)
2040281a:	86c2                	mv	a3,a6
2040281c:	08d71363          	bne	a4,a3,204028a2 <_ZN13LiquidCrystal11pulseEnableEv+0x8d6>
20402820:	fb842703          	lw	a4,-72(s0)
20402824:	00e7e363          	bltu	a5,a4,2040282a <_ZN13LiquidCrystal11pulseEnableEv+0x85e>
20402828:	a8ad                	j	204028a2 <_ZN13LiquidCrystal11pulseEnableEv+0x8d6>
	rdmcycle(&current);
2040282a:	b80026f3          	csrr	a3,mcycleh
2040282e:	b0002773          	csrr	a4,mcycle
20402832:	b80027f3          	csrr	a5,mcycleh
20402836:	fef69ae3          	bne	a3,a5,2040282a <_ZN13LiquidCrystal11pulseEnableEv+0x85e>
2040283a:	f8d42e23          	sw	a3,-100(s0)
2040283e:	f8e42c23          	sw	a4,-104(s0)
20402842:	f8f42a23          	sw	a5,-108(s0)
20402846:	f9842783          	lw	a5,-104(s0)
2040284a:	e6f42423          	sw	a5,-408(s0)
2040284e:	e6042623          	sw	zero,-404(s0)
20402852:	f9c42783          	lw	a5,-100(s0)
20402856:	e6f42023          	sw	a5,-416(s0)
2040285a:	e6042223          	sw	zero,-412(s0)
2040285e:	e6042783          	lw	a5,-416(s0)
20402862:	00079793          	slli	a5,a5,0x0
20402866:	e4f42e23          	sw	a5,-420(s0)
2040286a:	e4042c23          	sw	zero,-424(s0)
2040286e:	e6842683          	lw	a3,-408(s0)
20402872:	e6c42703          	lw	a4,-404(s0)
20402876:	8636                	mv	a2,a3
20402878:	e5842783          	lw	a5,-424(s0)
2040287c:	e5c42803          	lw	a6,-420(s0)
20402880:	85be                	mv	a1,a5
20402882:	8e4d                	or	a2,a2,a1
20402884:	e4c42823          	sw	a2,-432(s0)
20402888:	87c2                	mv	a5,a6
2040288a:	8fd9                	or	a5,a5,a4
2040288c:	e4f42a23          	sw	a5,-428(s0)
20402890:	e5042783          	lw	a5,-432(s0)
20402894:	e5442803          	lw	a6,-428(s0)
20402898:	eef42c23          	sw	a5,-264(s0)
2040289c:	ef042e23          	sw	a6,-260(s0)
204028a0:	b795                	j	20402804 <_ZN13LiquidCrystal11pulseEnableEv+0x838>
204028a2:	0001                	nop
204028a4:	838a                	mv	t2,sp
204028a6:	29c12083          	lw	ra,668(sp)
204028aa:	29812403          	lw	s0,664(sp)
204028ae:	29412903          	lw	s2,660(sp)
204028b2:	29012983          	lw	s3,656(sp)
204028b6:	28c12a03          	lw	s4,652(sp)
204028ba:	28812a83          	lw	s5,648(sp)
204028be:	28412b03          	lw	s6,644(sp)
204028c2:	28012b83          	lw	s7,640(sp)
204028c6:	27c12c03          	lw	s8,636(sp)
204028ca:	27812c83          	lw	s9,632(sp)
204028ce:	27412d03          	lw	s10,628(sp)
204028d2:	27012d83          	lw	s11,624(sp)
204028d6:	2a010113          	addi	sp,sp,672
204028da:	8082                	ret

204028dc <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
204028dc:	7179                	addi	sp,sp,-48
204028de:	d606                	sw	ra,44(sp)
204028e0:	d422                	sw	s0,40(sp)
204028e2:	1800                	addi	s0,sp,48
204028e4:	fca42e23          	sw	a0,-36(s0)
204028e8:	87ae                	mv	a5,a1
204028ea:	fcf40da3          	sb	a5,-37(s0)
  for (int i = 0; i < 4; i++) {
204028ee:	fe042623          	sw	zero,-20(s0)
204028f2:	fec42703          	lw	a4,-20(s0)
204028f6:	478d                	li	a5,3
204028f8:	02e7ca63          	blt	a5,a4,2040292c <_ZN13LiquidCrystal10write4bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
204028fc:	fdc42703          	lw	a4,-36(s0)
20402900:	fec42783          	lw	a5,-20(s0)
20402904:	97ba                	add	a5,a5,a4
20402906:	00b7c783          	lbu	a5,11(a5)
2040290a:	86be                	mv	a3,a5
2040290c:	fdb44703          	lbu	a4,-37(s0)
20402910:	fec42783          	lw	a5,-20(s0)
20402914:	40f757b3          	sra	a5,a4,a5
20402918:	8b85                	andi	a5,a5,1
2040291a:	85be                	mv	a1,a5
2040291c:	8536                	mv	a0,a3
2040291e:	2415                	jal	20402b42 <digitalWrite>
  for (int i = 0; i < 4; i++) {
20402920:	fec42783          	lw	a5,-20(s0)
20402924:	0785                	addi	a5,a5,1
20402926:	fef42623          	sw	a5,-20(s0)
2040292a:	b7e1                	j	204028f2 <_ZN13LiquidCrystal10write4bitsEh+0x16>
  }

  pulseEnable();
2040292c:	fdc42503          	lw	a0,-36(s0)
20402930:	e9cff0ef          	jal	ra,20401fcc <_ZN13LiquidCrystal11pulseEnableEv>
}
20402934:	0001                	nop
20402936:	838a                	mv	t2,sp
20402938:	50b2                	lw	ra,44(sp)
2040293a:	5422                	lw	s0,40(sp)
2040293c:	6145                	addi	sp,sp,48
2040293e:	8082                	ret

20402940 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
20402940:	7179                	addi	sp,sp,-48
20402942:	d606                	sw	ra,44(sp)
20402944:	d422                	sw	s0,40(sp)
20402946:	1800                	addi	s0,sp,48
20402948:	fca42e23          	sw	a0,-36(s0)
2040294c:	87ae                	mv	a5,a1
2040294e:	fcf40da3          	sb	a5,-37(s0)
  for (int i = 0; i < 8; i++) {
20402952:	fe042623          	sw	zero,-20(s0)
20402956:	fec42703          	lw	a4,-20(s0)
2040295a:	479d                	li	a5,7
2040295c:	02e7ca63          	blt	a5,a4,20402990 <_ZN13LiquidCrystal10write8bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
20402960:	fdc42703          	lw	a4,-36(s0)
20402964:	fec42783          	lw	a5,-20(s0)
20402968:	97ba                	add	a5,a5,a4
2040296a:	00b7c783          	lbu	a5,11(a5)
2040296e:	86be                	mv	a3,a5
20402970:	fdb44703          	lbu	a4,-37(s0)
20402974:	fec42783          	lw	a5,-20(s0)
20402978:	40f757b3          	sra	a5,a4,a5
2040297c:	8b85                	andi	a5,a5,1
2040297e:	85be                	mv	a1,a5
20402980:	8536                	mv	a0,a3
20402982:	22c1                	jal	20402b42 <digitalWrite>
  for (int i = 0; i < 8; i++) {
20402984:	fec42783          	lw	a5,-20(s0)
20402988:	0785                	addi	a5,a5,1
2040298a:	fef42623          	sw	a5,-20(s0)
2040298e:	b7e1                	j	20402956 <_ZN13LiquidCrystal10write8bitsEh+0x16>
  }
  
  pulseEnable();
20402990:	fdc42503          	lw	a0,-36(s0)
20402994:	e38ff0ef          	jal	ra,20401fcc <_ZN13LiquidCrystal11pulseEnableEv>
}
20402998:	0001                	nop
2040299a:	838a                	mv	t2,sp
2040299c:	50b2                	lw	ra,44(sp)
2040299e:	5422                	lw	s0,40(sp)
204029a0:	6145                	addi	sp,sp,48
204029a2:	8082                	ret

204029a4 <calc_inv>:
int_inverse f_cpu_1000_inv;
int_inverse f_cpu_1000000_inv;

void calc_inv(uint32_t n, int_inverse * res){
  uint32_t one = ~0;
  uint32_t d = one/n;
204029a4:	577d                	li	a4,-1
  uint32_t r = one%n + 1;
204029a6:	02a776b3          	remu	a3,a4,a0
  if (r >= n) ++d;
  if (d == 0) --d;
204029aa:	87ba                	mv	a5,a4
  uint32_t d = one/n;
204029ac:	02a752b3          	divu	t0,a4,a0
  uint32_t r = one%n + 1;
204029b0:	00168313          	addi	t1,a3,1
  if (r >= n) ++d;
204029b4:	00a333b3          	sltu	t2,t1,a0
204029b8:	0013c613          	xori	a2,t2,1
204029bc:	00c28833          	add	a6,t0,a2
  if (d == 0) --d;
204029c0:	00080a63          	beqz	a6,204029d4 <calc_inv+0x30>
  uint32_t shift = 0;
  while ((d & 0x80000000) == 0){
204029c4:	87c2                	mv	a5,a6
204029c6:	00084c63          	bltz	a6,204029de <calc_inv+0x3a>
204029ca:	4801                	li	a6,0
    d <<= 1;
204029cc:	0786                	slli	a5,a5,0x1
    ++shift;
204029ce:	0805                	addi	a6,a6,1
  while ((d & 0x80000000) == 0){
204029d0:	fe07dee3          	bgez	a5,204029cc <calc_inv+0x28>
  }
  res->n = n;
204029d4:	c188                	sw	a0,0(a1)
  res->mult = d;
204029d6:	c1dc                	sw	a5,4(a1)
  res->shift = shift;
204029d8:	0105a423          	sw	a6,8(a1)
204029dc:	8082                	ret
  while ((d & 0x80000000) == 0){
204029de:	4801                	li	a6,0
204029e0:	bfd5                	j	204029d4 <calc_inv+0x30>

204029e2 <divide64_using_inverse>:
// If divisor-1 has i bits, then the answer is exact for n of up to 64-i bits
// e.g. for divisors up to a million, n can have up to 45 bits
// On RV32IM with divide32_using_inverse inlines this uses 5 multiplies,
// 33 instructions, zero branches, 3 loads, 0 stores.
uint64_t divide64_using_inverse(uint64_t n, int_inverse *inv){
  uint32_t preshift = (31 - inv->shift) & 31;
204029e2:	00862883          	lw	a7,8(a2)
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
204029e6:	425c                	lw	a5,4(a2)
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
204029e8:	00159713          	slli	a4,a1,0x1
  uint32_t preshift = (31 - inv->shift) & 31;
204029ec:	fff8c813          	not	a6,a7
204029f0:	01f87293          	andi	t0,a6,31
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
204029f4:	fff2c593          	not	a1,t0
204029f8:	00b71333          	sll	t1,a4,a1
204029fc:	005556b3          	srl	a3,a0,t0
20402a00:	00d363b3          	or	t2,t1,a3
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
20402a04:	02f3be33          	mulhu	t3,t2,a5
  if (n - d*inv->n >= inv->n) ++d;
20402a08:	4210                	lw	a2,0(a2)
   d >>= inv->shift;
20402a0a:	011e5eb3          	srl	t4,t3,a7
  if (n - d*inv->n >= inv->n) ++d;
20402a0e:	02ce8f33          	mul	t5,t4,a2
20402a12:	41e38fb3          	sub	t6,t2,t5
20402a16:	00cfb733          	sltu	a4,t6,a2
20402a1a:	00174813          	xori	a6,a4,1
20402a1e:	010e8333          	add	t1,t4,a6
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a22:	005312b3          	sll	t0,t1,t0
  uint32_t r = n - d * inv->n;
20402a26:	025606b3          	mul	a3,a2,t0
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a2a:	00135393          	srli	t2,t1,0x1
20402a2e:	00b3d5b3          	srl	a1,t2,a1
  uint32_t r = n - d * inv->n;
20402a32:	8d15                	sub	a0,a0,a3
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
20402a34:	02f537b3          	mulhu	a5,a0,a5
   d >>= inv->shift;
20402a38:	0117d8b3          	srl	a7,a5,a7
  if (n - d*inv->n >= inv->n) ++d;
20402a3c:	02c88e33          	mul	t3,a7,a2
20402a40:	41c50eb3          	sub	t4,a0,t3
20402a44:	00ceb633          	sltu	a2,t4,a2
20402a48:	00164f13          	xori	t5,a2,1
20402a4c:	01e88fb3          	add	t6,a7,t5
  d += divide32_using_inverse(r, inv);
20402a50:	005f8533          	add	a0,t6,t0
20402a54:	01f53733          	sltu	a4,a0,t6
  return d;
}
20402a58:	95ba                	add	a1,a1,a4
20402a5a:	8082                	ret

20402a5c <millis>:


uint32_t
millis()
{
20402a5c:	1141                	addi	sp,sp,-16
20402a5e:	c606                	sw	ra,12(sp)
  uint64_t x;
  rdmcycle(&x);
20402a60:	b80025f3          	csrr	a1,mcycleh
20402a64:	b0002573          	csrr	a0,mcycle
20402a68:	b80027f3          	csrr	a5,mcycleh
20402a6c:	fef59ae3          	bne	a1,a5,20402a60 <millis+0x4>
  x = divide64_using_inverse(x, &f_cpu_1000_inv);
20402a70:	80000637          	lui	a2,0x80000
20402a74:	48860613          	addi	a2,a2,1160 # 80000488 <_sp+0xffffc488>
20402a78:	37ad                	jal	204029e2 <divide64_using_inverse>
  return((uint32_t) (x & 0xFFFFFFFF));
}
20402a7a:	40b2                	lw	ra,12(sp)
20402a7c:	0141                	addi	sp,sp,16
20402a7e:	8082                	ret

20402a80 <pinMode>:

void
pinMode(uint32_t pin, uint32_t mode)
{
  
  if (pin >= variant_pin_map_size)
20402a80:	800007b7          	lui	a5,0x80000
20402a84:	4307a283          	lw	t0,1072(a5) # 80000430 <_sp+0xffffc430>
20402a88:	08557963          	bleu	t0,a0,20402b1a <pinMode+0x9a>
    return;
  
  GPIO_REG(GPIO_OUTPUT_XOR)  &= ~digitalPinToBitMask(pin);
20402a8c:	20404337          	lui	t1,0x20404
20402a90:	050a                	slli	a0,a0,0x2
20402a92:	a6430393          	addi	t2,t1,-1436 # 20403a64 <variant_pin_map>
20402a96:	00a38633          	add	a2,t2,a0
20402a9a:	00164703          	lbu	a4,1(a2)
20402a9e:	10012837          	lui	a6,0x10012
20402aa2:	04082883          	lw	a7,64(a6) # 10012040 <__stack_size+0x10011840>
20402aa6:	4e05                	li	t3,1
20402aa8:	00ee1eb3          	sll	t4,t3,a4
20402aac:	fffec693          	not	a3,t4
20402ab0:	00d8ff33          	and	t5,a7,a3
20402ab4:	05e82023          	sw	t5,64(a6)
  GPIO_REG(GPIO_IOF_EN)      &= ~digitalPinToBitMask(pin);
20402ab8:	03882f83          	lw	t6,56(a6)
20402abc:	01f6f7b3          	and	a5,a3,t6
20402ac0:	02f82c23          	sw	a5,56(a6)
//pwm_enabled_pin[pin] = 0;
  
  switch (mode) {
20402ac4:	03c58963          	beq	a1,t3,20402af6 <pinMode+0x76>
20402ac8:	c9b1                	beqz	a1,20402b1c <pinMode+0x9c>
20402aca:	4289                	li	t0,2
20402acc:	04559763          	bne	a1,t0,20402b1a <pinMode+0x9a>
  case INPUT_PULLUP:
    GPIO_REG(GPIO_INPUT_EN)  |=  digitalPinToBitMask(pin);
20402ad0:	00482583          	lw	a1,4(a6)
20402ad4:	00bee533          	or	a0,t4,a1
20402ad8:	00a82223          	sw	a0,4(a6)
    GPIO_REG(GPIO_OUTPUT_EN) &= ~digitalPinToBitMask(pin);
20402adc:	00882303          	lw	t1,8(a6)
20402ae0:	0066f3b3          	and	t2,a3,t1
20402ae4:	00782423          	sw	t2,8(a6)
    GPIO_REG(GPIO_PULLUP_EN) |=  digitalPinToBitMask(pin);
20402ae8:	01082603          	lw	a2,16(a6)
20402aec:	00cee733          	or	a4,t4,a2
20402af0:	00e82823          	sw	a4,16(a6)
    break;
20402af4:	8082                	ret
    GPIO_REG(GPIO_INPUT_EN)  |=  digitalPinToBitMask(pin);
    GPIO_REG(GPIO_OUTPUT_EN) &= ~digitalPinToBitMask(pin);
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
    break;
  case OUTPUT:
    GPIO_REG(GPIO_INPUT_EN)  &= ~digitalPinToBitMask(pin);
20402af6:	00482783          	lw	a5,4(a6)
20402afa:	00f6f2b3          	and	t0,a3,a5
20402afe:	00582223          	sw	t0,4(a6)
    GPIO_REG(GPIO_OUTPUT_EN) |=  digitalPinToBitMask(pin);
20402b02:	00882583          	lw	a1,8(a6)
20402b06:	00bee533          	or	a0,t4,a1
20402b0a:	00a82423          	sw	a0,8(a6)
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
20402b0e:	01082303          	lw	t1,16(a6)
20402b12:	0066f3b3          	and	t2,a3,t1
20402b16:	00782823          	sw	t2,16(a6)
20402b1a:	8082                	ret
    GPIO_REG(GPIO_INPUT_EN)  |=  digitalPinToBitMask(pin);
20402b1c:	00482883          	lw	a7,4(a6)
20402b20:	011eee33          	or	t3,t4,a7
20402b24:	01c82223          	sw	t3,4(a6)
    GPIO_REG(GPIO_OUTPUT_EN) &= ~digitalPinToBitMask(pin);
20402b28:	00882e83          	lw	t4,8(a6)
20402b2c:	01d6ff33          	and	t5,a3,t4
20402b30:	01e82423          	sw	t5,8(a6)
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
20402b34:	01082f83          	lw	t6,16(a6)
20402b38:	01f6f6b3          	and	a3,a3,t6
20402b3c:	00d82823          	sw	a3,16(a6)
    break;
20402b40:	8082                	ret

20402b42 <digitalWrite>:


void
digitalWrite(uint32_t pin, uint32_t val)
{
  if (pin >= variant_pin_map_size)
20402b42:	800007b7          	lui	a5,0x80000
20402b46:	4307a283          	lw	t0,1072(a5) # 80000430 <_sp+0xffffc430>
20402b4a:	02557863          	bleu	t0,a0,20402b7a <digitalWrite+0x38>
    return;
  
  if (val)
    GPIO_REG(GPIO_OUTPUT_VAL) |=  digitalPinToBitMask(pin);
20402b4e:	20404337          	lui	t1,0x20404
20402b52:	050a                	slli	a0,a0,0x2
20402b54:	a6430393          	addi	t2,t1,-1436 # 20403a64 <variant_pin_map>
20402b58:	00a38633          	add	a2,t2,a0
  if (val)
20402b5c:	e185                	bnez	a1,20402b7c <digitalWrite+0x3a>
  else
    GPIO_REG(GPIO_OUTPUT_VAL) &= ~digitalPinToBitMask(pin);
20402b5e:	00164583          	lbu	a1,1(a2)
20402b62:	10012737          	lui	a4,0x10012
20402b66:	4754                	lw	a3,12(a4)
20402b68:	4805                	li	a6,1
20402b6a:	00b818b3          	sll	a7,a6,a1
20402b6e:	fff8ce13          	not	t3,a7
20402b72:	00de7eb3          	and	t4,t3,a3
20402b76:	01d72623          	sw	t4,12(a4) # 1001200c <__stack_size+0x1001180c>
20402b7a:	8082                	ret
    GPIO_REG(GPIO_OUTPUT_VAL) |=  digitalPinToBitMask(pin);
20402b7c:	10012f37          	lui	t5,0x10012
20402b80:	00164f83          	lbu	t6,1(a2)
20402b84:	00cf2283          	lw	t0,12(t5) # 1001200c <__stack_size+0x1001180c>
20402b88:	4785                	li	a5,1
20402b8a:	01f79533          	sll	a0,a5,t6
20402b8e:	00556333          	or	t1,a0,t0
20402b92:	006f2623          	sw	t1,12(t5)
20402b96:	8082                	ret

20402b98 <digitalRead>:
}

int
digitalRead(uint32_t pin)
{
if (pin >= variant_pin_map_size)
20402b98:	800007b7          	lui	a5,0x80000
20402b9c:	4307a283          	lw	t0,1072(a5) # 80000430 <_sp+0xffffc430>
20402ba0:	02557663          	bleu	t0,a0,20402bcc <digitalRead+0x34>
  return 0;

 return ((GPIO_REG(GPIO_INPUT_VAL) & digitalPinToBitMask(pin)) != 0);
20402ba4:	20404337          	lui	t1,0x20404
20402ba8:	050a                	slli	a0,a0,0x2
20402baa:	a6430393          	addi	t2,t1,-1436 # 20403a64 <variant_pin_map>
20402bae:	00a385b3          	add	a1,t2,a0
20402bb2:	0015c703          	lbu	a4,1(a1)
20402bb6:	10012637          	lui	a2,0x10012
20402bba:	4214                	lw	a3,0(a2)
20402bbc:	4805                	li	a6,1
20402bbe:	00e818b3          	sll	a7,a6,a4
20402bc2:	00d8fe33          	and	t3,a7,a3
20402bc6:	01c03533          	snez	a0,t3
20402bca:	8082                	ret
20402bcc:	4501                	li	a0,0
}
20402bce:	8082                	ret

20402bd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
20402bd0:	1101                	addi	sp,sp,-32
20402bd2:	ce06                	sw	ra,28(sp)
20402bd4:	cc22                	sw	s0,24(sp)
20402bd6:	ca26                	sw	s1,20(sp)
20402bd8:	c84a                	sw	s2,16(sp)
20402bda:	c64e                	sw	s3,12(sp)
  size_t n = 0;
  while (size--) {
20402bdc:	ca15                	beqz	a2,20402c10 <_ZN5Print5writeEPKhj+0x40>
20402bde:	892a                	mv	s2,a0
20402be0:	842e                	mv	s0,a1
20402be2:	00c589b3          	add	s3,a1,a2
20402be6:	4481                	li	s1,0
    n += write(*buffer++);
20402be8:	00092783          	lw	a5,0(s2)
20402bec:	0405                	addi	s0,s0,1
20402bee:	fff44583          	lbu	a1,-1(s0)
20402bf2:	0007a303          	lw	t1,0(a5)
20402bf6:	854a                	mv	a0,s2
20402bf8:	9302                	jalr	t1
20402bfa:	94aa                	add	s1,s1,a0
  while (size--) {
20402bfc:	fe8996e3          	bne	s3,s0,20402be8 <_ZN5Print5writeEPKhj+0x18>
  }
  return n;
}
20402c00:	40f2                	lw	ra,28(sp)
20402c02:	8526                	mv	a0,s1
20402c04:	4462                	lw	s0,24(sp)
20402c06:	44d2                	lw	s1,20(sp)
20402c08:	4942                	lw	s2,16(sp)
20402c0a:	49b2                	lw	s3,12(sp)
20402c0c:	6105                	addi	sp,sp,32
20402c0e:	8082                	ret
  size_t n = 0;
20402c10:	4481                	li	s1,0
  return n;
20402c12:	b7fd                	j	20402c00 <_ZN5Print5writeEPKhj+0x30>

20402c14 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
20402c14:	c59d                	beqz	a1,20402c42 <_ZN5Print5printEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
20402c16:	411c                	lw	a5,0(a0)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
20402c18:	1141                	addi	sp,sp,-16
20402c1a:	c04a                	sw	s2,0(sp)
20402c1c:	0047a903          	lw	s2,4(a5)
20402c20:	c226                	sw	s1,4(sp)
20402c22:	84aa                	mv	s1,a0
20402c24:	852e                	mv	a0,a1
20402c26:	c606                	sw	ra,12(sp)
20402c28:	c422                	sw	s0,8(sp)
20402c2a:	842e                	mv	s0,a1
20402c2c:	2575                	jal	204032d8 <strlen>
20402c2e:	862a                	mv	a2,a0
20402c30:	85a2                	mv	a1,s0
20402c32:	8526                	mv	a0,s1
20402c34:	834a                	mv	t1,s2
  return write(str);
}
20402c36:	40b2                	lw	ra,12(sp)
20402c38:	4422                	lw	s0,8(sp)
20402c3a:	4492                	lw	s1,4(sp)
20402c3c:	4902                	lw	s2,0(sp)
20402c3e:	0141                	addi	sp,sp,16
20402c40:	8302                	jr	t1
20402c42:	4501                	li	a0,0
20402c44:	8082                	ret

20402c46 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
20402c46:	1141                	addi	sp,sp,-16
20402c48:	c422                	sw	s0,8(sp)
20402c4a:	c04a                	sw	s2,0(sp)
20402c4c:	c606                	sw	ra,12(sp)
20402c4e:	c226                	sw	s1,4(sp)
20402c50:	842a                	mv	s0,a0
      if (str == NULL) return 0;
20402c52:	4901                	li	s2,0
20402c54:	cd81                	beqz	a1,20402c6c <_ZN5Print7printlnEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
20402c56:	411c                	lw	a5,0(a0)
20402c58:	852e                	mv	a0,a1
20402c5a:	84ae                	mv	s1,a1
20402c5c:	0047a903          	lw	s2,4(a5)
20402c60:	2da5                	jal	204032d8 <strlen>
20402c62:	862a                	mv	a2,a0
20402c64:	85a6                	mv	a1,s1
20402c66:	8522                	mv	a0,s0
20402c68:	9902                	jalr	s2
20402c6a:	892a                	mv	s2,a0
  return write(c);
20402c6c:	00042083          	lw	ra,0(s0)
20402c70:	45b5                	li	a1,13
20402c72:	8522                	mv	a0,s0
20402c74:	0000a303          	lw	t1,0(ra)
20402c78:	9302                	jalr	t1
20402c7a:	00042283          	lw	t0,0(s0)
20402c7e:	84aa                	mv	s1,a0
20402c80:	45a9                	li	a1,10
20402c82:	0002a383          	lw	t2,0(t0)
20402c86:	8522                	mv	a0,s0
20402c88:	9382                	jalr	t2
  size_t n = print(c);
  n += println();
  return n;
}
20402c8a:	40b2                	lw	ra,12(sp)
  n += println();
20402c8c:	012485b3          	add	a1,s1,s2
}
20402c90:	952e                	add	a0,a0,a1
20402c92:	4422                	lw	s0,8(sp)
20402c94:	4492                	lw	s1,4(sp)
20402c96:	4902                	lw	s2,0(sp)
20402c98:	0141                	addi	sp,sp,16
20402c9a:	8082                	ret

20402c9c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
20402c9c:	7139                	addi	sp,sp,-64
20402c9e:	da26                	sw	s1,52(sp)
20402ca0:	de06                	sw	ra,60(sp)
20402ca2:	dc22                	sw	s0,56(sp)
20402ca4:	d84a                	sw	s2,48(sp)
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
20402ca6:	02010623          	sb	zero,44(sp)

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
20402caa:	4705                	li	a4,1
size_t Print::printNumber(unsigned long n, uint8_t base) {
20402cac:	84aa                	mv	s1,a0
20402cae:	88ae                	mv	a7,a1
20402cb0:	8532                	mv	a0,a2
  if (base < 2) base = 10;
20402cb2:	04c75f63          	ble	a2,a4,20402d10 <_ZN5Print11printNumberEmh+0x74>
20402cb6:	1060                	addi	s0,sp,44

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
20402cb8:	4825                	li	a6,9
20402cba:	a039                	j	20402cc8 <_ZN5Print11printNumberEmh+0x2c>
20402cbc:	0ff2f393          	andi	t2,t0,255
20402cc0:	00740023          	sb	t2,0(s0)
20402cc4:	88b6                	mv	a7,a3
  } while(n);
20402cc6:	c695                	beqz	a3,20402cf2 <_ZN5Print11printNumberEmh+0x56>
    n /= base;
20402cc8:	02a8d6b3          	divu	a3,a7,a0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
20402ccc:	147d                	addi	s0,s0,-1
    char c = m - base * n;
20402cce:	02d605b3          	mul	a1,a2,a3
20402cd2:	40b887b3          	sub	a5,a7,a1
20402cd6:	0ff7f093          	andi	ra,a5,255
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
20402cda:	03008293          	addi	t0,ra,48
20402cde:	03708313          	addi	t1,ra,55
20402ce2:	fc187de3          	bleu	ra,a6,20402cbc <_ZN5Print11printNumberEmh+0x20>
20402ce6:	0ff37393          	andi	t2,t1,255
20402cea:	00740023          	sb	t2,0(s0)
20402cee:	88b6                	mv	a7,a3
  } while(n);
20402cf0:	fee1                	bnez	a3,20402cc8 <_ZN5Print11printNumberEmh+0x2c>
20402cf2:	4090                	lw	a2,0(s1)
20402cf4:	8522                	mv	a0,s0
20402cf6:	00462903          	lw	s2,4(a2) # 10012004 <__stack_size+0x10011804>
20402cfa:	2bf9                	jal	204032d8 <strlen>
20402cfc:	862a                	mv	a2,a0
20402cfe:	85a2                	mv	a1,s0
20402d00:	8526                	mv	a0,s1
20402d02:	9902                	jalr	s2

  return write(str);
}
20402d04:	50f2                	lw	ra,60(sp)
20402d06:	5462                	lw	s0,56(sp)
20402d08:	54d2                	lw	s1,52(sp)
20402d0a:	5942                	lw	s2,48(sp)
20402d0c:	6121                	addi	sp,sp,64
20402d0e:	8082                	ret
20402d10:	4529                	li	a0,10
  if (base < 2) base = 10;
20402d12:	862a                	mv	a2,a0
20402d14:	b74d                	j	20402cb6 <_ZN5Print11printNumberEmh+0x1a>

20402d16 <_ZN5Print5printEli>:
{
20402d16:	1101                	addi	sp,sp,-32
20402d18:	ca26                	sw	s1,20(sp)
20402d1a:	c84a                	sw	s2,16(sp)
20402d1c:	ce06                	sw	ra,28(sp)
20402d1e:	cc22                	sw	s0,24(sp)
20402d20:	c64e                	sw	s3,12(sp)
20402d22:	892a                	mv	s2,a0
20402d24:	84ae                	mv	s1,a1
  if (base == 0) {
20402d26:	c621                	beqz	a2,20402d6e <_ZN5Print5printEli+0x58>
  } else if (base == 10) {
20402d28:	4829                	li	a6,10
20402d2a:	8432                	mv	s0,a2
20402d2c:	01060b63          	beq	a2,a6,20402d42 <_ZN5Print5printEli+0x2c>
    return printNumber(n, base);
20402d30:	0ff67613          	andi	a2,a2,255
}
20402d34:	40f2                	lw	ra,28(sp)
20402d36:	4462                	lw	s0,24(sp)
20402d38:	44d2                	lw	s1,20(sp)
20402d3a:	4942                	lw	s2,16(sp)
20402d3c:	49b2                	lw	s3,12(sp)
20402d3e:	6105                	addi	sp,sp,32
    return printNumber(n, base);
20402d40:	bfb1                	j	20402c9c <_ZN5Print11printNumberEmh>
    if (n < 0) {
20402d42:	fe05d9e3          	bgez	a1,20402d34 <_ZN5Print5printEli+0x1e>
  return write(c);
20402d46:	411c                	lw	a5,0(a0)
20402d48:	02d00593          	li	a1,45
20402d4c:	0007a303          	lw	t1,0(a5)
20402d50:	9302                	jalr	t1
20402d52:	89aa                	mv	s3,a0
      n = -n;
20402d54:	409005b3          	neg	a1,s1
      return printNumber(n, 10) + t;
20402d58:	8622                	mv	a2,s0
20402d5a:	854a                	mv	a0,s2
20402d5c:	3781                	jal	20402c9c <_ZN5Print11printNumberEmh>
}
20402d5e:	40f2                	lw	ra,28(sp)
      return printNumber(n, 10) + t;
20402d60:	954e                	add	a0,a0,s3
}
20402d62:	4462                	lw	s0,24(sp)
20402d64:	44d2                	lw	s1,20(sp)
20402d66:	4942                	lw	s2,16(sp)
20402d68:	49b2                	lw	s3,12(sp)
20402d6a:	6105                	addi	sp,sp,32
20402d6c:	8082                	ret
    return write(n);
20402d6e:	00052083          	lw	ra,0(a0)
}
20402d72:	4462                	lw	s0,24(sp)
20402d74:	44d2                	lw	s1,20(sp)
    return write(n);
20402d76:	0000a383          	lw	t2,0(ra)
}
20402d7a:	4942                	lw	s2,16(sp)
20402d7c:	40f2                	lw	ra,28(sp)
20402d7e:	49b2                	lw	s3,12(sp)
    return write(n);
20402d80:	0ff5f593          	andi	a1,a1,255
}
20402d84:	6105                	addi	sp,sp,32
    return write(n);
20402d86:	8382                	jr	t2

20402d88 <_ZN5Print5printEii>:
  return print((long) n, base);
20402d88:	b779                	j	20402d16 <_ZN5Print5printEli>

20402d8a <_ZN5Print5printEmi>:
  if (base == 0) return write(n);
20402d8a:	c601                	beqz	a2,20402d92 <_ZN5Print5printEmi+0x8>
  else return printNumber(n, base);
20402d8c:	0ff67613          	andi	a2,a2,255
20402d90:	b731                	j	20402c9c <_ZN5Print11printNumberEmh>
  if (base == 0) return write(n);
20402d92:	00052283          	lw	t0,0(a0)
20402d96:	0ff5f593          	andi	a1,a1,255
20402d9a:	0002a303          	lw	t1,0(t0)
20402d9e:	8302                	jr	t1

20402da0 <_ZN9UARTClasscvbEv>:
    int read(void);
    void flush(void);
    size_t write(const uint8_t c);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    operator bool() {return (true);}; // UART always active
20402da0:	4505                	li	a0,1
20402da2:	8082                	ret

20402da4 <_ZN9UARTClass5beginEm>:
// Public Methods //////////////////////////////////////////////////////////////

void
UARTClass::begin(unsigned long bauds)
{
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402da4:	100127b7          	lui	a5,0x10012
20402da8:	43b4                	lw	a3,64(a5)
{
20402daa:	1141                	addi	sp,sp,-16
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402dac:	fffd0737          	lui	a4,0xfffd0
{
20402db0:	c606                	sw	ra,12(sp)
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402db2:	fff70093          	addi	ra,a4,-1 # fffcffff <_sp+0x7ffcbfff>
20402db6:	0016f2b3          	and	t0,a3,ra
20402dba:	0457a023          	sw	t0,64(a5) # 10012040 <__stack_size+0x10011840>
  GPIO_REG(GPIO_IOF_SEL)   &= ~(IOF0_UART0_MASK);
20402dbe:	03c7a303          	lw	t1,60(a5)
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402dc2:	00030837          	lui	a6,0x30

  //F_Baud = f_in/(div+1) 

  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402dc6:	00f42537          	lui	a0,0xf42
  GPIO_REG(GPIO_IOF_SEL)   &= ~(IOF0_UART0_MASK);
20402dca:	001373b3          	and	t2,t1,ra
20402dce:	0277ae23          	sw	t2,60(a5)
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402dd2:	0387a883          	lw	a7,56(a5)
  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402dd6:	862e                	mv	a2,a1
20402dd8:	4681                	li	a3,0
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402dda:	0108ee33          	or	t3,a7,a6
20402dde:	03c7ac23          	sw	t3,56(a5)
  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402de2:	40050513          	addi	a0,a0,1024 # f42400 <__stack_size+0xf41c00>
20402de6:	4581                	li	a1,0
20402de8:	2751                	jal	2040356c <__divdi3>
20402dea:	100135b7          	lui	a1,0x10013
20402dee:	fff50613          	addi	a2,a0,-1
20402df2:	cd90                	sw	a2,24(a1)
  UART_REG(UART_REG_TXCTRL) |= UART_TXEN;
20402df4:	0085ae83          	lw	t4,8(a1) # 10013008 <__stack_size+0x10012808>
  UART_REG(UART_REG_RXCTRL) |= UART_RXEN;

	
//  sio_setbaud(bauds);
}
20402df8:	40b2                	lw	ra,12(sp)
20402dfa:	0141                	addi	sp,sp,16
  UART_REG(UART_REG_TXCTRL) |= UART_TXEN;
20402dfc:	001eef13          	ori	t5,t4,1
20402e00:	01e5a423          	sw	t5,8(a1)
  UART_REG(UART_REG_RXCTRL) |= UART_RXEN;
20402e04:	00c5af83          	lw	t6,12(a1)
20402e08:	001fe793          	ori	a5,t6,1
20402e0c:	c5dc                	sw	a5,12(a1)
}
20402e0e:	8082                	ret

20402e10 <_ZN9UARTClass3endEv>:


void
UARTClass::end(void)
{
  GPIO_REG(GPIO_IOF_EN)    &= ~IOF0_UART0_MASK;
20402e10:	100126b7          	lui	a3,0x10012
20402e14:	5e9c                	lw	a5,56(a3)
20402e16:	fffd0737          	lui	a4,0xfffd0
20402e1a:	fff70293          	addi	t0,a4,-1 # fffcffff <_sp+0x7ffcbfff>
20402e1e:	0057f333          	and	t1,a5,t0
20402e22:	0266ac23          	sw	t1,56(a3) # 10012038 <__stack_size+0x10011838>

  UART_REG(UART_REG_TXCTRL) &= ~UART_TXEN;
20402e26:	100133b7          	lui	t2,0x10013
20402e2a:	0083a503          	lw	a0,8(t2) # 10013008 <__stack_size+0x10012808>
20402e2e:	ffe57593          	andi	a1,a0,-2
20402e32:	00b3a423          	sw	a1,8(t2)
  UART_REG(UART_REG_RXCTRL) &= ~UART_RXEN;
20402e36:	00c3a603          	lw	a2,12(t2)
20402e3a:	ffe67813          	andi	a6,a2,-2
20402e3e:	0103a623          	sw	a6,12(t2)
20402e42:	8082                	ret

20402e44 <_ZN9UARTClass9availableEv>:
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402e44:	100137b7          	lui	a5,0x10013
20402e48:	43d4                	lw	a3,4(a5)
20402e4a:	0206c663          	bltz	a3,20402e76 <_ZN9UARTClass9availableEv+0x32>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402e4e:	01454283          	lbu	t0,20(a0)
20402e52:	0ff2f313          	andi	t1,t0,255
20402e56:	00130713          	addi	a4,t1,1
20402e5a:	0ff77393          	andi	t2,a4,255
20402e5e:	00750a23          	sb	t2,20(a0)
20402e62:	006505b3          	add	a1,a0,t1
20402e66:	00d58b23          	sb	a3,22(a1)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402e6a:	01454603          	lbu	a2,20(a0)
20402e6e:	00767813          	andi	a6,a2,7
20402e72:	01050a23          	sb	a6,20(a0)
int
UARTClass::available(void)
{

  sio_probe_rx();
  return (!(sio_rxbuf_head == sio_rxbuf_tail));
20402e76:	01454883          	lbu	a7,20(a0)
20402e7a:	01554e03          	lbu	t3,21(a0)
20402e7e:	0ff8f513          	andi	a0,a7,255
20402e82:	0ffe7e93          	andi	t4,t3,255
20402e86:	41d50f33          	sub	t5,a0,t4
}
20402e8a:	01e03533          	snez	a0,t5
20402e8e:	8082                	ret

20402e90 <_ZN9UARTClass4peekEv>:
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402e90:	100137b7          	lui	a5,0x10013
20402e94:	43d0                	lw	a2,4(a5)
}


int
UARTClass::peek(void)
{
20402e96:	82aa                	mv	t0,a0
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402e98:	02064563          	bltz	a2,20402ec2 <_ZN9UARTClass4peekEv+0x32>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402e9c:	01454703          	lbu	a4,20(a0)
20402ea0:	0ff77313          	andi	t1,a4,255
20402ea4:	00130693          	addi	a3,t1,1
20402ea8:	0ff6f393          	andi	t2,a3,255
20402eac:	00750a23          	sb	t2,20(a0)
20402eb0:	951a                	add	a0,a0,t1
20402eb2:	00c50b23          	sb	a2,22(a0)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402eb6:	0142c583          	lbu	a1,20(t0)
20402eba:	0075f813          	andi	a6,a1,7
20402ebe:	01028a23          	sb	a6,20(t0)
  sio_probe_rx();
  if (sio_rxbuf_tail == sio_rxbuf_head)
20402ec2:	0152c883          	lbu	a7,21(t0)
20402ec6:	0142ce03          	lbu	t3,20(t0)
    return (-1);
20402eca:	557d                	li	a0,-1
  if (sio_rxbuf_tail == sio_rxbuf_head)
20402ecc:	0ff8fe93          	andi	t4,a7,255
20402ed0:	0ffe7f13          	andi	t5,t3,255
20402ed4:	01ee8a63          	beq	t4,t5,20402ee8 <_ZN9UARTClass4peekEv+0x58>
  else
    return (sio_rxbuf[sio_rxbuf_tail]);
20402ed8:	0152cf83          	lbu	t6,21(t0)
20402edc:	0ffff793          	andi	a5,t6,255
20402ee0:	00f28633          	add	a2,t0,a5
20402ee4:	01664503          	lbu	a0,22(a2)
}
20402ee8:	8082                	ret

20402eea <_ZN9UARTClass4readEv>:


int
UARTClass::read(void)
{
20402eea:	87aa                	mv	a5,a0
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402eec:	100135b7          	lui	a1,0x10013
20402ef0:	41d0                	lw	a2,4(a1)
20402ef2:	02064663          	bltz	a2,20402f1e <_ZN9UARTClass4readEv+0x34>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402ef6:	0147c703          	lbu	a4,20(a5) # 10013014 <__stack_size+0x10012814>
20402efa:	0ff77293          	andi	t0,a4,255
20402efe:	00128693          	addi	a3,t0,1
20402f02:	0ff6f313          	andi	t1,a3,255
20402f06:	00678a23          	sb	t1,20(a5)
20402f0a:	005783b3          	add	t2,a5,t0
20402f0e:	00c38b23          	sb	a2,22(t2)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402f12:	0147c503          	lbu	a0,20(a5)
20402f16:	00757813          	andi	a6,a0,7
20402f1a:	01078a23          	sb	a6,20(a5)
    busy = (sio_rxbuf_head == sio_rxbuf_tail);
20402f1e:	0147c883          	lbu	a7,20(a5)
20402f22:	0157ce03          	lbu	t3,21(a5)
20402f26:	0ff8fe93          	andi	t4,a7,255
20402f2a:	0ffe7f13          	andi	t5,t3,255
  } while (blocking && busy);
20402f2e:	fdee81e3          	beq	t4,t5,20402ef0 <_ZN9UARTClass4readEv+0x6>
  c = sio_rxbuf[sio_rxbuf_tail++];
20402f32:	0157cf83          	lbu	t6,21(a5)
20402f36:	0ffff593          	andi	a1,t6,255
20402f3a:	00158613          	addi	a2,a1,1 # 10013001 <__stack_size+0x10012801>
20402f3e:	0ff67713          	andi	a4,a2,255
20402f42:	00e78aa3          	sb	a4,21(a5)
  sio_rxbuf_tail &= SIO_RXBUFMASK;
20402f46:	0157c283          	lbu	t0,21(a5)
  c = sio_rxbuf[sio_rxbuf_tail++];
20402f4a:	00b786b3          	add	a3,a5,a1
20402f4e:	0166c503          	lbu	a0,22(a3)
  sio_rxbuf_tail &= SIO_RXBUFMASK;
20402f52:	0072f313          	andi	t1,t0,7
20402f56:	00678aa3          	sb	t1,21(a5)

  return (sio_getchar(1));
}
20402f5a:	8082                	ret

20402f5c <_ZN9UARTClass5flushEv>:


void
UARTClass::flush(void)
{
20402f5c:	8082                	ret

20402f5e <_ZN9UARTClass5writeEh>:
  uint32_t busy = (*val) & 0x80000000;
20402f5e:	10013737          	lui	a4,0x10013
20402f62:	431c                	lw	a5,0(a4)
    while (*val & 0x80000000);
20402f64:	431c                	lw	a5,0(a4)
20402f66:	fe07cfe3          	bltz	a5,20402f64 <_ZN9UARTClass5writeEh+0x6>
  UART_REG(UART_REG_TXFIFO) = c;
20402f6a:	c30c                	sw	a1,0(a4)
UARTClass::write(const uint8_t uc_data)
{

  sio_putchar(uc_data, 1);
  return (1);
}
20402f6c:	4505                	li	a0,1
20402f6e:	8082                	ret

20402f70 <_Z10randomSeedm>:
}
#include "WMath.h"

extern void randomSeed( uint32_t dwSeed )
{
  if ( dwSeed != 0 )
20402f70:	e111                	bnez	a0,20402f74 <_Z10randomSeedm+0x4>
20402f72:	8082                	ret
  {
    srand( dwSeed ) ;
20402f74:	a451                	j	204031f8 <srand>

20402f76 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
20402f76:	a001                	j	20402f76 <__cxa_pure_virtual>

20402f78 <_Z36freedom_e300_specific_initializationv>:
  write_csr(mtvec, &trap_entry);
20402f78:	204037b7          	lui	a5,0x20403
20402f7c:	fa078293          	addi	t0,a5,-96 # 20402fa0 <trap_entry>
20402f80:	30529073          	csrw	mtvec,t0
  if (read_csr(misa) & (1 << ('F' - 'A'))) { // if F extension is present
20402f84:	30102373          	csrr	t1,misa
20402f88:	02037393          	andi	t2,t1,32
20402f8c:	00038763          	beqz	t2,20402f9a <_Z36freedom_e300_specific_initializationv+0x22>
    write_csr(mstatus, MSTATUS_FS); // allow FPU instructions without trapping
20402f90:	6519                	lui	a0,0x6
20402f92:	30051073          	csrw	mstatus,a0
    write_csr(fcsr, 0); // initialize rounding mode, undefined at reset
20402f96:	00305073          	csrwi	fcsr,0
    PRCI_use_hfxosc(1);
20402f9a:	4505                	li	a0,1
20402f9c:	a065                	j	20403044 <PRCI_use_hfxosc>
	...

20402fa0 <trap_entry>:

  .section      .text.entry	
  .align 2
  .global trap_entry
trap_entry:
  addi sp, sp, -32*REGBYTES
20402fa0:	7119                	addi	sp,sp,-128

  STORE x1, 1*REGBYTES(sp)
20402fa2:	c206                	sw	ra,4(sp)
  STORE x2, 2*REGBYTES(sp)
20402fa4:	c40a                	sw	sp,8(sp)
  STORE x3, 3*REGBYTES(sp)
20402fa6:	c60e                	sw	gp,12(sp)
  STORE x4, 4*REGBYTES(sp)
20402fa8:	c812                	sw	tp,16(sp)
  STORE x5, 5*REGBYTES(sp)
20402faa:	ca16                	sw	t0,20(sp)
  STORE x6, 6*REGBYTES(sp)
20402fac:	cc1a                	sw	t1,24(sp)
  STORE x7, 7*REGBYTES(sp)
20402fae:	ce1e                	sw	t2,28(sp)
  STORE x8, 8*REGBYTES(sp)
20402fb0:	d022                	sw	s0,32(sp)
  STORE x9, 9*REGBYTES(sp)
20402fb2:	d226                	sw	s1,36(sp)
  STORE x10, 10*REGBYTES(sp)
20402fb4:	d42a                	sw	a0,40(sp)
  STORE x11, 11*REGBYTES(sp)
20402fb6:	d62e                	sw	a1,44(sp)
  STORE x12, 12*REGBYTES(sp)
20402fb8:	d832                	sw	a2,48(sp)
  STORE x13, 13*REGBYTES(sp)
20402fba:	da36                	sw	a3,52(sp)
  STORE x14, 14*REGBYTES(sp)
20402fbc:	dc3a                	sw	a4,56(sp)
  STORE x15, 15*REGBYTES(sp)
20402fbe:	de3e                	sw	a5,60(sp)
  STORE x16, 16*REGBYTES(sp)
20402fc0:	c0c2                	sw	a6,64(sp)
  STORE x17, 17*REGBYTES(sp)
20402fc2:	c2c6                	sw	a7,68(sp)
  STORE x18, 18*REGBYTES(sp)
20402fc4:	c4ca                	sw	s2,72(sp)
  STORE x19, 19*REGBYTES(sp)
20402fc6:	c6ce                	sw	s3,76(sp)
  STORE x20, 20*REGBYTES(sp)
20402fc8:	c8d2                	sw	s4,80(sp)
  STORE x21, 21*REGBYTES(sp)
20402fca:	cad6                	sw	s5,84(sp)
  STORE x22, 22*REGBYTES(sp)
20402fcc:	ccda                	sw	s6,88(sp)
  STORE x23, 23*REGBYTES(sp)
20402fce:	cede                	sw	s7,92(sp)
  STORE x24, 24*REGBYTES(sp)
20402fd0:	d0e2                	sw	s8,96(sp)
  STORE x25, 25*REGBYTES(sp)
20402fd2:	d2e6                	sw	s9,100(sp)
  STORE x26, 26*REGBYTES(sp)
20402fd4:	d4ea                	sw	s10,104(sp)
  STORE x27, 27*REGBYTES(sp)
20402fd6:	d6ee                	sw	s11,108(sp)
  STORE x28, 28*REGBYTES(sp)
20402fd8:	d8f2                	sw	t3,112(sp)
  STORE x29, 29*REGBYTES(sp)
20402fda:	daf6                	sw	t4,116(sp)
  STORE x30, 30*REGBYTES(sp)
20402fdc:	dcfa                	sw	t5,120(sp)
  STORE x31, 31*REGBYTES(sp)
20402fde:	defe                	sw	t6,124(sp)

  csrr a0, mcause
20402fe0:	34202573          	csrr	a0,mcause
  csrr a1, mepc
20402fe4:	341025f3          	csrr	a1,mepc
  mv a2, sp
20402fe8:	860a                	mv	a2,sp
  call handle_trap
20402fea:	2899                	jal	20403040 <handle_trap>
20402fec:	34151073          	csrw	mepc,a0
20402ff0:	000022b7          	lui	t0,0x2
  csrw mepc, a0
20402ff4:	80028293          	addi	t0,t0,-2048 # 1800 <__stack_size+0x1000>

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
20402ff8:	3002a073          	csrs	mstatus,t0
20402ffc:	4092                	lw	ra,4(sp)
  csrs mstatus, t0
20402ffe:	4122                	lw	sp,8(sp)
20403000:	41b2                	lw	gp,12(sp)

  LOAD x1, 1*REGBYTES(sp)
20403002:	4242                	lw	tp,16(sp)
  LOAD x2, 2*REGBYTES(sp)
20403004:	42d2                	lw	t0,20(sp)
  LOAD x3, 3*REGBYTES(sp)
20403006:	4362                	lw	t1,24(sp)
  LOAD x4, 4*REGBYTES(sp)
20403008:	43f2                	lw	t2,28(sp)
  LOAD x5, 5*REGBYTES(sp)
2040300a:	5402                	lw	s0,32(sp)
  LOAD x6, 6*REGBYTES(sp)
2040300c:	5492                	lw	s1,36(sp)
  LOAD x7, 7*REGBYTES(sp)
2040300e:	5522                	lw	a0,40(sp)
  LOAD x8, 8*REGBYTES(sp)
20403010:	55b2                	lw	a1,44(sp)
  LOAD x9, 9*REGBYTES(sp)
20403012:	5642                	lw	a2,48(sp)
  LOAD x10, 10*REGBYTES(sp)
20403014:	56d2                	lw	a3,52(sp)
  LOAD x11, 11*REGBYTES(sp)
20403016:	5762                	lw	a4,56(sp)
  LOAD x12, 12*REGBYTES(sp)
20403018:	57f2                	lw	a5,60(sp)
  LOAD x13, 13*REGBYTES(sp)
2040301a:	4806                	lw	a6,64(sp)
  LOAD x14, 14*REGBYTES(sp)
2040301c:	4896                	lw	a7,68(sp)
  LOAD x15, 15*REGBYTES(sp)
2040301e:	4926                	lw	s2,72(sp)
  LOAD x16, 16*REGBYTES(sp)
20403020:	49b6                	lw	s3,76(sp)
  LOAD x17, 17*REGBYTES(sp)
20403022:	4a46                	lw	s4,80(sp)
  LOAD x18, 18*REGBYTES(sp)
20403024:	4ad6                	lw	s5,84(sp)
  LOAD x19, 19*REGBYTES(sp)
20403026:	4b66                	lw	s6,88(sp)
  LOAD x20, 20*REGBYTES(sp)
20403028:	4bf6                	lw	s7,92(sp)
  LOAD x21, 21*REGBYTES(sp)
2040302a:	5c06                	lw	s8,96(sp)
  LOAD x22, 22*REGBYTES(sp)
2040302c:	5c96                	lw	s9,100(sp)
  LOAD x23, 23*REGBYTES(sp)
2040302e:	5d26                	lw	s10,104(sp)
  LOAD x24, 24*REGBYTES(sp)
20403030:	5db6                	lw	s11,108(sp)
  LOAD x25, 25*REGBYTES(sp)
20403032:	5e46                	lw	t3,112(sp)
  LOAD x26, 26*REGBYTES(sp)
20403034:	5ed6                	lw	t4,116(sp)
  LOAD x27, 27*REGBYTES(sp)
20403036:	5f66                	lw	t5,120(sp)
  LOAD x28, 28*REGBYTES(sp)
20403038:	5ff6                	lw	t6,124(sp)
  LOAD x29, 29*REGBYTES(sp)
2040303a:	6109                	addi	sp,sp,128
  LOAD x30, 30*REGBYTES(sp)
2040303c:	30200073          	mret

20403040 <handle_trap>:
  LOAD x31, 31*REGBYTES(sp)

  addi sp, sp, 32*REGBYTES
20403040:	a001                	j	20403040 <handle_trap>
	...

20403044 <PRCI_use_hfxosc>:
  mret
20403044:	10008737          	lui	a4,0x10008
void PRCI_use_pll(int refsel, int bypass,
			 int r, int f, int q, int finaldiv,
			 int hfroscdiv, int hfrosctrim)
{
  // Ensure that we aren't running off the PLL before we mess with it.
  if (PRCI_REG(PRCI_PLLCFG) & PLL_SEL(1)) {
20403048:	471c                	lw	a5,8(a4)
2040304a:	00f79693          	slli	a3,a5,0xf
2040304e:	0206d463          	bgez	a3,20403076 <PRCI_use_hfxosc+0x32>
  PRCI_REG(PRCI_HFROSCCFG) = (ROSC_DIV(div) | ROSC_TRIM(trim) | ROSC_EN(1));
20403052:	401002b7          	lui	t0,0x40100
20403056:	00428313          	addi	t1,t0,4 # 40100004 <__fini_array_end+0x1fcfc40c>
2040305a:	00672023          	sw	t1,0(a4) # 10008000 <__stack_size+0x10007800>
  while ((PRCI_REG(PRCI_HFROSCCFG) & ROSC_RDY(1)) == 0);
2040305e:	00072383          	lw	t2,0(a4)
20403062:	fe03dee3          	bgez	t2,2040305e <PRCI_use_hfxosc+0x1a>
  PRCI_REG(PRCI_PLLCFG) &= ~PLL_SEL(1);
20403066:	4708                	lw	a0,8(a4)
20403068:	75c1                	lui	a1,0xffff0
2040306a:	fff58613          	addi	a2,a1,-1 # fffeffff <_sp+0x7ffebfff>
2040306e:	00c57833          	and	a6,a0,a2
20403072:	01072423          	sw	a6,8(a4)
  
  if (bypass) {
    // Bypass
    config_value |= PLL_BYPASS(1);

    PRCI_REG(PRCI_PLLCFG) = config_value;
20403076:	100088b7          	lui	a7,0x10008
2040307a:	00060e37          	lui	t3,0x60
2040307e:	01c8a423          	sw	t3,8(a7) # 10008008 <__stack_size+0x10007808>

    // If we don't have an HFXTAL, this doesn't really matter.
    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
20403082:	10000e93          	li	t4,256
20403086:	01d8a623          	sw	t4,12(a7)
    while ((PRCI_REG(PRCI_PLLCFG) & PLL_LOCK(1)) == 0);

  }

  // Switch over to PLL Clock source
  PRCI_REG(PRCI_PLLCFG) |= PLL_SEL(1);
2040308a:	0088af03          	lw	t5,8(a7)
2040308e:	6fc1                	lui	t6,0x10

  // If we're running off HFXOSC, turn off the HFROSC to
  // save power.
  if (refsel) {
    PRCI_REG(PRCI_HFROSCCFG) &= ~ROSC_EN(1);
20403090:	c00006b7          	lui	a3,0xc0000
  PRCI_REG(PRCI_PLLCFG) |= PLL_SEL(1);
20403094:	01ff6733          	or	a4,t5,t6
20403098:	00e8a423          	sw	a4,8(a7)
    PRCI_REG(PRCI_HFROSCCFG) &= ~ROSC_EN(1);
2040309c:	0008a783          	lw	a5,0(a7)
204030a0:	fff68293          	addi	t0,a3,-1 # bfffffff <_sp+0x3fffbfff>
204030a4:	0057f333          	and	t1,a5,t0
204030a8:	0068a023          	sw	t1,0(a7)
204030ac:	8082                	ret
	...

204030b0 <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
204030b0:	00050593          	mv	a1,a0
204030b4:	00000693          	li	a3,0
204030b8:	00000613          	li	a2,0
204030bc:	00000513          	li	a0,0
204030c0:	2a40006f          	j	20403364 <__register_exitproc>

204030c4 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
204030c4:	ff010113          	addi	sp,sp,-16
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
204030c8:	00000593          	li	a1,0
{
204030cc:	00812423          	sw	s0,8(sp)
204030d0:	00112623          	sw	ra,12(sp)
204030d4:	00050413          	mv	s0,a0
    __call_exitprocs (code, NULL);
204030d8:	328000ef          	jal	ra,20403400 <__call_exitprocs>

  if (_GLOBAL_REENT->__cleanup)
204030dc:	800007b7          	lui	a5,0x80000
204030e0:	4287a503          	lw	a0,1064(a5) # 80000428 <_sp+0xffffc428>
204030e4:	03c52783          	lw	a5,60(a0) # 603c <__stack_size+0x583c>
204030e8:	00078463          	beqz	a5,204030f0 <exit+0x2c>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
204030ec:	000780e7          	jalr	a5
  _exit (code);
204030f0:	00040513          	mv	a0,s0
204030f4:	428000ef          	jal	ra,2040351c <_exit>

204030f8 <__libc_fini_array>:
extern void _fini (void);

/* Run all the cleanup routines.  */
void
__libc_fini_array (void)
{
204030f8:	ff010113          	addi	sp,sp,-16
204030fc:	00812423          	sw	s0,8(sp)
20403100:	00912223          	sw	s1,4(sp)
  size_t count;
  size_t i;
  
  count = __fini_array_end - __fini_array_start;
20403104:	20404437          	lui	s0,0x20404
20403108:	204044b7          	lui	s1,0x20404
2040310c:	bf848793          	addi	a5,s1,-1032 # 20403bf8 <__fini_array_end>
20403110:	bf840413          	addi	s0,s0,-1032 # 20403bf8 <__fini_array_end>
20403114:	40f40433          	sub	s0,s0,a5
{
20403118:	00112623          	sw	ra,12(sp)
  count = __fini_array_end - __fini_array_start;
2040311c:	40245413          	srai	s0,s0,0x2
  for (i = count; i > 0; i--)
20403120:	02040263          	beqz	s0,20403144 <__libc_fini_array+0x4c>
20403124:	00241493          	slli	s1,s0,0x2
20403128:	ffc48493          	addi	s1,s1,-4
2040312c:	00f484b3          	add	s1,s1,a5
    __fini_array_start[i-1] ();
20403130:	0004a783          	lw	a5,0(s1)
20403134:	fff40413          	addi	s0,s0,-1
20403138:	ffc48493          	addi	s1,s1,-4
2040313c:	000780e7          	jalr	a5
  for (i = count; i > 0; i--)
20403140:	fe0418e3          	bnez	s0,20403130 <__libc_fini_array+0x38>

  _fini ();
}
20403144:	00812403          	lw	s0,8(sp)
20403148:	00c12083          	lw	ra,12(sp)
2040314c:	00412483          	lw	s1,4(sp)
20403150:	01010113          	addi	sp,sp,16
  _fini ();
20403154:	f21fc06f          	j	20400074 <_fini>

20403158 <__libc_init_array>:
extern void _init (void);

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
20403158:	ff010113          	addi	sp,sp,-16
2040315c:	00812423          	sw	s0,8(sp)
20403160:	01212023          	sw	s2,0(sp)
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
20403164:	20404437          	lui	s0,0x20404
20403168:	20404937          	lui	s2,0x20404
2040316c:	bf040793          	addi	a5,s0,-1040 # 20403bf0 <__init_array_start>
20403170:	bf090913          	addi	s2,s2,-1040 # 20403bf0 <__init_array_start>
20403174:	40f90933          	sub	s2,s2,a5
{
20403178:	00112623          	sw	ra,12(sp)
2040317c:	00912223          	sw	s1,4(sp)
  count = __preinit_array_end - __preinit_array_start;
20403180:	40295913          	srai	s2,s2,0x2
  for (i = 0; i < count; i++)
20403184:	02090063          	beqz	s2,204031a4 <__libc_init_array+0x4c>
20403188:	bf040413          	addi	s0,s0,-1040
2040318c:	00000493          	li	s1,0
    __preinit_array_start[i] ();
20403190:	00042783          	lw	a5,0(s0)
  for (i = 0; i < count; i++)
20403194:	00148493          	addi	s1,s1,1
20403198:	00440413          	addi	s0,s0,4
    __preinit_array_start[i] ();
2040319c:	000780e7          	jalr	a5
  for (i = 0; i < count; i++)
204031a0:	fe9918e3          	bne	s2,s1,20403190 <__libc_init_array+0x38>

  _init ();
204031a4:	ed1fc0ef          	jal	ra,20400074 <_fini>

  count = __init_array_end - __init_array_start;
204031a8:	20404437          	lui	s0,0x20404
204031ac:	20404937          	lui	s2,0x20404
204031b0:	bf040793          	addi	a5,s0,-1040 # 20403bf0 <__init_array_start>
204031b4:	bf890913          	addi	s2,s2,-1032 # 20403bf8 <__fini_array_end>
204031b8:	40f90933          	sub	s2,s2,a5
204031bc:	40295913          	srai	s2,s2,0x2
  for (i = 0; i < count; i++)
204031c0:	02090063          	beqz	s2,204031e0 <__libc_init_array+0x88>
204031c4:	bf040413          	addi	s0,s0,-1040
204031c8:	00000493          	li	s1,0
    __init_array_start[i] ();
204031cc:	00042783          	lw	a5,0(s0)
  for (i = 0; i < count; i++)
204031d0:	00148493          	addi	s1,s1,1
204031d4:	00440413          	addi	s0,s0,4
    __init_array_start[i] ();
204031d8:	000780e7          	jalr	a5
  for (i = 0; i < count; i++)
204031dc:	fe9918e3          	bne	s2,s1,204031cc <__libc_init_array+0x74>
}
204031e0:	00c12083          	lw	ra,12(sp)
204031e4:	00812403          	lw	s0,8(sp)
204031e8:	00412483          	lw	s1,4(sp)
204031ec:	00012903          	lw	s2,0(sp)
204031f0:	01010113          	addi	sp,sp,16
204031f4:	00008067          	ret

204031f8 <srand>:
srand (unsigned int seed)
{
  struct _reent *reent = _REENT;

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
204031f8:	800007b7          	lui	a5,0x80000
204031fc:	4347a783          	lw	a5,1076(a5) # 80000434 <_sp+0xffffc434>
20403200:	0aa7a423          	sw	a0,168(a5)
20403204:	0a07a623          	sw	zero,172(a5)
}
20403208:	00008067          	ret

2040320c <rand>:

int
rand (void)
{
  struct _reent *reent = _REENT;
2040320c:	800007b7          	lui	a5,0x80000
20403210:	4347a583          	lw	a1,1076(a5) # 80000434 <_sp+0xffffc434>
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
20403214:	4c958637          	lui	a2,0x4c958
20403218:	f2d60613          	addi	a2,a2,-211 # 4c957f2d <__fini_array_end+0x2c554335>
2040321c:	0a85a703          	lw	a4,168(a1)
20403220:	0ac5a503          	lw	a0,172(a1)
20403224:	02c707b3          	mul	a5,a4,a2
20403228:	00178693          	addi	a3,a5,1
2040322c:	00f6b7b3          	sltu	a5,a3,a5
  _REENT_RAND_NEXT(reent) =
20403230:	0ad5a423          	sw	a3,168(a1)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
20403234:	5851f6b7          	lui	a3,0x5851f
20403238:	42d68693          	addi	a3,a3,1069 # 5851f42d <__fini_array_end+0x3811b835>
2040323c:	02d706b3          	mul	a3,a4,a3
20403240:	02c50533          	mul	a0,a0,a2
20403244:	02c73733          	mulhu	a4,a4,a2
20403248:	00d50533          	add	a0,a0,a3
2040324c:	00e50533          	add	a0,a0,a4
20403250:	00a787b3          	add	a5,a5,a0
  return (int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
}
20403254:	80000537          	lui	a0,0x80000
20403258:	fff54513          	not	a0,a0
  _REENT_RAND_NEXT(reent) =
2040325c:	0af5a623          	sw	a5,172(a1)
}
20403260:	00a7f533          	and	a0,a5,a0
20403264:	00008067          	ret

20403268 <srandom>:
srandom (unsigned int seed)
{
  struct _reent *reent = _REENT;

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
20403268:	800007b7          	lui	a5,0x80000
2040326c:	4347a783          	lw	a5,1076(a5) # 80000434 <_sp+0xffffc434>
20403270:	0aa7a423          	sw	a0,168(a5)
20403274:	0a07a623          	sw	zero,172(a5)
}
20403278:	00008067          	ret

2040327c <random>:

long int
random (void)
{
  struct _reent *reent = _REENT;
2040327c:	800007b7          	lui	a5,0x80000
20403280:	4347a583          	lw	a1,1076(a5) # 80000434 <_sp+0xffffc434>
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
20403284:	4c958637          	lui	a2,0x4c958
20403288:	f2d60613          	addi	a2,a2,-211 # 4c957f2d <__fini_array_end+0x2c554335>
2040328c:	0a85a703          	lw	a4,168(a1)
20403290:	0ac5a503          	lw	a0,172(a1)
20403294:	02c707b3          	mul	a5,a4,a2
20403298:	00178693          	addi	a3,a5,1
2040329c:	00f6b7b3          	sltu	a5,a3,a5
  _REENT_RAND_NEXT(reent) =
204032a0:	0ad5a423          	sw	a3,168(a1)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
204032a4:	5851f6b7          	lui	a3,0x5851f
204032a8:	42d68693          	addi	a3,a3,1069 # 5851f42d <__fini_array_end+0x3811b835>
204032ac:	02d706b3          	mul	a3,a4,a3
204032b0:	02c50533          	mul	a0,a0,a2
204032b4:	02c73733          	mulhu	a4,a4,a2
204032b8:	00d50533          	add	a0,a0,a3
204032bc:	00e50533          	add	a0,a0,a4
204032c0:	00a787b3          	add	a5,a5,a0
  return (long int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
}
204032c4:	80000537          	lui	a0,0x80000
204032c8:	fff54513          	not	a0,a0
  _REENT_RAND_NEXT(reent) =
204032cc:	0af5a623          	sw	a5,172(a1)
}
204032d0:	00a7f533          	and	a0,a5,a0
204032d4:	00008067          	ret

204032d8 <strlen>:
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  while (*str++)
    ;
  return str - start - 1;
#else
  if (__builtin_expect ((uintptr_t)str & (sizeof (long) - 1), 0)) do
204032d8:	00357793          	andi	a5,a0,3
204032dc:	00050713          	mv	a4,a0
204032e0:	04079c63          	bnez	a5,20403338 <strlen+0x60>
static __inline unsigned long __libc_detect_null(unsigned long w)
{
  unsigned long mask = 0x7f7f7f7f;
  if (sizeof (long) == 8)
    mask = ((mask << 16) << 16) | mask;
  return ~(((w & mask) + mask) | w | mask);
204032e4:	7f7f86b7          	lui	a3,0x7f7f8
204032e8:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__fini_array_end+0x5f3f4387>
      if (!ch)
	return str - start - 1;
    } while ((uintptr_t)str & (sizeof (long) - 1));

  unsigned long *ls = (unsigned long *)str;
  while (!__libc_detect_null (*ls++))
204032ec:	fff00593          	li	a1,-1
204032f0:	00470713          	addi	a4,a4,4
204032f4:	ffc72603          	lw	a2,-4(a4)
204032f8:	00d677b3          	and	a5,a2,a3
204032fc:	00d787b3          	add	a5,a5,a3
20403300:	00c7e7b3          	or	a5,a5,a2
20403304:	00d7e7b3          	or	a5,a5,a3
20403308:	feb784e3          	beq	a5,a1,204032f0 <strlen+0x18>

  str = (const char *)ls;
  size_t ret = str - start, sl = sizeof (long);

  char c0 = str[0 - sl], c1 = str[1 - sl], c2 = str[2 - sl], c3 = str[3 - sl];
  if (c0 == 0)            return ret + 0 - sl;
2040330c:	ffc74683          	lbu	a3,-4(a4)
  size_t ret = str - start, sl = sizeof (long);
20403310:	40a707b3          	sub	a5,a4,a0
  char c0 = str[0 - sl], c1 = str[1 - sl], c2 = str[2 - sl], c3 = str[3 - sl];
20403314:	ffd74603          	lbu	a2,-3(a4)
20403318:	ffe74503          	lbu	a0,-2(a4)
  if (c0 == 0)            return ret + 0 - sl;
2040331c:	04068063          	beqz	a3,2040335c <strlen+0x84>
  if (c1 == 0)            return ret + 1 - sl;
20403320:	02060a63          	beqz	a2,20403354 <strlen+0x7c>
  if (c2 == 0)            return ret + 2 - sl;
20403324:	00a03533          	snez	a0,a0
20403328:	00f50533          	add	a0,a0,a5
2040332c:	ffe50513          	addi	a0,a0,-2 # 7ffffffe <_sp+0xffffbffe>
  if (c1 == 0)            return ret + 5 - sl;
  if (c2 == 0)            return ret + 6 - sl;

  return ret + 7 - sl;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
20403330:	00008067          	ret
    } while ((uintptr_t)str & (sizeof (long) - 1));
20403334:	fa0688e3          	beqz	a3,204032e4 <strlen+0xc>
      char ch = *str;
20403338:	00074783          	lbu	a5,0(a4)
      str++;
2040333c:	00170713          	addi	a4,a4,1
    } while ((uintptr_t)str & (sizeof (long) - 1));
20403340:	00377693          	andi	a3,a4,3
      if (!ch)
20403344:	fe0798e3          	bnez	a5,20403334 <strlen+0x5c>
	return str - start - 1;
20403348:	40a70733          	sub	a4,a4,a0
2040334c:	fff70513          	addi	a0,a4,-1
20403350:	00008067          	ret
  if (c1 == 0)            return ret + 1 - sl;
20403354:	ffd78513          	addi	a0,a5,-3
20403358:	00008067          	ret
  if (c0 == 0)            return ret + 0 - sl;
2040335c:	ffc78513          	addi	a0,a5,-4
20403360:	00008067          	ret

20403364 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
20403364:	800007b7          	lui	a5,0x80000
20403368:	4287a703          	lw	a4,1064(a5) # 80000428 <_sp+0xffffc428>
2040336c:	14872783          	lw	a5,328(a4)
  if (p == NULL)
20403370:	04078c63          	beqz	a5,204033c8 <__register_exitproc+0x64>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
20403374:	0047a703          	lw	a4,4(a5)
20403378:	01f00813          	li	a6,31
2040337c:	06e84e63          	blt	a6,a4,204033f8 <__register_exitproc+0x94>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
20403380:	00271813          	slli	a6,a4,0x2
20403384:	02050663          	beqz	a0,204033b0 <__register_exitproc+0x4c>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
20403388:	01078333          	add	t1,a5,a6
2040338c:	08c32423          	sw	a2,136(t1)
      args->_fntypes |= (1 << p->_ind);
20403390:	1887a883          	lw	a7,392(a5)
20403394:	00100613          	li	a2,1
20403398:	00e61633          	sll	a2,a2,a4
2040339c:	00c8e8b3          	or	a7,a7,a2
204033a0:	1917a423          	sw	a7,392(a5)
      args->_dso_handle[p->_ind] = d;
204033a4:	10d32423          	sw	a3,264(t1)
      if (type == __et_cxa)
204033a8:	00200693          	li	a3,2
204033ac:	02d50463          	beq	a0,a3,204033d4 <__register_exitproc+0x70>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
204033b0:	00170713          	addi	a4,a4,1
204033b4:	00e7a223          	sw	a4,4(a5)
204033b8:	010787b3          	add	a5,a5,a6
204033bc:	00b7a423          	sw	a1,8(a5)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
204033c0:	00000513          	li	a0,0
204033c4:	00008067          	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
204033c8:	14c70793          	addi	a5,a4,332
204033cc:	14f72423          	sw	a5,328(a4)
204033d0:	fa5ff06f          	j	20403374 <__register_exitproc+0x10>
	args->_is_cxa |= (1 << p->_ind);
204033d4:	18c7a683          	lw	a3,396(a5)
  p->_fns[p->_ind++] = fn;
204033d8:	00170713          	addi	a4,a4,1
204033dc:	00e7a223          	sw	a4,4(a5)
	args->_is_cxa |= (1 << p->_ind);
204033e0:	00c6e633          	or	a2,a3,a2
204033e4:	18c7a623          	sw	a2,396(a5)
  p->_fns[p->_ind++] = fn;
204033e8:	010787b3          	add	a5,a5,a6
204033ec:	00b7a423          	sw	a1,8(a5)
  return 0;
204033f0:	00000513          	li	a0,0
204033f4:	00008067          	ret
      return -1;
204033f8:	fff00513          	li	a0,-1
}
204033fc:	00008067          	ret

20403400 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
20403400:	fd010113          	addi	sp,sp,-48
20403404:	800007b7          	lui	a5,0x80000
20403408:	01812423          	sw	s8,8(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
2040340c:	4287ac03          	lw	s8,1064(a5) # 80000428 <_sp+0xffffc428>
{
20403410:	01312e23          	sw	s3,28(sp)
20403414:	01412c23          	sw	s4,24(sp)
20403418:	01512a23          	sw	s5,20(sp)
2040341c:	01612823          	sw	s6,16(sp)
20403420:	02112623          	sw	ra,44(sp)
20403424:	02812423          	sw	s0,40(sp)
20403428:	02912223          	sw	s1,36(sp)
2040342c:	03212023          	sw	s2,32(sp)
20403430:	01712623          	sw	s7,12(sp)
20403434:	00050a93          	mv	s5,a0
20403438:	00058b13          	mv	s6,a1
#endif
      for (n = p->_ind - 1; n >= 0; n--)
	{
	  int ind;

	  i = 1 << n;
2040343c:	00100a13          	li	s4,1
      for (n = p->_ind - 1; n >= 0; n--)
20403440:	fff00993          	li	s3,-1
  p = _GLOBAL_ATEXIT;
20403444:	148c2903          	lw	s2,328(s8)
  while (p)
20403448:	02090863          	beqz	s2,20403478 <__call_exitprocs+0x78>
      for (n = p->_ind - 1; n >= 0; n--)
2040344c:	00492483          	lw	s1,4(s2)
20403450:	fff48413          	addi	s0,s1,-1
20403454:	02044263          	bltz	s0,20403478 <__call_exitprocs+0x78>
20403458:	00249493          	slli	s1,s1,0x2
2040345c:	009904b3          	add	s1,s2,s1

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
20403460:	040b0463          	beqz	s6,204034a8 <__call_exitprocs+0xa8>
20403464:	1044a783          	lw	a5,260(s1)
20403468:	05678063          	beq	a5,s6,204034a8 <__call_exitprocs+0xa8>
      for (n = p->_ind - 1; n >= 0; n--)
2040346c:	fff40413          	addi	s0,s0,-1
20403470:	ffc48493          	addi	s1,s1,-4
20403474:	ff3416e3          	bne	s0,s3,20403460 <__call_exitprocs+0x60>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
20403478:	02c12083          	lw	ra,44(sp)
2040347c:	02812403          	lw	s0,40(sp)
20403480:	02412483          	lw	s1,36(sp)
20403484:	02012903          	lw	s2,32(sp)
20403488:	01c12983          	lw	s3,28(sp)
2040348c:	01812a03          	lw	s4,24(sp)
20403490:	01412a83          	lw	s5,20(sp)
20403494:	01012b03          	lw	s6,16(sp)
20403498:	00c12b83          	lw	s7,12(sp)
2040349c:	00812c03          	lw	s8,8(sp)
204034a0:	03010113          	addi	sp,sp,48
204034a4:	00008067          	ret
	  if (n == p->_ind - 1)
204034a8:	00492783          	lw	a5,4(s2)
	  fn = p->_fns[n];
204034ac:	0044a683          	lw	a3,4(s1)
	  if (n == p->_ind - 1)
204034b0:	fff78793          	addi	a5,a5,-1
204034b4:	04878a63          	beq	a5,s0,20403508 <__call_exitprocs+0x108>
	    p->_fns[n] = NULL;
204034b8:	0004a223          	sw	zero,4(s1)
	  if (!fn)
204034bc:	fa0688e3          	beqz	a3,2040346c <__call_exitprocs+0x6c>
	  if (!args || (args->_fntypes & i) == 0)
204034c0:	18892783          	lw	a5,392(s2)
	  i = 1 << n;
204034c4:	008a1733          	sll	a4,s4,s0
	  ind = p->_ind;
204034c8:	00492b83          	lw	s7,4(s2)
	  if (!args || (args->_fntypes & i) == 0)
204034cc:	00f777b3          	and	a5,a4,a5
204034d0:	00079e63          	bnez	a5,204034ec <__call_exitprocs+0xec>
	    fn ();
204034d4:	000680e7          	jalr	a3
	  if (ind != p->_ind || *lastp != p)
204034d8:	00492783          	lw	a5,4(s2)
204034dc:	f77794e3          	bne	a5,s7,20403444 <__call_exitprocs+0x44>
204034e0:	148c2783          	lw	a5,328(s8)
204034e4:	f92784e3          	beq	a5,s2,2040346c <__call_exitprocs+0x6c>
204034e8:	f5dff06f          	j	20403444 <__call_exitprocs+0x44>
	  else if ((args->_is_cxa & i) == 0)
204034ec:	18c92783          	lw	a5,396(s2)
204034f0:	0844a583          	lw	a1,132(s1)
204034f4:	00f77733          	and	a4,a4,a5
204034f8:	00071c63          	bnez	a4,20403510 <__call_exitprocs+0x110>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
204034fc:	000a8513          	mv	a0,s5
20403500:	000680e7          	jalr	a3
20403504:	fd5ff06f          	j	204034d8 <__call_exitprocs+0xd8>
	    p->_ind--;
20403508:	00892223          	sw	s0,4(s2)
2040350c:	fb1ff06f          	j	204034bc <__call_exitprocs+0xbc>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
20403510:	00058513          	mv	a0,a1
20403514:	000680e7          	jalr	a3
20403518:	fc1ff06f          	j	204034d8 <__call_exitprocs+0xd8>

2040351c <_exit>:

static inline long
__internal_syscall(long n, long _a0, long _a1, long _a2, long _a3, long _a4, long _a5)
{
  register long a0 asm("a0") = _a0;
  register long a1 asm("a1") = _a1;
2040351c:	00000593          	li	a1,0
  register long a2 asm("a2") = _a2;
20403520:	00000613          	li	a2,0
  register long a3 asm("a3") = _a3;
20403524:	00000693          	li	a3,0
  register long a4 asm("a4") = _a4;
20403528:	00000713          	li	a4,0
  register long a5 asm("a5") = _a5;
2040352c:	00000793          	li	a5,0

#ifdef __riscv_32e
  register long syscall_id asm("t0") = n;
#else
  register long syscall_id asm("a7") = n;
20403530:	05d00893          	li	a7,93
#endif

  asm volatile ("scall"
20403534:	00000073          	ecall
		: "+r"(a0) : "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5), "r"(syscall_id));

  if (a0 < 0)
20403538:	00054463          	bltz	a0,20403540 <_exit+0x24>
/* Exit a program without cleaning up files.  */
void
_exit(int exit_status)
{
  syscall_errno (SYS_exit, exit_status, 0, 0, 0, 0, 0);
  while (1);
2040353c:	0000006f          	j	2040353c <_exit+0x20>
{
20403540:	ff010113          	addi	sp,sp,-16
20403544:	00812423          	sw	s0,8(sp)
20403548:	00050413          	mv	s0,a0
2040354c:	00112623          	sw	ra,12(sp)
  errno = -a0;
20403550:	40800433          	neg	s0,s0
20403554:	00c000ef          	jal	ra,20403560 <__errno>
20403558:	00852023          	sw	s0,0(a0)
  while (1);
2040355c:	0000006f          	j	2040355c <_exit+0x40>

20403560 <__errno>:
#ifndef _REENT_ONLY

int *
__errno ()
{
  return &_REENT->_errno;
20403560:	800007b7          	lui	a5,0x80000
}
20403564:	4347a503          	lw	a0,1076(a5) # 80000434 <_sp+0xffffc434>
20403568:	00008067          	ret

2040356c <__divdi3>:

#ifdef L_divdi3
DWtype
__divdi3 (DWtype u, DWtype v)
{
  Wtype c = 0;
2040356c:	00000313          	li	t1,0
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
20403570:	0005dc63          	bgez	a1,20403588 <__divdi3+0x1c>
    c = ~c,
    uu.ll = -uu.ll;
20403574:	40a00533          	neg	a0,a0
20403578:	00a03833          	snez	a6,a0
2040357c:	40b00733          	neg	a4,a1
20403580:	410705b3          	sub	a1,a4,a6
    c = ~c,
20403584:	fff00313          	li	t1,-1
  if (vv.s.high < 0)
20403588:	0006dc63          	bgez	a3,204035a0 <__divdi3+0x34>
    c = ~c,
    vv.ll = -vv.ll;
2040358c:	40c00633          	neg	a2,a2
20403590:	00c037b3          	snez	a5,a2
20403594:	40d006b3          	neg	a3,a3
    c = ~c,
20403598:	fff34313          	not	t1,t1
    vv.ll = -vv.ll;
2040359c:	40f686b3          	sub	a3,a3,a5
  d0 = dd.s.low;
204035a0:	00060813          	mv	a6,a2
  d1 = dd.s.high;
204035a4:	00068713          	mv	a4,a3
  n0 = nn.s.low;
204035a8:	00050893          	mv	a7,a0
  n1 = nn.s.high;
204035ac:	00058e13          	mv	t3,a1
  if (d1 == 0)
204035b0:	2a069263          	bnez	a3,20403854 <__divdi3+0x2e8>
      if (d0 > n1)
204035b4:	204046b7          	lui	a3,0x20404
204035b8:	af068693          	addi	a3,a3,-1296 # 20403af0 <__clz_tab>
204035bc:	0ec5f663          	bleu	a2,a1,204036a8 <__divdi3+0x13c>
	  count_leading_zeros (bm, d0);
204035c0:	000107b7          	lui	a5,0x10
204035c4:	0cf67863          	bleu	a5,a2,20403694 <__divdi3+0x128>
204035c8:	0ff00e93          	li	t4,255
204035cc:	00cebeb3          	sltu	t4,t4,a2
204035d0:	003e9e93          	slli	t4,t4,0x3
204035d4:	01d657b3          	srl	a5,a2,t4
204035d8:	00f686b3          	add	a3,a3,a5
204035dc:	0006c783          	lbu	a5,0(a3)
204035e0:	01d78eb3          	add	t4,a5,t4
204035e4:	02000793          	li	a5,32
204035e8:	41d787b3          	sub	a5,a5,t4
	  if (bm != 0)
204035ec:	00078c63          	beqz	a5,20403604 <__divdi3+0x98>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
204035f0:	00f59733          	sll	a4,a1,a5
204035f4:	01d55eb3          	srl	t4,a0,t4
	      d0 = d0 << bm;
204035f8:	00f61833          	sll	a6,a2,a5
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
204035fc:	00eeee33          	or	t3,t4,a4
	      n0 = n0 << bm;
20403600:	00f518b3          	sll	a7,a0,a5
	  udiv_qrnnd (q0, n0, n1, n0, d0);
20403604:	01085613          	srli	a2,a6,0x10
20403608:	02ce77b3          	remu	a5,t3,a2
2040360c:	01081593          	slli	a1,a6,0x10
20403610:	0105d593          	srli	a1,a1,0x10
20403614:	0108d693          	srli	a3,a7,0x10
20403618:	02ce5e33          	divu	t3,t3,a2
2040361c:	01079793          	slli	a5,a5,0x10
20403620:	00d7e6b3          	or	a3,a5,a3
20403624:	03c58733          	mul	a4,a1,t3
20403628:	000e0793          	mv	a5,t3
2040362c:	00e6fe63          	bleu	a4,a3,20403648 <__divdi3+0xdc>
20403630:	010686b3          	add	a3,a3,a6
20403634:	fffe0793          	addi	a5,t3,-1 # 5ffff <__stack_size+0x5f7ff>
20403638:	0106e863          	bltu	a3,a6,20403648 <__divdi3+0xdc>
2040363c:	00e6f663          	bleu	a4,a3,20403648 <__divdi3+0xdc>
20403640:	ffee0793          	addi	a5,t3,-2
20403644:	010686b3          	add	a3,a3,a6
20403648:	40e686b3          	sub	a3,a3,a4
2040364c:	02c6f733          	remu	a4,a3,a2
20403650:	01089893          	slli	a7,a7,0x10
20403654:	0108d893          	srli	a7,a7,0x10
20403658:	02c6d6b3          	divu	a3,a3,a2
2040365c:	01071713          	slli	a4,a4,0x10
20403660:	011768b3          	or	a7,a4,a7
20403664:	02d585b3          	mul	a1,a1,a3
20403668:	00068513          	mv	a0,a3
2040366c:	00b8fc63          	bleu	a1,a7,20403684 <__divdi3+0x118>
20403670:	011808b3          	add	a7,a6,a7
20403674:	fff68513          	addi	a0,a3,-1
20403678:	0108e663          	bltu	a7,a6,20403684 <__divdi3+0x118>
2040367c:	00b8f463          	bleu	a1,a7,20403684 <__divdi3+0x118>
20403680:	ffe68513          	addi	a0,a3,-2
20403684:	01079793          	slli	a5,a5,0x10
20403688:	00a7e7b3          	or	a5,a5,a0
	      q1 = 0;
2040368c:	00000e13          	li	t3,0
20403690:	0e40006f          	j	20403774 <__divdi3+0x208>
	  count_leading_zeros (bm, d0);
20403694:	010007b7          	lui	a5,0x1000
20403698:	01000e93          	li	t4,16
2040369c:	f2f66ce3          	bltu	a2,a5,204035d4 <__divdi3+0x68>
204036a0:	01800e93          	li	t4,24
204036a4:	f31ff06f          	j	204035d4 <__divdi3+0x68>
	  if (d0 == 0)
204036a8:	00061663          	bnez	a2,204036b4 <__divdi3+0x148>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
204036ac:	00100813          	li	a6,1
204036b0:	02e85833          	divu	a6,a6,a4
	  count_leading_zeros (bm, d0);
204036b4:	000107b7          	lui	a5,0x10
204036b8:	0cf87e63          	bleu	a5,a6,20403794 <__divdi3+0x228>
204036bc:	0ff00793          	li	a5,255
204036c0:	0107f463          	bleu	a6,a5,204036c8 <__divdi3+0x15c>
204036c4:	00800713          	li	a4,8
204036c8:	00e857b3          	srl	a5,a6,a4
204036cc:	00f686b3          	add	a3,a3,a5
204036d0:	0006c783          	lbu	a5,0(a3)
204036d4:	02000693          	li	a3,32
204036d8:	00e787b3          	add	a5,a5,a4
204036dc:	40f686b3          	sub	a3,a3,a5
	  if (bm == 0)
204036e0:	0c069463          	bnez	a3,204037a8 <__divdi3+0x23c>
	      n1 -= d0;
204036e4:	41058733          	sub	a4,a1,a6
	      q1 = 1;
204036e8:	00100e13          	li	t3,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
204036ec:	01085613          	srli	a2,a6,0x10
204036f0:	01081593          	slli	a1,a6,0x10
204036f4:	0105d593          	srli	a1,a1,0x10
204036f8:	0108d693          	srli	a3,a7,0x10
204036fc:	02c777b3          	remu	a5,a4,a2
20403700:	02c75733          	divu	a4,a4,a2
20403704:	01079793          	slli	a5,a5,0x10
20403708:	00d7e6b3          	or	a3,a5,a3
2040370c:	02e58533          	mul	a0,a1,a4
20403710:	00070793          	mv	a5,a4
20403714:	00a6fe63          	bleu	a0,a3,20403730 <__divdi3+0x1c4>
20403718:	010686b3          	add	a3,a3,a6
2040371c:	fff70793          	addi	a5,a4,-1
20403720:	0106e863          	bltu	a3,a6,20403730 <__divdi3+0x1c4>
20403724:	00a6f663          	bleu	a0,a3,20403730 <__divdi3+0x1c4>
20403728:	ffe70793          	addi	a5,a4,-2
2040372c:	010686b3          	add	a3,a3,a6
20403730:	40a686b3          	sub	a3,a3,a0
20403734:	02c6f733          	remu	a4,a3,a2
20403738:	01089893          	slli	a7,a7,0x10
2040373c:	0108d893          	srli	a7,a7,0x10
20403740:	02c6d6b3          	divu	a3,a3,a2
20403744:	01071713          	slli	a4,a4,0x10
20403748:	011768b3          	or	a7,a4,a7
2040374c:	02d585b3          	mul	a1,a1,a3
20403750:	00068513          	mv	a0,a3
20403754:	00b8fc63          	bleu	a1,a7,2040376c <__divdi3+0x200>
20403758:	011808b3          	add	a7,a6,a7
2040375c:	fff68513          	addi	a0,a3,-1
20403760:	0108e663          	bltu	a7,a6,2040376c <__divdi3+0x200>
20403764:	00b8f463          	bleu	a1,a7,2040376c <__divdi3+0x200>
20403768:	ffe68513          	addi	a0,a3,-2
2040376c:	01079793          	slli	a5,a5,0x10
20403770:	00a7e7b3          	or	a5,a5,a0
  return ww.ll;
20403774:	00078513          	mv	a0,a5
20403778:	000e0593          	mv	a1,t3

  w = __udivmoddi4 (uu.ll, vv.ll, (UDWtype *) 0);
  if (c)
2040377c:	00030a63          	beqz	t1,20403790 <__divdi3+0x224>
    w = -w;
20403780:	40f00533          	neg	a0,a5
20403784:	00a037b3          	snez	a5,a0
20403788:	41c005b3          	neg	a1,t3
2040378c:	40f585b3          	sub	a1,a1,a5

  return w;
}
20403790:	00008067          	ret
	  count_leading_zeros (bm, d0);
20403794:	010007b7          	lui	a5,0x1000
20403798:	01000713          	li	a4,16
2040379c:	f2f866e3          	bltu	a6,a5,204036c8 <__divdi3+0x15c>
204037a0:	01800713          	li	a4,24
204037a4:	f25ff06f          	j	204036c8 <__divdi3+0x15c>
	      d0 = d0 << bm;
204037a8:	00d81833          	sll	a6,a6,a3
	      n2 = n1 >> b;
204037ac:	00f5deb3          	srl	t4,a1,a5
	      n0 = n0 << bm;
204037b0:	00d518b3          	sll	a7,a0,a3
	      n1 = (n1 << bm) | (n0 >> b);
204037b4:	00f557b3          	srl	a5,a0,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
204037b8:	01085513          	srli	a0,a6,0x10
	      n1 = (n1 << bm) | (n0 >> b);
204037bc:	00d59733          	sll	a4,a1,a3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
204037c0:	02aed5b3          	divu	a1,t4,a0
	      n1 = (n1 << bm) | (n0 >> b);
204037c4:	00e7e633          	or	a2,a5,a4
	      udiv_qrnnd (q1, n1, n2, n1, d0);
204037c8:	01081713          	slli	a4,a6,0x10
204037cc:	01075713          	srli	a4,a4,0x10
204037d0:	01065793          	srli	a5,a2,0x10
204037d4:	02aef6b3          	remu	a3,t4,a0
204037d8:	00058e13          	mv	t3,a1
204037dc:	02b70eb3          	mul	t4,a4,a1
204037e0:	01069693          	slli	a3,a3,0x10
204037e4:	00f6e7b3          	or	a5,a3,a5
204037e8:	01d7fe63          	bleu	t4,a5,20403804 <__divdi3+0x298>
204037ec:	010787b3          	add	a5,a5,a6
204037f0:	fff58e13          	addi	t3,a1,-1
204037f4:	0107e863          	bltu	a5,a6,20403804 <__divdi3+0x298>
204037f8:	01d7f663          	bleu	t4,a5,20403804 <__divdi3+0x298>
204037fc:	ffe58e13          	addi	t3,a1,-2
20403800:	010787b3          	add	a5,a5,a6
20403804:	41d787b3          	sub	a5,a5,t4
20403808:	02a7f5b3          	remu	a1,a5,a0
2040380c:	01061613          	slli	a2,a2,0x10
20403810:	01065613          	srli	a2,a2,0x10
20403814:	02a7d7b3          	divu	a5,a5,a0
20403818:	01059593          	slli	a1,a1,0x10
2040381c:	00c5e5b3          	or	a1,a1,a2
20403820:	02f70733          	mul	a4,a4,a5
20403824:	00078693          	mv	a3,a5
20403828:	00e5fe63          	bleu	a4,a1,20403844 <__divdi3+0x2d8>
2040382c:	010585b3          	add	a1,a1,a6
20403830:	fff78693          	addi	a3,a5,-1 # ffffff <__stack_size+0xfff7ff>
20403834:	0105e863          	bltu	a1,a6,20403844 <__divdi3+0x2d8>
20403838:	00e5f663          	bleu	a4,a1,20403844 <__divdi3+0x2d8>
2040383c:	ffe78693          	addi	a3,a5,-2
20403840:	010585b3          	add	a1,a1,a6
20403844:	010e1e13          	slli	t3,t3,0x10
20403848:	40e58733          	sub	a4,a1,a4
2040384c:	00de6e33          	or	t3,t3,a3
20403850:	e9dff06f          	j	204036ec <__divdi3+0x180>
      if (d1 > n1)
20403854:	18d5e663          	bltu	a1,a3,204039e0 <__divdi3+0x474>
	  count_leading_zeros (bm, d1);
20403858:	000107b7          	lui	a5,0x10
2040385c:	04f6f463          	bleu	a5,a3,204038a4 <__divdi3+0x338>
20403860:	0ff00813          	li	a6,255
20403864:	00d838b3          	sltu	a7,a6,a3
20403868:	00389893          	slli	a7,a7,0x3
2040386c:	20404737          	lui	a4,0x20404
20403870:	0116d7b3          	srl	a5,a3,a7
20403874:	af070713          	addi	a4,a4,-1296 # 20403af0 <__clz_tab>
20403878:	00e787b3          	add	a5,a5,a4
2040387c:	0007c803          	lbu	a6,0(a5) # 10000 <__stack_size+0xf800>
20403880:	02000e13          	li	t3,32
20403884:	01180833          	add	a6,a6,a7
20403888:	410e0e33          	sub	t3,t3,a6
	  if (bm == 0)
2040388c:	020e1663          	bnez	t3,204038b8 <__divdi3+0x34c>
		  q0 = 1;
20403890:	00100793          	li	a5,1
	      if (n1 > d1 || n0 >= d0)
20403894:	eeb6e0e3          	bltu	a3,a1,20403774 <__divdi3+0x208>
20403898:	00c53633          	sltu	a2,a0,a2
2040389c:	00164793          	xori	a5,a2,1
204038a0:	ed5ff06f          	j	20403774 <__divdi3+0x208>
	  count_leading_zeros (bm, d1);
204038a4:	010007b7          	lui	a5,0x1000
204038a8:	01000893          	li	a7,16
204038ac:	fcf6e0e3          	bltu	a3,a5,2040386c <__divdi3+0x300>
204038b0:	01800893          	li	a7,24
204038b4:	fb9ff06f          	j	2040386c <__divdi3+0x300>
	      d1 = (d1 << bm) | (d0 >> b);
204038b8:	010657b3          	srl	a5,a2,a6
204038bc:	01c696b3          	sll	a3,a3,t3
204038c0:	00d7e6b3          	or	a3,a5,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038c4:	0106df13          	srli	t5,a3,0x10
	      n2 = n1 >> b;
204038c8:	0105d7b3          	srl	a5,a1,a6
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038cc:	03e7f8b3          	remu	a7,a5,t5
204038d0:	01069e93          	slli	t4,a3,0x10
204038d4:	010ede93          	srli	t4,t4,0x10
	      n1 = (n1 << bm) | (n0 >> b);
204038d8:	01c59733          	sll	a4,a1,t3
204038dc:	01055833          	srl	a6,a0,a6
204038e0:	00e86733          	or	a4,a6,a4
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038e4:	01075813          	srli	a6,a4,0x10
	      d0 = d0 << bm;
204038e8:	01c61633          	sll	a2,a2,t3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038ec:	03e7d7b3          	divu	a5,a5,t5
204038f0:	01089893          	slli	a7,a7,0x10
204038f4:	0108e833          	or	a6,a7,a6
204038f8:	02fe8fb3          	mul	t6,t4,a5
204038fc:	00078593          	mv	a1,a5
20403900:	01f87e63          	bleu	t6,a6,2040391c <__divdi3+0x3b0>
20403904:	00d80833          	add	a6,a6,a3
20403908:	fff78593          	addi	a1,a5,-1 # ffffff <__stack_size+0xfff7ff>
2040390c:	00d86863          	bltu	a6,a3,2040391c <__divdi3+0x3b0>
20403910:	01f87663          	bleu	t6,a6,2040391c <__divdi3+0x3b0>
20403914:	ffe78593          	addi	a1,a5,-2
20403918:	00d80833          	add	a6,a6,a3
2040391c:	41f80833          	sub	a6,a6,t6
20403920:	03e878b3          	remu	a7,a6,t5
20403924:	01071713          	slli	a4,a4,0x10
20403928:	01075713          	srli	a4,a4,0x10
2040392c:	03e85833          	divu	a6,a6,t5
20403930:	01089893          	slli	a7,a7,0x10
20403934:	00e8e733          	or	a4,a7,a4
20403938:	030e8eb3          	mul	t4,t4,a6
2040393c:	00080793          	mv	a5,a6
20403940:	01d77e63          	bleu	t4,a4,2040395c <__divdi3+0x3f0>
20403944:	00d70733          	add	a4,a4,a3
20403948:	fff80793          	addi	a5,a6,-1 # 2ffff <__stack_size+0x2f7ff>
2040394c:	00d76863          	bltu	a4,a3,2040395c <__divdi3+0x3f0>
20403950:	01d77663          	bleu	t4,a4,2040395c <__divdi3+0x3f0>
20403954:	ffe80793          	addi	a5,a6,-2
20403958:	00d70733          	add	a4,a4,a3
2040395c:	01059593          	slli	a1,a1,0x10
	      umul_ppmm (m1, m0, q0, d0);
20403960:	00010f37          	lui	t5,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
20403964:	00f5e7b3          	or	a5,a1,a5
	      umul_ppmm (m1, m0, q0, d0);
20403968:	ffff0593          	addi	a1,t5,-1 # ffff <__stack_size+0xf7ff>
2040396c:	00b7f8b3          	and	a7,a5,a1
20403970:	0107d813          	srli	a6,a5,0x10
20403974:	00b675b3          	and	a1,a2,a1
20403978:	01065613          	srli	a2,a2,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
2040397c:	41d70733          	sub	a4,a4,t4
	      umul_ppmm (m1, m0, q0, d0);
20403980:	02b88eb3          	mul	t4,a7,a1
20403984:	02b805b3          	mul	a1,a6,a1
20403988:	010ed693          	srli	a3,t4,0x10
2040398c:	02c888b3          	mul	a7,a7,a2
20403990:	00b888b3          	add	a7,a7,a1
20403994:	011686b3          	add	a3,a3,a7
20403998:	02c80833          	mul	a6,a6,a2
2040399c:	00b6f463          	bleu	a1,a3,204039a4 <__divdi3+0x438>
204039a0:	01e80833          	add	a6,a6,t5
204039a4:	0106d613          	srli	a2,a3,0x10
204039a8:	01060833          	add	a6,a2,a6
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
204039ac:	03076663          	bltu	a4,a6,204039d8 <__divdi3+0x46c>
204039b0:	cd071ee3          	bne	a4,a6,2040368c <__divdi3+0x120>
	      umul_ppmm (m1, m0, q0, d0);
204039b4:	00010737          	lui	a4,0x10
204039b8:	fff70713          	addi	a4,a4,-1 # ffff <__stack_size+0xf7ff>
204039bc:	00e6f6b3          	and	a3,a3,a4
204039c0:	01069693          	slli	a3,a3,0x10
204039c4:	00eefeb3          	and	t4,t4,a4
	      n0 = n0 << bm;
204039c8:	01c51533          	sll	a0,a0,t3
	      umul_ppmm (m1, m0, q0, d0);
204039cc:	01d686b3          	add	a3,a3,t4
	      q1 = 0;
204039d0:	00000e13          	li	t3,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
204039d4:	dad570e3          	bleu	a3,a0,20403774 <__divdi3+0x208>
		  q0--;
204039d8:	fff78793          	addi	a5,a5,-1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
204039dc:	cb1ff06f          	j	2040368c <__divdi3+0x120>
	  q1 = 0;
204039e0:	00000e13          	li	t3,0
	  q0 = 0;
204039e4:	00000793          	li	a5,0
204039e8:	d8dff06f          	j	20403774 <__divdi3+0x208>
