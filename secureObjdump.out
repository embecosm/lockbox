
lockbox.exe:     file format elf32-littleriscv


Disassembly of section .init:

20400000 <_start>:
	.section .init
	.globl _start
	.type _start,@function

_start:
	la gp, _gp
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	c2818193          	addi	gp,gp,-984 # 80000c28 <_gp>
	la sp, _sp
20400008:	5fc04117          	auipc	sp,0x5fc04
2040000c:	ff810113          	addi	sp,sp,-8 # 80004000 <_sp>

	/* Load data section */
	la a0, _data_lma
20400010:	00004517          	auipc	a0,0x4
20400014:	bdc50513          	addi	a0,a0,-1060 # 20403bec <__fini_array_end>
	la a1, _data
20400018:	5fc00597          	auipc	a1,0x5fc00
2040001c:	fe858593          	addi	a1,a1,-24 # 80000000 <_data>
	la a2, _edata
20400020:	5fc00617          	auipc	a2,0x5fc00
20400024:	41860613          	addi	a2,a2,1048 # 80000438 <conversion_error>
	bgeu a1, a2, 2f
20400028:	00c5fa63          	bleu	a2,a1,2040003c <_start+0x3c>
1:
	lw t0, (a0)
2040002c:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
20400030:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
20400034:	0511                	addi	a0,a0,4
	addi a1, a1, 4
20400036:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
20400038:	fec5eae3          	bltu	a1,a2,2040002c <_start+0x2c>
2:

	/* Clear bss section */
	la a0, __bss_start
2040003c:	5fc00517          	auipc	a0,0x5fc00
20400040:	3fc50513          	addi	a0,a0,1020 # 80000438 <conversion_error>
	la a1, _end
20400044:	5fc00597          	auipc	a1,0x5fc00
20400048:	45458593          	addi	a1,a1,1108 # 80000498 <_end>
	bgeu a0, a1, 2f
2040004c:	00b57763          	bleu	a1,a0,2040005a <_start+0x5a>
1:
	sw zero, (a0)
20400050:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
20400054:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
20400056:	feb56de3          	bltu	a0,a1,20400050 <_start+0x50>
2:

	/* Call global constructors */
	la a0, __libc_fini_array
2040005a:	00003517          	auipc	a0,0x3
2040005e:	fb650513          	addi	a0,a0,-74 # 20403010 <__libc_fini_array>
	call atexit
20400062:	767020ef          	jal	ra,20402fc8 <atexit>
	call __libc_init_array
20400066:	00a030ef          	jal	ra,20403070 <__libc_init_array>
	fssr x0
1:
#endif

	/* argc = argv = 0 */
	li a0, 0
2040006a:	4501                	li	a0,0
	li a1, 0
2040006c:	4581                	li	a1,0
	call main
2040006e:	203d                	jal	2040009c <main>
	tail exit
20400070:	76d0206f          	j	20402fdc <exit>

20400074 <_fini>:
	.globl _fini
	.type _init,@function
	.type _fini,@function
_init:
_fini:
	ret
20400074:	8082                	ret

Disassembly of section .text:

20400078 <_GLOBAL__sub_I_Serial>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
20400078:	800007b7          	lui	a5,0x80000
2040007c:	45c78793          	addi	a5,a5,1116 # 8000045c <_sp+0xffffc45c>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
20400080:	3e800713          	li	a4,1000
20400084:	c798                	sw	a4,8(a5)
#include "HardwareSerial.h"

class UARTClass : public HardwareSerial
{
  public:
    UARTClass(uint32_t base = UART0_BASE_ADDR ) : serbase(reinterpret_cast<uint8_t*>(base)) {}
20400086:	20404737          	lui	a4,0x20404
2040008a:	abc70713          	addi	a4,a4,-1348 # 20403abc <vtable for UARTClass+0x8>
2040008e:	c398                	sw	a4,0(a5)
20400090:	10013737          	lui	a4,0x10013
20400094:	0007a223          	sw	zero,4(a5)
20400098:	cb98                	sw	a4,16(a5)
UARTClass::write(const uint8_t uc_data)
{

  sio_putchar(uc_data, 1);
  return (1);
}
2040009a:	8082                	ret

2040009c <main>:
 */
int main( void )
{
  //	init();
  // Compute F_CPU inverse, used for millis and micros functions.
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
2040009c:	800005b7          	lui	a1,0x80000
204000a0:	6511                	lui	a0,0x4
{
204000a2:	1141                	addi	sp,sp,-16
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
204000a4:	48858593          	addi	a1,a1,1160 # 80000488 <_sp+0xffffc488>
204000a8:	e8050513          	addi	a0,a0,-384 # 3e80 <__stack_size+0x3680>
{
204000ac:	c606                	sw	ra,12(sp)
204000ae:	c422                	sw	s0,8(sp)
  calc_inv(F_CPU/1000, &f_cpu_1000_inv);
204000b0:	13d020ef          	jal	ra,204029ec <calc_inv>
  calc_inv(F_CPU/1000000, &f_cpu_1000000_inv);
204000b4:	800005b7          	lui	a1,0x80000
204000b8:	47c58593          	addi	a1,a1,1148 # 8000047c <_sp+0xffffc47c>
204000bc:	4541                	li	a0,16
204000be:	00000437          	lui	s0,0x0
204000c2:	12b020ef          	jal	ra,204029ec <calc_inv>
  freedom_e300_specific_initialization();
204000c6:	00040413          	mv	s0,s0
204000ca:	5e5020ef          	jal	ra,20402eae <freedom_e300_specific_initialization()>
  setup();
204000ce:	2a95                	jal	20400242 <setup>
  
  do {
    loop();
204000d0:	2ea5                	jal	20400448 <loop>
    if (serialEventRun)
204000d2:	dc7d                	beqz	s0,204000d0 <main+0x34>
      serialEventRun();
204000d4:	dfc00097          	auipc	ra,0xdfc00
204000d8:	f2c080e7          	jalr	-212(ra) # 0 <__stack_size-0x800>
    loop();
204000dc:	26b5                	jal	20400448 <loop>
    if (serialEventRun)
204000de:	f87d                	bnez	s0,204000d4 <main+0x38>
204000e0:	bfc5                	j	204000d0 <main+0x34>

204000e2 <Print::write(char const*, unsigned int)>:
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
204000e2:	1101                	addi	sp,sp,-32
204000e4:	ce06                	sw	ra,28(sp)
204000e6:	cc22                	sw	s0,24(sp)
204000e8:	1000                	addi	s0,sp,32
204000ea:	fea42623          	sw	a0,-20(s0) # ffffffec <_sp+0x7fffbfec>
204000ee:	feb42423          	sw	a1,-24(s0)
204000f2:	fec42223          	sw	a2,-28(s0)
      return write((const uint8_t *)buffer, size);
204000f6:	fec42783          	lw	a5,-20(s0)
204000fa:	439c                	lw	a5,0(a5)
204000fc:	0791                	addi	a5,a5,4
204000fe:	439c                	lw	a5,0(a5)
20400100:	fe442603          	lw	a2,-28(s0)
20400104:	fe842583          	lw	a1,-24(s0)
20400108:	fec42503          	lw	a0,-20(s0)
2040010c:	9782                	jalr	a5
2040010e:	87aa                	mv	a5,a0
    }
20400110:	853e                	mv	a0,a5
20400112:	838a                	mv	t2,sp
20400114:	40f2                	lw	ra,28(sp)
20400116:	4462                	lw	s0,24(sp)
20400118:	6105                	addi	sp,sp,32
2040011a:	8082                	ret

2040011c <datahex(char const*, unsigned int)>:
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// For parsing user input back into a value.
int conversion_error;

uint32_t datahex(const char* string, size_t slength) {
2040011c:	7139                	addi	sp,sp,-64
2040011e:	de22                	sw	s0,60(sp)
20400120:	0080                	addi	s0,sp,64
20400122:	fca42623          	sw	a0,-52(s0)
20400126:	fcb42423          	sw	a1,-56(s0)

    conversion_error = 0;
2040012a:	800007b7          	lui	a5,0x80000
2040012e:	4207ac23          	sw	zero,1080(a5) # 80000438 <_sp+0xffffc438>

    // must be 8 chars, null pointers bad news.
    if(string == NULL || slength != 8) {
20400132:	fcc42783          	lw	a5,-52(s0)
20400136:	c791                	beqz	a5,20400142 <datahex(char const*, unsigned int)+0x26>
20400138:	fc842703          	lw	a4,-56(s0)
2040013c:	47a1                	li	a5,8
2040013e:	00f70963          	beq	a4,a5,20400150 <datahex(char const*, unsigned int)+0x34>
      conversion_error = 1;
20400142:	800007b7          	lui	a5,0x80000
20400146:	4705                	li	a4,1
20400148:	42e7ac23          	sw	a4,1080(a5) # 80000438 <_sp+0xffffc438>
      return 0;
2040014c:	4781                	li	a5,0
2040014e:	a0ed                	j	20400238 <datahex(char const*, unsigned int)+0x11c>
    }

    uint32_t res = 0;
20400150:	fe042623          	sw	zero,-20(s0)

    size_t index = 0;
20400154:	fe042423          	sw	zero,-24(s0)
    while (index < slength) {
20400158:	fe842703          	lw	a4,-24(s0)
2040015c:	fc842783          	lw	a5,-56(s0)
20400160:	0cf77a63          	bleu	a5,a4,20400234 <datahex(char const*, unsigned int)+0x118>
        char c = string[index];
20400164:	fcc42703          	lw	a4,-52(s0)
20400168:	fe842783          	lw	a5,-24(s0)
2040016c:	97ba                	add	a5,a5,a4
2040016e:	0007c783          	lbu	a5,0(a5)
20400172:	fef401a3          	sb	a5,-29(s0)
        int value = 0;
20400176:	fe042223          	sw	zero,-28(s0)
        if(c >= '0' && c <= '9')
2040017a:	fe344703          	lbu	a4,-29(s0)
2040017e:	02f00793          	li	a5,47
20400182:	00e7ff63          	bleu	a4,a5,204001a0 <datahex(char const*, unsigned int)+0x84>
20400186:	fe344703          	lbu	a4,-29(s0)
2040018a:	03900793          	li	a5,57
2040018e:	00e7e963          	bltu	a5,a4,204001a0 <datahex(char const*, unsigned int)+0x84>
          value = (c - '0');
20400192:	fe344783          	lbu	a5,-29(s0)
20400196:	fd078793          	addi	a5,a5,-48
2040019a:	fef42223          	sw	a5,-28(s0)
2040019e:	a8b1                	j	204001fa <datahex(char const*, unsigned int)+0xde>
        else if (c >= 'A' && c <= 'F')
204001a0:	fe344703          	lbu	a4,-29(s0)
204001a4:	04000793          	li	a5,64
204001a8:	00e7ff63          	bleu	a4,a5,204001c6 <datahex(char const*, unsigned int)+0xaa>
204001ac:	fe344703          	lbu	a4,-29(s0)
204001b0:	04600793          	li	a5,70
204001b4:	00e7e963          	bltu	a5,a4,204001c6 <datahex(char const*, unsigned int)+0xaa>
          value = (10 + (c - 'A'));
204001b8:	fe344783          	lbu	a5,-29(s0)
204001bc:	fc978793          	addi	a5,a5,-55
204001c0:	fef42223          	sw	a5,-28(s0)
204001c4:	a81d                	j	204001fa <datahex(char const*, unsigned int)+0xde>
        else if (c >= 'a' && c <= 'f')
204001c6:	fe344703          	lbu	a4,-29(s0)
204001ca:	06000793          	li	a5,96
204001ce:	00e7ff63          	bleu	a4,a5,204001ec <datahex(char const*, unsigned int)+0xd0>
204001d2:	fe344703          	lbu	a4,-29(s0)
204001d6:	06600793          	li	a5,102
204001da:	00e7e963          	bltu	a5,a4,204001ec <datahex(char const*, unsigned int)+0xd0>
          value = (10 + (c - 'a'));
204001de:	fe344783          	lbu	a5,-29(s0)
204001e2:	fa978793          	addi	a5,a5,-87
204001e6:	fef42223          	sw	a5,-28(s0)
204001ea:	a801                	j	204001fa <datahex(char const*, unsigned int)+0xde>
        else {
          // non-hex digit
          conversion_error = 1;
204001ec:	800007b7          	lui	a5,0x80000
204001f0:	4705                	li	a4,1
204001f2:	42e7ac23          	sw	a4,1080(a5) # 80000438 <_sp+0xffffc438>
          return 0;
204001f6:	4781                	li	a5,0
204001f8:	a081                	j	20400238 <datahex(char const*, unsigned int)+0x11c>
        }

        uint32_t shift =  ((7 - index) * 4);
204001fa:	fe842703          	lw	a4,-24(s0)
204001fe:	4781                	li	a5,0
20400200:	8f99                	sub	a5,a5,a4
20400202:	078a                	slli	a5,a5,0x2
20400204:	07f1                	addi	a5,a5,28
20400206:	fcf42e23          	sw	a5,-36(s0)
        uint32_t addition = value << shift;
2040020a:	fe442703          	lw	a4,-28(s0)
2040020e:	fdc42783          	lw	a5,-36(s0)
20400212:	00f717b3          	sll	a5,a4,a5
20400216:	fcf42c23          	sw	a5,-40(s0)
        res = res | addition;
2040021a:	fec42703          	lw	a4,-20(s0)
2040021e:	fd842783          	lw	a5,-40(s0)
20400222:	8fd9                	or	a5,a5,a4
20400224:	fef42623          	sw	a5,-20(s0)

        index++;
20400228:	fe842783          	lw	a5,-24(s0)
2040022c:	0785                	addi	a5,a5,1
2040022e:	fef42423          	sw	a5,-24(s0)
    while (index < slength) {
20400232:	b71d                	j	20400158 <datahex(char const*, unsigned int)+0x3c>
    }

    return res;
20400234:	fec42783          	lw	a5,-20(s0)
}
20400238:	853e                	mv	a0,a5
2040023a:	838a                	mv	t2,sp
2040023c:	5472                	lw	s0,60(sp)
2040023e:	6121                	addi	sp,sp,64
20400240:	8082                	ret

20400242 <setup>:


extern "C"
void setup() {
20400242:	1141                	addi	sp,sp,-16
20400244:	c606                	sw	ra,12(sp)
20400246:	c422                	sw	s0,8(sp)
20400248:	0800                	addi	s0,sp,16
  
  pinMode(buttonPin, INPUT);
2040024a:	4581                	li	a1,0
2040024c:	4519                	li	a0,6
2040024e:	06f020ef          	jal	ra,20402abc <pinMode>
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
20400252:	4681                	li	a3,0
20400254:	4609                	li	a2,2
20400256:	45c1                	li	a1,16
20400258:	800007b7          	lui	a5,0x80000
2040025c:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400260:	2961                	jal	204006f8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
  // Print a message to the LCD.
  lcd.print("Stack Erase demo");
20400262:	204047b7          	lui	a5,0x20404
20400266:	9d078593          	addi	a1,a5,-1584 # 204039d0 <__divdi3+0x480>
2040026a:	800007b7          	lui	a5,0x80000
2040026e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400272:	18f020ef          	jal	ra,20402c00 <Print::print(char const*)>

  Serial.begin(9600);
20400276:	6789                	lui	a5,0x2
20400278:	58078593          	addi	a1,a5,1408 # 2580 <__stack_size+0x1d80>
2040027c:	800007b7          	lui	a5,0x80000
20400280:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400284:	29d020ef          	jal	ra,20402d20 <UARTClass::begin(unsigned long)>
}
20400288:	0001                	nop
2040028a:	838a                	mv	t2,sp
2040028c:	40b2                	lw	ra,12(sp)
2040028e:	4422                	lw	s0,8(sp)
20400290:	0141                	addi	sp,sp,16
20400292:	8082                	ret

20400294 <correctInput(char const*, unsigned int)>:
bool locked = true;

// Uncomment to protect function with stack erase
//__attribute__((stack_erase))
bool correctInput(const char* recvBuf, size_t buflen)
{
20400294:	7179                	addi	sp,sp,-48
20400296:	d606                	sw	ra,44(sp)
20400298:	d422                	sw	s0,40(sp)
2040029a:	1800                	addi	s0,sp,48
2040029c:	fca42e23          	sw	a0,-36(s0)
204002a0:	fcb42c23          	sw	a1,-40(s0)
  uint32_t K_try = datahex(recvBuf, buflen);
204002a4:	fd842583          	lw	a1,-40(s0)
204002a8:	fdc42503          	lw	a0,-36(s0)
204002ac:	3d85                	jal	2040011c <datahex(char const*, unsigned int)>
204002ae:	fea42623          	sw	a0,-20(s0)
  uint32_t K_correct = K;
204002b2:	800007b7          	lui	a5,0x80000
204002b6:	43c7a783          	lw	a5,1084(a5) # 8000043c <_sp+0xffffc43c>
204002ba:	fef42423          	sw	a5,-24(s0)

  if (conversion_error)
204002be:	800007b7          	lui	a5,0x80000
204002c2:	4387a783          	lw	a5,1080(a5) # 80000438 <_sp+0xffffc438>
204002c6:	c399                	beqz	a5,204002cc <correctInput(char const*, unsigned int)+0x38>
    return false;
204002c8:	4781                	li	a5,0
204002ca:	a819                	j	204002e0 <correctInput(char const*, unsigned int)+0x4c>

  return K_correct == K_try;
204002cc:	fe842703          	lw	a4,-24(s0)
204002d0:	fec42783          	lw	a5,-20(s0)
204002d4:	40f707b3          	sub	a5,a4,a5
204002d8:	0017b793          	seqz	a5,a5
204002dc:	0ff7f793          	andi	a5,a5,255
}
204002e0:	853e                	mv	a0,a5
204002e2:	838a                	mv	t2,sp
204002e4:	50b2                	lw	ra,44(sp)
204002e6:	5422                	lw	s0,40(sp)
204002e8:	6145                	addi	sp,sp,48
204002ea:	8082                	ret

204002ec <readSerialBuf()>:

char * readSerialBuf() {
204002ec:	1101                	addi	sp,sp,-32
204002ee:	ce06                	sw	ra,28(sp)
204002f0:	cc22                	sw	s0,24(sp)
204002f2:	1000                	addi	s0,sp,32
  char buf[8];
  uint32_t bufLoc = 0;
204002f4:	fe042623          	sw	zero,-20(s0)
  while (true) {
    if (Serial.available()) {
204002f8:	800007b7          	lui	a5,0x80000
204002fc:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400300:	299020ef          	jal	ra,20402d98 <UARTClass::available()>
20400304:	87aa                	mv	a5,a0
20400306:	00f037b3          	snez	a5,a5
2040030a:	0ff7f793          	andi	a5,a5,255
2040030e:	d7ed                	beqz	a5,204002f8 <readSerialBuf()+0xc>
      lcd.setCursor(10,0);
20400310:	4601                	li	a2,0
20400312:	45a9                	li	a1,10
20400314:	800007b7          	lui	a5,0x80000
20400318:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
2040031c:	2e9010ef          	jal	ra,20401e04 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
      lcd.print(bufLoc);
20400320:	4629                	li	a2,10
20400322:	fec42583          	lw	a1,-20(s0)
20400326:	800007b7          	lui	a5,0x80000
2040032a:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
2040032e:	1db020ef          	jal	ra,20402d08 <Print::print(unsigned long, int)>
      buf[bufLoc] = Serial.read();
20400332:	800007b7          	lui	a5,0x80000
20400336:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
2040033a:	2ed020ef          	jal	ra,20402e26 <UARTClass::read()>
2040033e:	87aa                	mv	a5,a0
20400340:	0ff7f713          	andi	a4,a5,255
20400344:	fec42783          	lw	a5,-20(s0)
20400348:	ff040693          	addi	a3,s0,-16
2040034c:	97b6                	add	a5,a5,a3
2040034e:	fee78823          	sb	a4,-16(a5)
      if (buf[bufLoc] == '\n') {
20400352:	fec42783          	lw	a5,-20(s0)
20400356:	ff040713          	addi	a4,s0,-16
2040035a:	97ba                	add	a5,a5,a4
2040035c:	ff07c703          	lbu	a4,-16(a5)
20400360:	47a9                	li	a5,10
20400362:	02f71f63          	bne	a4,a5,204003a0 <readSerialBuf()+0xb4>
        Serial.write(buf, bufLoc+1);
20400366:	fec42783          	lw	a5,-20(s0)
2040036a:	00178713          	addi	a4,a5,1
2040036e:	fe040793          	addi	a5,s0,-32
20400372:	863a                	mv	a2,a4
20400374:	85be                	mv	a1,a5
20400376:	800007b7          	lui	a5,0x80000
2040037a:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
2040037e:	3395                	jal	204000e2 <Print::write(char const*, unsigned int)>
        char * retBuf = (char *) malloc(8*sizeof(char));
20400380:	4521                	li	a0,8
20400382:	620020ef          	jal	ra,204029a2 <__wrap_malloc>
20400386:	fea42423          	sw	a0,-24(s0)
        strncpy(retBuf, buf, (8*sizeof(char)));
2040038a:	fe040793          	addi	a5,s0,-32
2040038e:	4621                	li	a2,8
20400390:	85be                	mv	a1,a5
20400392:	fe842503          	lw	a0,-24(s0)
20400396:	6e7020ef          	jal	ra,2040327c <strncpy>
        return retBuf;
2040039a:	fe842783          	lw	a5,-24(s0)
2040039e:	a039                	j	204003ac <readSerialBuf()+0xc0>
      }
      bufLoc++;
204003a0:	fec42783          	lw	a5,-20(s0)
204003a4:	0785                	addi	a5,a5,1
204003a6:	fef42623          	sw	a5,-20(s0)
    }
  }
204003aa:	b7b9                	j	204002f8 <readSerialBuf()+0xc>
}
204003ac:	853e                	mv	a0,a5
204003ae:	838a                	mv	t2,sp
204003b0:	40f2                	lw	ra,28(sp)
204003b2:	4462                	lw	s0,24(sp)
204003b4:	6105                	addi	sp,sp,32
204003b6:	8082                	ret

204003b8 <doSerial()>:


void doSerial() {
204003b8:	1101                	addi	sp,sp,-32
204003ba:	ce06                	sw	ra,28(sp)
204003bc:	cc22                	sw	s0,24(sp)
204003be:	1000                	addi	s0,sp,32
  Serial.print("Enter code: ");
204003c0:	204047b7          	lui	a5,0x20404
204003c4:	9e478593          	addi	a1,a5,-1564 # 204039e4 <__divdi3+0x494>
204003c8:	800007b7          	lui	a5,0x80000
204003cc:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
204003d0:	031020ef          	jal	ra,20402c00 <Print::print(char const*)>
  char * recvBuf = readSerialBuf();
204003d4:	3f21                	jal	204002ec <readSerialBuf()>
204003d6:	fea42623          	sw	a0,-20(s0)
  if (correctInput(recvBuf, 8)) {
204003da:	45a1                	li	a1,8
204003dc:	fec42503          	lw	a0,-20(s0)
204003e0:	3d55                	jal	20400294 <correctInput(char const*, unsigned int)>
204003e2:	87aa                	mv	a5,a0
204003e4:	c3b1                	beqz	a5,20400428 <doSerial()+0x70>
    locked = false;
204003e6:	800007b7          	lui	a5,0x80000
204003ea:	42078623          	sb	zero,1068(a5) # 8000042c <_sp+0xffffc42c>
    Serial.print("Unlocking...\n");
204003ee:	204047b7          	lui	a5,0x20404
204003f2:	9f478593          	addi	a1,a5,-1548 # 204039f4 <__divdi3+0x4a4>
204003f6:	800007b7          	lui	a5,0x80000
204003fa:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
204003fe:	003020ef          	jal	ra,20402c00 <Print::print(char const*)>
    lcd.setCursor(0, 0);
20400402:	4601                	li	a2,0
20400404:	4581                	li	a1,0
20400406:	800007b7          	lui	a5,0x80000
2040040a:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
2040040e:	1f7010ef          	jal	ra,20401e04 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    lcd.print("UNLOCKED             ");
20400412:	204047b7          	lui	a5,0x20404
20400416:	a0478593          	addi	a1,a5,-1532 # 20403a04 <__divdi3+0x4b4>
2040041a:	800007b7          	lui	a5,0x80000
2040041e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
20400422:	7de020ef          	jal	ra,20402c00 <Print::print(char const*)>
20400426:	a821                	j	2040043e <doSerial()+0x86>
  } else {
    Serial.println("Incorrect code...");
20400428:	204047b7          	lui	a5,0x20404
2040042c:	a1c78593          	addi	a1,a5,-1508 # 20403a1c <__divdi3+0x4cc>
20400430:	800007b7          	lui	a5,0x80000
20400434:	45c78513          	addi	a0,a5,1116 # 8000045c <_sp+0xffffc45c>
20400438:	7fa020ef          	jal	ra,20402c32 <Print::println(char const*)>
    return;
2040043c:	0001                	nop
  }
}
2040043e:	838a                	mv	t2,sp
20400440:	40f2                	lw	ra,28(sp)
20400442:	4462                	lw	s0,24(sp)
20400444:	6105                	addi	sp,sp,32
20400446:	8082                	ret

20400448 <loop>:

extern "C"
void loop() {
20400448:	1101                	addi	sp,sp,-32
2040044a:	ce06                	sw	ra,28(sp)
2040044c:	cc22                	sw	s0,24(sp)
2040044e:	1000                	addi	s0,sp,32
  unsigned int state = digitalRead(buttonPin);
20400450:	4519                	li	a0,6
20400452:	72a020ef          	jal	ra,20402b7c <digitalRead>
20400456:	87aa                	mv	a5,a0
20400458:	fef42623          	sw	a5,-20(s0)
  if (state == LOW) {
2040045c:	fec42783          	lw	a5,-20(s0)
20400460:	e7bd                	bnez	a5,204004ce <loop+0x86>
    randomSeed(millis());
20400462:	636020ef          	jal	ra,20402a98 <millis>
20400466:	87aa                	mv	a5,a0
20400468:	853e                	mv	a0,a5
2040046a:	23d020ef          	jal	ra,20402ea6 <randomSeed(unsigned long)>
    K = random(); 
2040046e:	527020ef          	jal	ra,20403194 <random>
20400472:	87aa                	mv	a5,a0
20400474:	873e                	mv	a4,a5
20400476:	800007b7          	lui	a5,0x80000
2040047a:	42e7ae23          	sw	a4,1084(a5) # 8000043c <_sp+0xffffc43c>
	lcd.setCursor(0, 1);
2040047e:	4605                	li	a2,1
20400480:	4581                	li	a1,0
20400482:	800007b7          	lui	a5,0x80000
20400486:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
2040048a:	17b010ef          	jal	ra,20401e04 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    lcd.print(K, HEX);
2040048e:	800007b7          	lui	a5,0x80000
20400492:	43c7a783          	lw	a5,1084(a5) # 8000043c <_sp+0xffffc43c>
20400496:	4641                	li	a2,16
20400498:	85be                	mv	a1,a5
2040049a:	800007b7          	lui	a5,0x80000
2040049e:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004a2:	067020ef          	jal	ra,20402d08 <Print::print(unsigned long, int)>

    lcd.setCursor(0, 0);
204004a6:	4601                	li	a2,0
204004a8:	4581                	li	a1,0
204004aa:	800007b7          	lui	a5,0x80000
204004ae:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004b2:	153010ef          	jal	ra,20401e04 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    lcd.print("LOCKED          ");
204004b6:	204047b7          	lui	a5,0x20404
204004ba:	a3078593          	addi	a1,a5,-1488 # 20403a30 <__divdi3+0x4e0>
204004be:	800007b7          	lui	a5,0x80000
204004c2:	44078513          	addi	a0,a5,1088 # 80000440 <_sp+0xffffc440>
204004c6:	73a020ef          	jal	ra,20402c00 <Print::print(char const*)>
    while (true) { doSerial(); }
204004ca:	35fd                	jal	204003b8 <doSerial()>
204004cc:	bffd                	j	204004ca <loop+0x82>
  }
}
204004ce:	0001                	nop
204004d0:	838a                	mv	t2,sp
204004d2:	40f2                	lw	ra,28(sp)
204004d4:	4462                	lw	s0,24(sp)
204004d6:	6105                	addi	sp,sp,32
204004d8:	8082                	ret

204004da <__static_initialization_and_destruction_0(int, int)>:
204004da:	1101                	addi	sp,sp,-32
204004dc:	ce06                	sw	ra,28(sp)
204004de:	cc22                	sw	s0,24(sp)
204004e0:	1000                	addi	s0,sp,32
204004e2:	fea42623          	sw	a0,-20(s0)
204004e6:	feb42423          	sw	a1,-24(s0)
204004ea:	fec42703          	lw	a4,-20(s0)
204004ee:	4785                	li	a5,1
204004f0:	02f71363          	bne	a4,a5,20400516 <__static_initialization_and_destruction_0(int, int)+0x3c>
204004f4:	fe842703          	lw	a4,-24(s0)
204004f8:	67c1                	lui	a5,0x10
204004fa:	17fd                	addi	a5,a5,-1
204004fc:	00f71d63          	bne	a4,a5,20400516 <__static_initialization_and_destruction_0(int, int)+0x3c>
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
20400500:	4809                	li	a6,2
20400502:	478d                	li	a5,3
20400504:	4711                	li	a4,4
20400506:	4695                	li	a3,5
20400508:	462d                	li	a2,11
2040050a:	45b1                	li	a1,12
2040050c:	80000537          	lui	a0,0x80000
20400510:	44050513          	addi	a0,a0,1088 # 80000440 <_sp+0xffffc440>
20400514:	2891                	jal	20400568 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
20400516:	0001                	nop
20400518:	838a                	mv	t2,sp
2040051a:	40f2                	lw	ra,28(sp)
2040051c:	4462                	lw	s0,24(sp)
2040051e:	6105                	addi	sp,sp,32
20400520:	8082                	ret

20400522 <_GLOBAL__sub_I_lcd>:
20400522:	1141                	addi	sp,sp,-16
20400524:	c606                	sw	ra,12(sp)
20400526:	c422                	sw	s0,8(sp)
20400528:	0800                	addi	s0,sp,16
2040052a:	67c1                	lui	a5,0x10
2040052c:	fff78593          	addi	a1,a5,-1 # ffff <__stack_size+0xf7ff>
20400530:	4505                	li	a0,1
20400532:	3765                	jal	204004da <__static_initialization_and_destruction_0(int, int)>
20400534:	838a                	mv	t2,sp
20400536:	40b2                	lw	ra,12(sp)
20400538:	4422                	lw	s0,8(sp)
2040053a:	0141                	addi	sp,sp,16
2040053c:	8082                	ret

2040053e <Print::Print()>:
    Print() : write_error(0) {}
2040053e:	1101                	addi	sp,sp,-32
20400540:	ce22                	sw	s0,28(sp)
20400542:	1000                	addi	s0,sp,32
20400544:	fea42623          	sw	a0,-20(s0)
20400548:	204047b7          	lui	a5,0x20404
2040054c:	aac78713          	addi	a4,a5,-1364 # 20403aac <vtable for Print+0x8>
20400550:	fec42783          	lw	a5,-20(s0)
20400554:	c398                	sw	a4,0(a5)
20400556:	fec42783          	lw	a5,-20(s0)
2040055a:	0007a223          	sw	zero,4(a5)
2040055e:	0001                	nop
20400560:	838a                	mv	t2,sp
20400562:	4472                	lw	s0,28(sp)
20400564:	6105                	addi	sp,sp,32
20400566:	8082                	ret

20400568 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
20400568:	fc810113          	addi	sp,sp,-56
2040056c:	da06                	sw	ra,52(sp)
2040056e:	d822                	sw	s0,48(sp)
20400570:	1820                	addi	s0,sp,56
20400572:	fea42623          	sw	a0,-20(s0)
20400576:	88ae                	mv	a7,a1
20400578:	8532                	mv	a0,a2
2040057a:	85b6                	mv	a1,a3
2040057c:	863a                	mv	a2,a4
2040057e:	86be                	mv	a3,a5
20400580:	8742                	mv	a4,a6
20400582:	87c6                	mv	a5,a7
20400584:	fef405a3          	sb	a5,-21(s0)
20400588:	87aa                	mv	a5,a0
2040058a:	fef40523          	sb	a5,-22(s0)
2040058e:	87ae                	mv	a5,a1
20400590:	fef404a3          	sb	a5,-23(s0)
20400594:	87b2                	mv	a5,a2
20400596:	fef40423          	sb	a5,-24(s0)
2040059a:	87b6                	mv	a5,a3
2040059c:	fef403a3          	sb	a5,-25(s0)
204005a0:	87ba                	mv	a5,a4
204005a2:	fef40323          	sb	a5,-26(s0)
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
204005a6:	fec42783          	lw	a5,-20(s0)
204005aa:	853e                	mv	a0,a5
204005ac:	3f49                	jal	2040053e <Print::Print()>
204005ae:	204047b7          	lui	a5,0x20404
204005b2:	a4c78713          	addi	a4,a5,-1460 # 20403a4c <vtable for LiquidCrystal+0x8>
204005b6:	fec42783          	lw	a5,-20(s0)
204005ba:	c398                	sw	a4,0(a5)
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
204005bc:	fe744503          	lbu	a0,-25(s0)
204005c0:	fe844583          	lbu	a1,-24(s0)
204005c4:	fe944683          	lbu	a3,-23(s0)
204005c8:	fea44703          	lbu	a4,-22(s0)
204005cc:	feb44603          	lbu	a2,-21(s0)
204005d0:	c802                	sw	zero,16(sp)
204005d2:	c602                	sw	zero,12(sp)
204005d4:	c402                	sw	zero,8(sp)
204005d6:	c202                	sw	zero,4(sp)
204005d8:	fe644783          	lbu	a5,-26(s0)
204005dc:	c03e                	sw	a5,0(sp)
204005de:	88aa                	mv	a7,a0
204005e0:	882e                	mv	a6,a1
204005e2:	87b6                	mv	a5,a3
204005e4:	0ff00693          	li	a3,255
204005e8:	4585                	li	a1,1
204005ea:	fec42503          	lw	a0,-20(s0)
204005ee:	2801                	jal	204005fe <LiquidCrystal::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
204005f0:	0001                	nop
204005f2:	838a                	mv	t2,sp
204005f4:	50d2                	lw	ra,52(sp)
204005f6:	5442                	lw	s0,48(sp)
204005f8:	03810113          	addi	sp,sp,56
204005fc:	8082                	ret

204005fe <LiquidCrystal::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
204005fe:	1101                	addi	sp,sp,-32
20400600:	ce06                	sw	ra,28(sp)
20400602:	cc22                	sw	s0,24(sp)
20400604:	1000                	addi	s0,sp,32
20400606:	fea42623          	sw	a0,-20(s0)
2040060a:	8e2e                	mv	t3,a1
2040060c:	8332                	mv	t1,a2
2040060e:	8536                	mv	a0,a3
20400610:	85ba                	mv	a1,a4
20400612:	863e                	mv	a2,a5
20400614:	86c2                	mv	a3,a6
20400616:	8746                	mv	a4,a7
20400618:	87f2                	mv	a5,t3
2040061a:	fef405a3          	sb	a5,-21(s0)
2040061e:	879a                	mv	a5,t1
20400620:	fef40523          	sb	a5,-22(s0)
20400624:	87aa                	mv	a5,a0
20400626:	fef404a3          	sb	a5,-23(s0)
2040062a:	87ae                	mv	a5,a1
2040062c:	fef40423          	sb	a5,-24(s0)
20400630:	87b2                	mv	a5,a2
20400632:	fef403a3          	sb	a5,-25(s0)
20400636:	87b6                	mv	a5,a3
20400638:	fef40323          	sb	a5,-26(s0)
2040063c:	87ba                	mv	a5,a4
2040063e:	fef402a3          	sb	a5,-27(s0)
  _rs_pin = rs;
20400642:	fec42783          	lw	a5,-20(s0)
20400646:	fea44703          	lbu	a4,-22(s0)
2040064a:	00e78423          	sb	a4,8(a5)
  _rw_pin = rw;
2040064e:	fec42783          	lw	a5,-20(s0)
20400652:	fe944703          	lbu	a4,-23(s0)
20400656:	00e784a3          	sb	a4,9(a5)
  _enable_pin = enable;
2040065a:	fec42783          	lw	a5,-20(s0)
2040065e:	fe844703          	lbu	a4,-24(s0)
20400662:	00e78523          	sb	a4,10(a5)
  
  _data_pins[0] = d0;
20400666:	fec42783          	lw	a5,-20(s0)
2040066a:	fe744703          	lbu	a4,-25(s0)
2040066e:	00e785a3          	sb	a4,11(a5)
  _data_pins[1] = d1;
20400672:	fec42783          	lw	a5,-20(s0)
20400676:	fe644703          	lbu	a4,-26(s0)
2040067a:	00e78623          	sb	a4,12(a5)
  _data_pins[2] = d2;
2040067e:	fec42783          	lw	a5,-20(s0)
20400682:	fe544703          	lbu	a4,-27(s0)
20400686:	00e786a3          	sb	a4,13(a5)
  _data_pins[3] = d3; 
2040068a:	fec42783          	lw	a5,-20(s0)
2040068e:	00044703          	lbu	a4,0(s0)
20400692:	00e78723          	sb	a4,14(a5)
  _data_pins[4] = d4;
20400696:	fec42783          	lw	a5,-20(s0)
2040069a:	00444703          	lbu	a4,4(s0)
2040069e:	00e787a3          	sb	a4,15(a5)
  _data_pins[5] = d5;
204006a2:	fec42783          	lw	a5,-20(s0)
204006a6:	00844703          	lbu	a4,8(s0)
204006aa:	00e78823          	sb	a4,16(a5)
  _data_pins[6] = d6;
204006ae:	fec42783          	lw	a5,-20(s0)
204006b2:	00c44703          	lbu	a4,12(s0)
204006b6:	00e788a3          	sb	a4,17(a5)
  _data_pins[7] = d7; 
204006ba:	fec42783          	lw	a5,-20(s0)
204006be:	01044703          	lbu	a4,16(s0)
204006c2:	00e78923          	sb	a4,18(a5)

  if (fourbitmode)
204006c6:	feb44783          	lbu	a5,-21(s0)
204006ca:	c791                	beqz	a5,204006d6 <LiquidCrystal::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd8>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
204006cc:	fec42783          	lw	a5,-20(s0)
204006d0:	000789a3          	sb	zero,19(a5)
204006d4:	a031                	j	204006e0 <LiquidCrystal::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
204006d6:	fec42783          	lw	a5,-20(s0)
204006da:	4741                	li	a4,16
204006dc:	00e789a3          	sb	a4,19(a5)
  
  begin(16, 1);  
204006e0:	4681                	li	a3,0
204006e2:	4605                	li	a2,1
204006e4:	45c1                	li	a1,16
204006e6:	fec42503          	lw	a0,-20(s0)
204006ea:	2039                	jal	204006f8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
}
204006ec:	0001                	nop
204006ee:	838a                	mv	t2,sp
204006f0:	40f2                	lw	ra,28(sp)
204006f2:	4462                	lw	s0,24(sp)
204006f4:	6105                	addi	sp,sp,32
204006f6:	8082                	ret

204006f8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
204006f8:	ad010113          	addi	sp,sp,-1328
204006fc:	52112623          	sw	ra,1324(sp)
20400700:	52812423          	sw	s0,1320(sp)
20400704:	53212223          	sw	s2,1316(sp)
20400708:	53312023          	sw	s3,1312(sp)
2040070c:	51412e23          	sw	s4,1308(sp)
20400710:	51512c23          	sw	s5,1304(sp)
20400714:	51612a23          	sw	s6,1300(sp)
20400718:	51712823          	sw	s7,1296(sp)
2040071c:	51812623          	sw	s8,1292(sp)
20400720:	51912423          	sw	s9,1288(sp)
20400724:	51a12223          	sw	s10,1284(sp)
20400728:	51b12023          	sw	s11,1280(sp)
2040072c:	53010413          	addi	s0,sp,1328
20400730:	e0a42623          	sw	a0,-500(s0)
20400734:	87ae                	mv	a5,a1
20400736:	8732                	mv	a4,a2
20400738:	e0f405a3          	sb	a5,-501(s0)
2040073c:	87ba                	mv	a5,a4
2040073e:	e0f40523          	sb	a5,-502(s0)
20400742:	87b6                	mv	a5,a3
20400744:	e0f404a3          	sb	a5,-503(s0)
  if (lines > 1) {
20400748:	e0a44703          	lbu	a4,-502(s0)
2040074c:	4785                	li	a5,1
2040074e:	00e7fe63          	bleu	a4,a5,2040076a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72>
    _displayfunction |= LCD_2LINE;
20400752:	e0c42783          	lw	a5,-500(s0)
20400756:	0137c783          	lbu	a5,19(a5)
2040075a:	0087e793          	ori	a5,a5,8
2040075e:	0ff7f713          	andi	a4,a5,255
20400762:	e0c42783          	lw	a5,-500(s0)
20400766:	00e789a3          	sb	a4,19(a5)
  }
  _numlines = lines;
2040076a:	e0c42703          	lw	a4,-500(s0)
2040076e:	e0a44783          	lbu	a5,-502(s0)
20400772:	00f70ba3          	sb	a5,23(a4) # 10013017 <__stack_size+0x10012817>

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
20400776:	e0b44683          	lbu	a3,-501(s0)
2040077a:	e0b44783          	lbu	a5,-501(s0)
2040077e:	04078793          	addi	a5,a5,64
20400782:	873e                	mv	a4,a5
20400784:	04000613          	li	a2,64
20400788:	4581                	li	a1,0
2040078a:	e0c42503          	lw	a0,-500(s0)
2040078e:	32c010ef          	jal	ra,20401aba <LiquidCrystal::setRowOffsets(int, int, int, int)>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
20400792:	e0944783          	lbu	a5,-503(s0)
20400796:	c395                	beqz	a5,204007ba <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc2>
20400798:	e0a44703          	lbu	a4,-502(s0)
2040079c:	4785                	li	a5,1
2040079e:	00f71e63          	bne	a4,a5,204007ba <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc2>
    _displayfunction |= LCD_5x10DOTS;
204007a2:	e0c42783          	lw	a5,-500(s0)
204007a6:	0137c783          	lbu	a5,19(a5)
204007aa:	0047e793          	ori	a5,a5,4
204007ae:	0ff7f713          	andi	a4,a5,255
204007b2:	e0c42783          	lw	a5,-500(s0)
204007b6:	00e789a3          	sb	a4,19(a5)
  }

  pinMode(_rs_pin, OUTPUT);
204007ba:	e0c42783          	lw	a5,-500(s0)
204007be:	0087c783          	lbu	a5,8(a5)
204007c2:	4585                	li	a1,1
204007c4:	853e                	mv	a0,a5
204007c6:	2f6020ef          	jal	ra,20402abc <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
204007ca:	e0c42783          	lw	a5,-500(s0)
204007ce:	0097c703          	lbu	a4,9(a5)
204007d2:	0ff00793          	li	a5,255
204007d6:	00f70a63          	beq	a4,a5,204007ea <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf2>
    pinMode(_rw_pin, OUTPUT);
204007da:	e0c42783          	lw	a5,-500(s0)
204007de:	0097c783          	lbu	a5,9(a5)
204007e2:	4585                	li	a1,1
204007e4:	853e                	mv	a0,a5
204007e6:	2d6020ef          	jal	ra,20402abc <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
204007ea:	e0c42783          	lw	a5,-500(s0)
204007ee:	00a7c783          	lbu	a5,10(a5)
204007f2:	4585                	li	a1,1
204007f4:	853e                	mv	a0,a5
204007f6:	2c6020ef          	jal	ra,20402abc <pinMode>
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
204007fa:	fc042623          	sw	zero,-52(s0)
204007fe:	e0c42783          	lw	a5,-500(s0)
20400802:	0137c783          	lbu	a5,19(a5)
20400806:	8bc1                	andi	a5,a5,16
20400808:	c399                	beqz	a5,2040080e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x116>
2040080a:	4721                	li	a4,8
2040080c:	a011                	j	20400810 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x118>
2040080e:	4711                	li	a4,4
20400810:	fcc42783          	lw	a5,-52(s0)
20400814:	02e7d363          	ble	a4,a5,2040083a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x142>
  {
    pinMode(_data_pins[i], OUTPUT);
20400818:	e0c42703          	lw	a4,-500(s0)
2040081c:	fcc42783          	lw	a5,-52(s0)
20400820:	97ba                	add	a5,a5,a4
20400822:	00b7c783          	lbu	a5,11(a5)
20400826:	4585                	li	a1,1
20400828:	853e                	mv	a0,a5
2040082a:	292020ef          	jal	ra,20402abc <pinMode>
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
2040082e:	fcc42783          	lw	a5,-52(s0)
20400832:	0785                	addi	a5,a5,1
20400834:	fcf42623          	sw	a5,-52(s0)
20400838:	b7d9                	j	204007fe <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x106>
2040083a:	67b1                	lui	a5,0xc
2040083c:	35078793          	addi	a5,a5,848 # c350 <__stack_size+0xbb50>
20400840:	fcf42423          	sw	a5,-56(s0)
 * \param dwUs the number of microseconds to pause (uint32_t)
 */

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec) {
  if (usec == 0) {
20400844:	fc842783          	lw	a5,-56(s0)
20400848:	28078b63          	beqz	a5,20400ade <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x3e6>
    return;
  }
  // TODO: Short delays at low frequencies.
  uint64_t current, later;
  rdmcycle(&current);
2040084c:	b80027f3          	csrr	a5,mcycleh
20400850:	b0002773          	csrr	a4,mcycle
20400854:	b80026f3          	csrr	a3,mcycleh
20400858:	fed79ae3          	bne	a5,a3,2040084c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x154>
2040085c:	fcf42223          	sw	a5,-60(s0)
20400860:	fce42023          	sw	a4,-64(s0)
20400864:	fad42e23          	sw	a3,-68(s0)
20400868:	fc042783          	lw	a5,-64(s0)
2040086c:	8c3e                	mv	s8,a5
2040086e:	4c81                	li	s9,0
20400870:	fc442783          	lw	a5,-60(s0)
20400874:	dcf42c23          	sw	a5,-552(s0)
20400878:	dc042e23          	sw	zero,-548(s0)
2040087c:	dd842783          	lw	a5,-552(s0)
20400880:	00079a93          	slli	s5,a5,0x0
20400884:	4a01                	li	s4,0
20400886:	014c67b3          	or	a5,s8,s4
2040088a:	dcf42823          	sw	a5,-560(s0)
2040088e:	015ce7b3          	or	a5,s9,s5
20400892:	dcf42a23          	sw	a5,-556(s0)
20400896:	dd042783          	lw	a5,-560(s0)
2040089a:	dd442803          	lw	a6,-556(s0)
2040089e:	e0f42c23          	sw	a5,-488(s0)
204008a2:	e1042e23          	sw	a6,-484(s0)
  later = current + usec * (F_CPU/1000000);
204008a6:	fc842783          	lw	a5,-56(s0)
204008aa:	8b3e                	mv	s6,a5
204008ac:	4b81                	li	s7,0
204008ae:	01cb5793          	srli	a5,s6,0x1c
204008b2:	004b9993          	slli	s3,s7,0x4
204008b6:	0137e9b3          	or	s3,a5,s3
204008ba:	004b1913          	slli	s2,s6,0x4
204008be:	87ca                	mv	a5,s2
204008c0:	884e                	mv	a6,s3
204008c2:	e1842683          	lw	a3,-488(s0)
204008c6:	e1c42703          	lw	a4,-484(s0)
204008ca:	00d78533          	add	a0,a5,a3
204008ce:	862a                	mv	a2,a0
204008d0:	00f63633          	sltu	a2,a2,a5
204008d4:	00e805b3          	add	a1,a6,a4
204008d8:	00b607b3          	add	a5,a2,a1
204008dc:	85be                	mv	a1,a5
204008de:	faa42823          	sw	a0,-80(s0)
204008e2:	fab42a23          	sw	a1,-76(s0)
  if (later > current) // usual case
204008e6:	e1842603          	lw	a2,-488(s0)
204008ea:	e1c42683          	lw	a3,-484(s0)
204008ee:	fb442703          	lw	a4,-76(s0)
204008f2:	87b6                	mv	a5,a3
204008f4:	00e7ed63          	bltu	a5,a4,2040090e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x216>
204008f8:	fb442703          	lw	a4,-76(s0)
204008fc:	87b6                	mv	a5,a3
204008fe:	0af71163          	bne	a4,a5,204009a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2a8>
20400902:	fb042703          	lw	a4,-80(s0)
20400906:	87b2                	mv	a5,a2
20400908:	00e7e363          	bltu	a5,a4,2040090e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x216>
2040090c:	a851                	j	204009a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2a8>
    {
      while (later > current) {
2040090e:	e1842603          	lw	a2,-488(s0)
20400912:	e1c42683          	lw	a3,-484(s0)
20400916:	fb442703          	lw	a4,-76(s0)
2040091a:	87b6                	mv	a5,a3
2040091c:	00e7ec63          	bltu	a5,a4,20400934 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x23c>
20400920:	fb442703          	lw	a4,-76(s0)
20400924:	87b6                	mv	a5,a3
20400926:	1af71d63          	bne	a4,a5,20400ae0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x3e8>
2040092a:	fb042703          	lw	a4,-80(s0)
2040092e:	87b2                	mv	a5,a2
20400930:	1ae7f863          	bleu	a4,a5,20400ae0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x3e8>
	rdmcycle(&current);
20400934:	b80027f3          	csrr	a5,mcycleh
20400938:	b0002773          	csrr	a4,mcycle
2040093c:	b80026f3          	csrr	a3,mcycleh
20400940:	fed79ae3          	bne	a5,a3,20400934 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x23c>
20400944:	faf42623          	sw	a5,-84(s0)
20400948:	fae42423          	sw	a4,-88(s0)
2040094c:	fad42223          	sw	a3,-92(s0)
20400950:	fa842783          	lw	a5,-88(s0)
20400954:	dcf42423          	sw	a5,-568(s0)
20400958:	dc042623          	sw	zero,-564(s0)
2040095c:	fac42783          	lw	a5,-84(s0)
20400960:	dcf42023          	sw	a5,-576(s0)
20400964:	dc042223          	sw	zero,-572(s0)
20400968:	dc042783          	lw	a5,-576(s0)
2040096c:	00079d93          	slli	s11,a5,0x0
20400970:	4d01                	li	s10,0
20400972:	dc842783          	lw	a5,-568(s0)
20400976:	dcc42803          	lw	a6,-564(s0)
2040097a:	873e                	mv	a4,a5
2040097c:	01a76733          	or	a4,a4,s10
20400980:	dae42c23          	sw	a4,-584(s0)
20400984:	87c2                	mv	a5,a6
20400986:	01b7e7b3          	or	a5,a5,s11
2040098a:	daf42e23          	sw	a5,-580(s0)
2040098e:	db842783          	lw	a5,-584(s0)
20400992:	dbc42803          	lw	a6,-580(s0)
20400996:	e0f42c23          	sw	a5,-488(s0)
2040099a:	e1042e23          	sw	a6,-484(s0)
2040099e:	bf85                	j	2040090e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x216>
      }
    }
  else // wrap. Though this is unlikely to be hit w/ 64-bit mcycle
    {
      while (later < current) {
204009a0:	e1842603          	lw	a2,-488(s0)
204009a4:	e1c42683          	lw	a3,-484(s0)
204009a8:	fb442703          	lw	a4,-76(s0)
204009ac:	87b6                	mv	a5,a3
204009ae:	00f76d63          	bltu	a4,a5,204009c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2d0>
204009b2:	fb442703          	lw	a4,-76(s0)
204009b6:	87b6                	mv	a5,a3
204009b8:	08f71463          	bne	a4,a5,20400a40 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x348>
204009bc:	fb042703          	lw	a4,-80(s0)
204009c0:	87b2                	mv	a5,a2
204009c2:	00f76363          	bltu	a4,a5,204009c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2d0>
204009c6:	a8ad                	j	20400a40 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x348>
	rdmcycle(&current);
204009c8:	b80027f3          	csrr	a5,mcycleh
204009cc:	b0002773          	csrr	a4,mcycle
204009d0:	b80026f3          	csrr	a3,mcycleh
204009d4:	fed79ae3          	bne	a5,a3,204009c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2d0>
204009d8:	faf42023          	sw	a5,-96(s0)
204009dc:	f8e42e23          	sw	a4,-100(s0)
204009e0:	f8d42c23          	sw	a3,-104(s0)
204009e4:	f9c42783          	lw	a5,-100(s0)
204009e8:	daf42823          	sw	a5,-592(s0)
204009ec:	da042a23          	sw	zero,-588(s0)
204009f0:	fa042783          	lw	a5,-96(s0)
204009f4:	daf42423          	sw	a5,-600(s0)
204009f8:	da042623          	sw	zero,-596(s0)
204009fc:	da842783          	lw	a5,-600(s0)
20400a00:	00079793          	slli	a5,a5,0x0
20400a04:	daf42223          	sw	a5,-604(s0)
20400a08:	da042023          	sw	zero,-608(s0)
20400a0c:	db042683          	lw	a3,-592(s0)
20400a10:	db442703          	lw	a4,-588(s0)
20400a14:	8636                	mv	a2,a3
20400a16:	da042783          	lw	a5,-608(s0)
20400a1a:	da442803          	lw	a6,-604(s0)
20400a1e:	85be                	mv	a1,a5
20400a20:	8e4d                	or	a2,a2,a1
20400a22:	d8c42c23          	sw	a2,-616(s0)
20400a26:	87c2                	mv	a5,a6
20400a28:	8fd9                	or	a5,a5,a4
20400a2a:	d8f42e23          	sw	a5,-612(s0)
20400a2e:	d9842783          	lw	a5,-616(s0)
20400a32:	d9c42803          	lw	a6,-612(s0)
20400a36:	e0f42c23          	sw	a5,-488(s0)
20400a3a:	e1042e23          	sw	a6,-484(s0)
20400a3e:	b78d                	j	204009a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x2a8>
      }
      while (current < later) {
20400a40:	e1842603          	lw	a2,-488(s0)
20400a44:	e1c42683          	lw	a3,-484(s0)
20400a48:	fb442703          	lw	a4,-76(s0)
20400a4c:	87b6                	mv	a5,a3
20400a4e:	00e7ec63          	bltu	a5,a4,20400a66 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x36e>
20400a52:	fb442703          	lw	a4,-76(s0)
20400a56:	87b6                	mv	a5,a3
20400a58:	08f71463          	bne	a4,a5,20400ae0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x3e8>
20400a5c:	fb042703          	lw	a4,-80(s0)
20400a60:	87b2                	mv	a5,a2
20400a62:	06e7ff63          	bleu	a4,a5,20400ae0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x3e8>
	rdmcycle(&current);
20400a66:	b80027f3          	csrr	a5,mcycleh
20400a6a:	b0002773          	csrr	a4,mcycle
20400a6e:	b80026f3          	csrr	a3,mcycleh
20400a72:	fed79ae3          	bne	a5,a3,20400a66 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x36e>
20400a76:	f8f42a23          	sw	a5,-108(s0)
20400a7a:	f8e42823          	sw	a4,-112(s0)
20400a7e:	f8d42623          	sw	a3,-116(s0)
20400a82:	f9042783          	lw	a5,-112(s0)
20400a86:	d8f42823          	sw	a5,-624(s0)
20400a8a:	d8042a23          	sw	zero,-620(s0)
20400a8e:	f9442783          	lw	a5,-108(s0)
20400a92:	d8f42423          	sw	a5,-632(s0)
20400a96:	d8042623          	sw	zero,-628(s0)
20400a9a:	d8842783          	lw	a5,-632(s0)
20400a9e:	00079793          	slli	a5,a5,0x0
20400aa2:	d8f42223          	sw	a5,-636(s0)
20400aa6:	d8042023          	sw	zero,-640(s0)
20400aaa:	d9042683          	lw	a3,-624(s0)
20400aae:	d9442703          	lw	a4,-620(s0)
20400ab2:	8636                	mv	a2,a3
20400ab4:	d8042783          	lw	a5,-640(s0)
20400ab8:	d8442803          	lw	a6,-636(s0)
20400abc:	85be                	mv	a1,a5
20400abe:	8e4d                	or	a2,a2,a1
20400ac0:	d6c42c23          	sw	a2,-648(s0)
20400ac4:	87c2                	mv	a5,a6
20400ac6:	8fd9                	or	a5,a5,a4
20400ac8:	d6f42e23          	sw	a5,-644(s0)
20400acc:	d7842783          	lw	a5,-648(s0)
20400ad0:	d7c42803          	lw	a6,-644(s0)
20400ad4:	e0f42c23          	sw	a5,-488(s0)
20400ad8:	e1042e23          	sw	a6,-484(s0)
20400adc:	b795                	j	20400a40 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x348>
    return;
20400ade:	0001                	nop
  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
20400ae0:	e0c42783          	lw	a5,-500(s0)
20400ae4:	0087c783          	lbu	a5,8(a5)
20400ae8:	4581                	li	a1,0
20400aea:	853e                	mv	a0,a5
20400aec:	050020ef          	jal	ra,20402b3c <digitalWrite>
  digitalWrite(_enable_pin, LOW);
20400af0:	e0c42783          	lw	a5,-500(s0)
20400af4:	00a7c783          	lbu	a5,10(a5)
20400af8:	4581                	li	a1,0
20400afa:	853e                	mv	a0,a5
20400afc:	040020ef          	jal	ra,20402b3c <digitalWrite>
  if (_rw_pin != 255) { 
20400b00:	e0c42783          	lw	a5,-500(s0)
20400b04:	0097c703          	lbu	a4,9(a5)
20400b08:	0ff00793          	li	a5,255
20400b0c:	00f70a63          	beq	a4,a5,20400b20 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x428>
    digitalWrite(_rw_pin, LOW);
20400b10:	e0c42783          	lw	a5,-500(s0)
20400b14:	0097c783          	lbu	a5,9(a5)
20400b18:	4581                	li	a1,0
20400b1a:	853e                	mv	a0,a5
20400b1c:	020020ef          	jal	ra,20402b3c <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
20400b20:	e0c42783          	lw	a5,-500(s0)
20400b24:	0137c783          	lbu	a5,19(a5)
20400b28:	8bc1                	andi	a5,a5,16
20400b2a:	0e0795e3          	bnez	a5,20401414 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd1c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
20400b2e:	458d                	li	a1,3
20400b30:	e0c42503          	lw	a0,-500(s0)
20400b34:	5a7010ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
20400b38:	6785                	lui	a5,0x1
20400b3a:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20400b3e:	f0f42423          	sw	a5,-248(s0)
  if (usec == 0) {
20400b42:	f0842783          	lw	a5,-248(s0)
20400b46:	2c078e63          	beqz	a5,20400e22 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72a>
  rdmcycle(&current);
20400b4a:	b80027f3          	csrr	a5,mcycleh
20400b4e:	b0002773          	csrr	a4,mcycle
20400b52:	b80026f3          	csrr	a3,mcycleh
20400b56:	fed79ae3          	bne	a5,a3,20400b4a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x452>
20400b5a:	f0f42223          	sw	a5,-252(s0)
20400b5e:	f0e42023          	sw	a4,-256(s0)
20400b62:	eed42e23          	sw	a3,-260(s0)
20400b66:	f0042783          	lw	a5,-256(s0)
20400b6a:	c6f42023          	sw	a5,-928(s0)
20400b6e:	c6042223          	sw	zero,-924(s0)
20400b72:	f0442783          	lw	a5,-252(s0)
20400b76:	c4f42c23          	sw	a5,-936(s0)
20400b7a:	c4042e23          	sw	zero,-932(s0)
20400b7e:	c5842783          	lw	a5,-936(s0)
20400b82:	00079793          	slli	a5,a5,0x0
20400b86:	c4f42a23          	sw	a5,-940(s0)
20400b8a:	c4042823          	sw	zero,-944(s0)
20400b8e:	c6042683          	lw	a3,-928(s0)
20400b92:	c6442703          	lw	a4,-924(s0)
20400b96:	8636                	mv	a2,a3
20400b98:	c5042783          	lw	a5,-944(s0)
20400b9c:	c5442803          	lw	a6,-940(s0)
20400ba0:	85be                	mv	a1,a5
20400ba2:	8e4d                	or	a2,a2,a1
20400ba4:	c4c42423          	sw	a2,-952(s0)
20400ba8:	87c2                	mv	a5,a6
20400baa:	8fd9                	or	a5,a5,a4
20400bac:	c4f42623          	sw	a5,-948(s0)
20400bb0:	c4842783          	lw	a5,-952(s0)
20400bb4:	c4c42803          	lw	a6,-948(s0)
20400bb8:	e2f42823          	sw	a5,-464(s0)
20400bbc:	e3042a23          	sw	a6,-460(s0)
  later = current + usec * (F_CPU/1000000);
20400bc0:	f0842783          	lw	a5,-248(s0)
20400bc4:	c4f42023          	sw	a5,-960(s0)
20400bc8:	c4042223          	sw	zero,-956(s0)
20400bcc:	c4042683          	lw	a3,-960(s0)
20400bd0:	c4442703          	lw	a4,-956(s0)
20400bd4:	87b6                	mv	a5,a3
20400bd6:	83f1                	srli	a5,a5,0x1c
20400bd8:	863a                	mv	a2,a4
20400bda:	0612                	slli	a2,a2,0x4
20400bdc:	dec42a23          	sw	a2,-524(s0)
20400be0:	df442603          	lw	a2,-524(s0)
20400be4:	8fd1                	or	a5,a5,a2
20400be6:	def42a23          	sw	a5,-524(s0)
20400bea:	87b6                	mv	a5,a3
20400bec:	0792                	slli	a5,a5,0x4
20400bee:	def42823          	sw	a5,-528(s0)
20400bf2:	df042783          	lw	a5,-528(s0)
20400bf6:	df442803          	lw	a6,-524(s0)
20400bfa:	e3042683          	lw	a3,-464(s0)
20400bfe:	e3442703          	lw	a4,-460(s0)
20400c02:	00d78533          	add	a0,a5,a3
20400c06:	862a                	mv	a2,a0
20400c08:	00f63633          	sltu	a2,a2,a5
20400c0c:	00e805b3          	add	a1,a6,a4
20400c10:	00b607b3          	add	a5,a2,a1
20400c14:	85be                	mv	a1,a5
20400c16:	eea42823          	sw	a0,-272(s0)
20400c1a:	eeb42a23          	sw	a1,-268(s0)
  if (later > current) // usual case
20400c1e:	e3042603          	lw	a2,-464(s0)
20400c22:	e3442683          	lw	a3,-460(s0)
20400c26:	ef442703          	lw	a4,-268(s0)
20400c2a:	87b6                	mv	a5,a3
20400c2c:	00e7ed63          	bltu	a5,a4,20400c46 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x54e>
20400c30:	ef442703          	lw	a4,-268(s0)
20400c34:	87b6                	mv	a5,a3
20400c36:	0af71763          	bne	a4,a5,20400ce4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5ec>
20400c3a:	ef042703          	lw	a4,-272(s0)
20400c3e:	87b2                	mv	a5,a2
20400c40:	00e7e363          	bltu	a5,a4,20400c46 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x54e>
20400c44:	a045                	j	20400ce4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5ec>
      while (later > current) {
20400c46:	e3042603          	lw	a2,-464(s0)
20400c4a:	e3442683          	lw	a3,-460(s0)
20400c4e:	ef442703          	lw	a4,-268(s0)
20400c52:	87b6                	mv	a5,a3
20400c54:	00e7ec63          	bltu	a5,a4,20400c6c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x574>
20400c58:	ef442703          	lw	a4,-268(s0)
20400c5c:	87b6                	mv	a5,a3
20400c5e:	1cf71363          	bne	a4,a5,20400e24 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72c>
20400c62:	ef042703          	lw	a4,-272(s0)
20400c66:	87b2                	mv	a5,a2
20400c68:	1ae7fe63          	bleu	a4,a5,20400e24 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72c>
	rdmcycle(&current);
20400c6c:	b80027f3          	csrr	a5,mcycleh
20400c70:	b0002773          	csrr	a4,mcycle
20400c74:	b80026f3          	csrr	a3,mcycleh
20400c78:	fed79ae3          	bne	a5,a3,20400c6c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x574>
20400c7c:	eef42623          	sw	a5,-276(s0)
20400c80:	eee42423          	sw	a4,-280(s0)
20400c84:	eed42223          	sw	a3,-284(s0)
20400c88:	ee842783          	lw	a5,-280(s0)
20400c8c:	c2f42c23          	sw	a5,-968(s0)
20400c90:	c2042e23          	sw	zero,-964(s0)
20400c94:	eec42783          	lw	a5,-276(s0)
20400c98:	c2f42823          	sw	a5,-976(s0)
20400c9c:	c2042a23          	sw	zero,-972(s0)
20400ca0:	c3042783          	lw	a5,-976(s0)
20400ca4:	00079793          	slli	a5,a5,0x0
20400ca8:	c2f42623          	sw	a5,-980(s0)
20400cac:	c2042423          	sw	zero,-984(s0)
20400cb0:	c3842683          	lw	a3,-968(s0)
20400cb4:	c3c42703          	lw	a4,-964(s0)
20400cb8:	8636                	mv	a2,a3
20400cba:	c2842783          	lw	a5,-984(s0)
20400cbe:	c2c42803          	lw	a6,-980(s0)
20400cc2:	85be                	mv	a1,a5
20400cc4:	8e4d                	or	a2,a2,a1
20400cc6:	c2c42023          	sw	a2,-992(s0)
20400cca:	87c2                	mv	a5,a6
20400ccc:	8fd9                	or	a5,a5,a4
20400cce:	c2f42223          	sw	a5,-988(s0)
20400cd2:	c2042783          	lw	a5,-992(s0)
20400cd6:	c2442803          	lw	a6,-988(s0)
20400cda:	e2f42823          	sw	a5,-464(s0)
20400cde:	e3042a23          	sw	a6,-460(s0)
20400ce2:	b795                	j	20400c46 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x54e>
      while (later < current) {
20400ce4:	e3042603          	lw	a2,-464(s0)
20400ce8:	e3442683          	lw	a3,-460(s0)
20400cec:	ef442703          	lw	a4,-268(s0)
20400cf0:	87b6                	mv	a5,a3
20400cf2:	00f76d63          	bltu	a4,a5,20400d0c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x614>
20400cf6:	ef442703          	lw	a4,-268(s0)
20400cfa:	87b6                	mv	a5,a3
20400cfc:	08f71463          	bne	a4,a5,20400d84 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x68c>
20400d00:	ef042703          	lw	a4,-272(s0)
20400d04:	87b2                	mv	a5,a2
20400d06:	00f76363          	bltu	a4,a5,20400d0c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x614>
20400d0a:	a8ad                	j	20400d84 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x68c>
	rdmcycle(&current);
20400d0c:	b80027f3          	csrr	a5,mcycleh
20400d10:	b0002773          	csrr	a4,mcycle
20400d14:	b80026f3          	csrr	a3,mcycleh
20400d18:	fed79ae3          	bne	a5,a3,20400d0c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x614>
20400d1c:	eef42023          	sw	a5,-288(s0)
20400d20:	ece42e23          	sw	a4,-292(s0)
20400d24:	ecd42c23          	sw	a3,-296(s0)
20400d28:	edc42783          	lw	a5,-292(s0)
20400d2c:	c0f42c23          	sw	a5,-1000(s0)
20400d30:	c0042e23          	sw	zero,-996(s0)
20400d34:	ee042783          	lw	a5,-288(s0)
20400d38:	c0f42823          	sw	a5,-1008(s0)
20400d3c:	c0042a23          	sw	zero,-1004(s0)
20400d40:	c1042783          	lw	a5,-1008(s0)
20400d44:	00079793          	slli	a5,a5,0x0
20400d48:	c0f42623          	sw	a5,-1012(s0)
20400d4c:	c0042423          	sw	zero,-1016(s0)
20400d50:	c1842683          	lw	a3,-1000(s0)
20400d54:	c1c42703          	lw	a4,-996(s0)
20400d58:	8636                	mv	a2,a3
20400d5a:	c0842783          	lw	a5,-1016(s0)
20400d5e:	c0c42803          	lw	a6,-1012(s0)
20400d62:	85be                	mv	a1,a5
20400d64:	8e4d                	or	a2,a2,a1
20400d66:	c0c42023          	sw	a2,-1024(s0)
20400d6a:	87c2                	mv	a5,a6
20400d6c:	8fd9                	or	a5,a5,a4
20400d6e:	c0f42223          	sw	a5,-1020(s0)
20400d72:	c0042783          	lw	a5,-1024(s0)
20400d76:	c0442803          	lw	a6,-1020(s0)
20400d7a:	e2f42823          	sw	a5,-464(s0)
20400d7e:	e3042a23          	sw	a6,-460(s0)
20400d82:	b78d                	j	20400ce4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5ec>
      while (current < later) {
20400d84:	e3042603          	lw	a2,-464(s0)
20400d88:	e3442683          	lw	a3,-460(s0)
20400d8c:	ef442703          	lw	a4,-268(s0)
20400d90:	87b6                	mv	a5,a3
20400d92:	00e7ec63          	bltu	a5,a4,20400daa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x6b2>
20400d96:	ef442703          	lw	a4,-268(s0)
20400d9a:	87b6                	mv	a5,a3
20400d9c:	08f71463          	bne	a4,a5,20400e24 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72c>
20400da0:	ef042703          	lw	a4,-272(s0)
20400da4:	87b2                	mv	a5,a2
20400da6:	06e7ff63          	bleu	a4,a5,20400e24 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x72c>
	rdmcycle(&current);
20400daa:	b80027f3          	csrr	a5,mcycleh
20400dae:	b0002773          	csrr	a4,mcycle
20400db2:	b80026f3          	csrr	a3,mcycleh
20400db6:	fed79ae3          	bne	a5,a3,20400daa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x6b2>
20400dba:	ecf42a23          	sw	a5,-300(s0)
20400dbe:	ece42823          	sw	a4,-304(s0)
20400dc2:	ecd42623          	sw	a3,-308(s0)
20400dc6:	ed042783          	lw	a5,-304(s0)
20400dca:	bef42c23          	sw	a5,-1032(s0)
20400dce:	be042e23          	sw	zero,-1028(s0)
20400dd2:	ed442783          	lw	a5,-300(s0)
20400dd6:	bef42823          	sw	a5,-1040(s0)
20400dda:	be042a23          	sw	zero,-1036(s0)
20400dde:	bf042783          	lw	a5,-1040(s0)
20400de2:	00079793          	slli	a5,a5,0x0
20400de6:	bef42623          	sw	a5,-1044(s0)
20400dea:	be042423          	sw	zero,-1048(s0)
20400dee:	bf842683          	lw	a3,-1032(s0)
20400df2:	bfc42703          	lw	a4,-1028(s0)
20400df6:	8636                	mv	a2,a3
20400df8:	be842783          	lw	a5,-1048(s0)
20400dfc:	bec42803          	lw	a6,-1044(s0)
20400e00:	85be                	mv	a1,a5
20400e02:	8e4d                	or	a2,a2,a1
20400e04:	bec42023          	sw	a2,-1056(s0)
20400e08:	87c2                	mv	a5,a6
20400e0a:	8fd9                	or	a5,a5,a4
20400e0c:	bef42223          	sw	a5,-1052(s0)
20400e10:	be042783          	lw	a5,-1056(s0)
20400e14:	be442803          	lw	a6,-1052(s0)
20400e18:	e2f42823          	sw	a5,-464(s0)
20400e1c:	e3042a23          	sw	a6,-460(s0)
20400e20:	b795                	j	20400d84 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x68c>
    return;
20400e22:	0001                	nop
    delayMicroseconds(4500); // wait min 4.1ms

    // second try
    write4bits(0x03);
20400e24:	458d                	li	a1,3
20400e26:	e0c42503          	lw	a0,-500(s0)
20400e2a:	2b1010ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
20400e2e:	6785                	lui	a5,0x1
20400e30:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20400e34:	f4f42423          	sw	a5,-184(s0)
  if (usec == 0) {
20400e38:	f4842783          	lw	a5,-184(s0)
20400e3c:	2c078e63          	beqz	a5,20401118 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa20>
  rdmcycle(&current);
20400e40:	b80027f3          	csrr	a5,mcycleh
20400e44:	b0002773          	csrr	a4,mcycle
20400e48:	b80026f3          	csrr	a3,mcycleh
20400e4c:	fed79ae3          	bne	a5,a3,20400e40 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x748>
20400e50:	f4f42223          	sw	a5,-188(s0)
20400e54:	f4e42023          	sw	a4,-192(s0)
20400e58:	f2d42e23          	sw	a3,-196(s0)
20400e5c:	f4042783          	lw	a5,-192(s0)
20400e60:	cef42423          	sw	a5,-792(s0)
20400e64:	ce042623          	sw	zero,-788(s0)
20400e68:	f4442783          	lw	a5,-188(s0)
20400e6c:	cef42023          	sw	a5,-800(s0)
20400e70:	ce042223          	sw	zero,-796(s0)
20400e74:	ce042783          	lw	a5,-800(s0)
20400e78:	00079793          	slli	a5,a5,0x0
20400e7c:	ccf42e23          	sw	a5,-804(s0)
20400e80:	cc042c23          	sw	zero,-808(s0)
20400e84:	ce842683          	lw	a3,-792(s0)
20400e88:	cec42703          	lw	a4,-788(s0)
20400e8c:	8636                	mv	a2,a3
20400e8e:	cd842783          	lw	a5,-808(s0)
20400e92:	cdc42803          	lw	a6,-804(s0)
20400e96:	85be                	mv	a1,a5
20400e98:	8e4d                	or	a2,a2,a1
20400e9a:	ccc42823          	sw	a2,-816(s0)
20400e9e:	87c2                	mv	a5,a6
20400ea0:	8fd9                	or	a5,a5,a4
20400ea2:	ccf42a23          	sw	a5,-812(s0)
20400ea6:	cd042783          	lw	a5,-816(s0)
20400eaa:	cd442803          	lw	a6,-812(s0)
20400eae:	e2f42423          	sw	a5,-472(s0)
20400eb2:	e3042623          	sw	a6,-468(s0)
  later = current + usec * (F_CPU/1000000);
20400eb6:	f4842783          	lw	a5,-184(s0)
20400eba:	ccf42423          	sw	a5,-824(s0)
20400ebe:	cc042623          	sw	zero,-820(s0)
20400ec2:	cc842683          	lw	a3,-824(s0)
20400ec6:	ccc42703          	lw	a4,-820(s0)
20400eca:	87b6                	mv	a5,a3
20400ecc:	83f1                	srli	a5,a5,0x1c
20400ece:	863a                	mv	a2,a4
20400ed0:	0612                	slli	a2,a2,0x4
20400ed2:	dec42e23          	sw	a2,-516(s0)
20400ed6:	dfc42603          	lw	a2,-516(s0)
20400eda:	8fd1                	or	a5,a5,a2
20400edc:	def42e23          	sw	a5,-516(s0)
20400ee0:	87b6                	mv	a5,a3
20400ee2:	0792                	slli	a5,a5,0x4
20400ee4:	def42c23          	sw	a5,-520(s0)
20400ee8:	df842783          	lw	a5,-520(s0)
20400eec:	dfc42803          	lw	a6,-516(s0)
20400ef0:	e2842683          	lw	a3,-472(s0)
20400ef4:	e2c42703          	lw	a4,-468(s0)
20400ef8:	00d78533          	add	a0,a5,a3
20400efc:	862a                	mv	a2,a0
20400efe:	00f63633          	sltu	a2,a2,a5
20400f02:	00e805b3          	add	a1,a6,a4
20400f06:	00b607b3          	add	a5,a2,a1
20400f0a:	85be                	mv	a1,a5
20400f0c:	f2a42823          	sw	a0,-208(s0)
20400f10:	f2b42a23          	sw	a1,-204(s0)
  if (later > current) // usual case
20400f14:	e2842603          	lw	a2,-472(s0)
20400f18:	e2c42683          	lw	a3,-468(s0)
20400f1c:	f3442703          	lw	a4,-204(s0)
20400f20:	87b6                	mv	a5,a3
20400f22:	00e7ed63          	bltu	a5,a4,20400f3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x844>
20400f26:	f3442703          	lw	a4,-204(s0)
20400f2a:	87b6                	mv	a5,a3
20400f2c:	0af71763          	bne	a4,a5,20400fda <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x8e2>
20400f30:	f3042703          	lw	a4,-208(s0)
20400f34:	87b2                	mv	a5,a2
20400f36:	00e7e363          	bltu	a5,a4,20400f3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x844>
20400f3a:	a045                	j	20400fda <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x8e2>
      while (later > current) {
20400f3c:	e2842603          	lw	a2,-472(s0)
20400f40:	e2c42683          	lw	a3,-468(s0)
20400f44:	f3442703          	lw	a4,-204(s0)
20400f48:	87b6                	mv	a5,a3
20400f4a:	00e7ec63          	bltu	a5,a4,20400f62 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x86a>
20400f4e:	f3442703          	lw	a4,-204(s0)
20400f52:	87b6                	mv	a5,a3
20400f54:	1cf71363          	bne	a4,a5,2040111a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa22>
20400f58:	f3042703          	lw	a4,-208(s0)
20400f5c:	87b2                	mv	a5,a2
20400f5e:	1ae7fe63          	bleu	a4,a5,2040111a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa22>
	rdmcycle(&current);
20400f62:	b80027f3          	csrr	a5,mcycleh
20400f66:	b0002773          	csrr	a4,mcycle
20400f6a:	b80026f3          	csrr	a3,mcycleh
20400f6e:	fed79ae3          	bne	a5,a3,20400f62 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x86a>
20400f72:	f2f42623          	sw	a5,-212(s0)
20400f76:	f2e42423          	sw	a4,-216(s0)
20400f7a:	f2d42223          	sw	a3,-220(s0)
20400f7e:	f2842783          	lw	a5,-216(s0)
20400f82:	ccf42023          	sw	a5,-832(s0)
20400f86:	cc042223          	sw	zero,-828(s0)
20400f8a:	f2c42783          	lw	a5,-212(s0)
20400f8e:	caf42c23          	sw	a5,-840(s0)
20400f92:	ca042e23          	sw	zero,-836(s0)
20400f96:	cb842783          	lw	a5,-840(s0)
20400f9a:	00079793          	slli	a5,a5,0x0
20400f9e:	caf42a23          	sw	a5,-844(s0)
20400fa2:	ca042823          	sw	zero,-848(s0)
20400fa6:	cc042683          	lw	a3,-832(s0)
20400faa:	cc442703          	lw	a4,-828(s0)
20400fae:	8636                	mv	a2,a3
20400fb0:	cb042783          	lw	a5,-848(s0)
20400fb4:	cb442803          	lw	a6,-844(s0)
20400fb8:	85be                	mv	a1,a5
20400fba:	8e4d                	or	a2,a2,a1
20400fbc:	cac42423          	sw	a2,-856(s0)
20400fc0:	87c2                	mv	a5,a6
20400fc2:	8fd9                	or	a5,a5,a4
20400fc4:	caf42623          	sw	a5,-852(s0)
20400fc8:	ca842783          	lw	a5,-856(s0)
20400fcc:	cac42803          	lw	a6,-852(s0)
20400fd0:	e2f42423          	sw	a5,-472(s0)
20400fd4:	e3042623          	sw	a6,-468(s0)
20400fd8:	b795                	j	20400f3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x844>
      while (later < current) {
20400fda:	e2842603          	lw	a2,-472(s0)
20400fde:	e2c42683          	lw	a3,-468(s0)
20400fe2:	f3442703          	lw	a4,-204(s0)
20400fe6:	87b6                	mv	a5,a3
20400fe8:	00f76d63          	bltu	a4,a5,20401002 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x90a>
20400fec:	f3442703          	lw	a4,-204(s0)
20400ff0:	87b6                	mv	a5,a3
20400ff2:	08f71463          	bne	a4,a5,2040107a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x982>
20400ff6:	f3042703          	lw	a4,-208(s0)
20400ffa:	87b2                	mv	a5,a2
20400ffc:	00f76363          	bltu	a4,a5,20401002 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x90a>
20401000:	a8ad                	j	2040107a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x982>
	rdmcycle(&current);
20401002:	b80027f3          	csrr	a5,mcycleh
20401006:	b0002773          	csrr	a4,mcycle
2040100a:	b80026f3          	csrr	a3,mcycleh
2040100e:	fed79ae3          	bne	a5,a3,20401002 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x90a>
20401012:	f2f42023          	sw	a5,-224(s0)
20401016:	f0e42e23          	sw	a4,-228(s0)
2040101a:	f0d42c23          	sw	a3,-232(s0)
2040101e:	f1c42783          	lw	a5,-228(s0)
20401022:	caf42023          	sw	a5,-864(s0)
20401026:	ca042223          	sw	zero,-860(s0)
2040102a:	f2042783          	lw	a5,-224(s0)
2040102e:	c8f42c23          	sw	a5,-872(s0)
20401032:	c8042e23          	sw	zero,-868(s0)
20401036:	c9842783          	lw	a5,-872(s0)
2040103a:	00079793          	slli	a5,a5,0x0
2040103e:	c8f42a23          	sw	a5,-876(s0)
20401042:	c8042823          	sw	zero,-880(s0)
20401046:	ca042683          	lw	a3,-864(s0)
2040104a:	ca442703          	lw	a4,-860(s0)
2040104e:	8636                	mv	a2,a3
20401050:	c9042783          	lw	a5,-880(s0)
20401054:	c9442803          	lw	a6,-876(s0)
20401058:	85be                	mv	a1,a5
2040105a:	8e4d                	or	a2,a2,a1
2040105c:	c8c42423          	sw	a2,-888(s0)
20401060:	87c2                	mv	a5,a6
20401062:	8fd9                	or	a5,a5,a4
20401064:	c8f42623          	sw	a5,-884(s0)
20401068:	c8842783          	lw	a5,-888(s0)
2040106c:	c8c42803          	lw	a6,-884(s0)
20401070:	e2f42423          	sw	a5,-472(s0)
20401074:	e3042623          	sw	a6,-468(s0)
20401078:	b78d                	j	20400fda <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x8e2>
      while (current < later) {
2040107a:	e2842603          	lw	a2,-472(s0)
2040107e:	e2c42683          	lw	a3,-468(s0)
20401082:	f3442703          	lw	a4,-204(s0)
20401086:	87b6                	mv	a5,a3
20401088:	00e7ec63          	bltu	a5,a4,204010a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9a8>
2040108c:	f3442703          	lw	a4,-204(s0)
20401090:	87b6                	mv	a5,a3
20401092:	08f71463          	bne	a4,a5,2040111a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa22>
20401096:	f3042703          	lw	a4,-208(s0)
2040109a:	87b2                	mv	a5,a2
2040109c:	06e7ff63          	bleu	a4,a5,2040111a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa22>
	rdmcycle(&current);
204010a0:	b80027f3          	csrr	a5,mcycleh
204010a4:	b0002773          	csrr	a4,mcycle
204010a8:	b80026f3          	csrr	a3,mcycleh
204010ac:	fed79ae3          	bne	a5,a3,204010a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9a8>
204010b0:	f0f42a23          	sw	a5,-236(s0)
204010b4:	f0e42823          	sw	a4,-240(s0)
204010b8:	f0d42623          	sw	a3,-244(s0)
204010bc:	f1042783          	lw	a5,-240(s0)
204010c0:	c8f42023          	sw	a5,-896(s0)
204010c4:	c8042223          	sw	zero,-892(s0)
204010c8:	f1442783          	lw	a5,-236(s0)
204010cc:	c6f42c23          	sw	a5,-904(s0)
204010d0:	c6042e23          	sw	zero,-900(s0)
204010d4:	c7842783          	lw	a5,-904(s0)
204010d8:	00079793          	slli	a5,a5,0x0
204010dc:	c6f42a23          	sw	a5,-908(s0)
204010e0:	c6042823          	sw	zero,-912(s0)
204010e4:	c8042683          	lw	a3,-896(s0)
204010e8:	c8442703          	lw	a4,-892(s0)
204010ec:	8636                	mv	a2,a3
204010ee:	c7042783          	lw	a5,-912(s0)
204010f2:	c7442803          	lw	a6,-908(s0)
204010f6:	85be                	mv	a1,a5
204010f8:	8e4d                	or	a2,a2,a1
204010fa:	c6c42423          	sw	a2,-920(s0)
204010fe:	87c2                	mv	a5,a6
20401100:	8fd9                	or	a5,a5,a4
20401102:	c6f42623          	sw	a5,-916(s0)
20401106:	c6842783          	lw	a5,-920(s0)
2040110a:	c6c42803          	lw	a6,-916(s0)
2040110e:	e2f42423          	sw	a5,-472(s0)
20401112:	e3042623          	sw	a6,-468(s0)
20401116:	b795                	j	2040107a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x982>
    return;
20401118:	0001                	nop
    delayMicroseconds(4500); // wait min 4.1ms
    
    // third go!
    write4bits(0x03); 
2040111a:	458d                	li	a1,3
2040111c:	e0c42503          	lw	a0,-500(s0)
20401120:	7ba010ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
20401124:	09600793          	li	a5,150
20401128:	f8f42423          	sw	a5,-120(s0)
  if (usec == 0) {
2040112c:	f8842783          	lw	a5,-120(s0)
20401130:	2c078b63          	beqz	a5,20401406 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd0e>
  rdmcycle(&current);
20401134:	b80027f3          	csrr	a5,mcycleh
20401138:	b0002773          	csrr	a4,mcycle
2040113c:	b80026f3          	csrr	a3,mcycleh
20401140:	fed79ae3          	bne	a5,a3,20401134 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xa3c>
20401144:	f8f42223          	sw	a5,-124(s0)
20401148:	f8e42023          	sw	a4,-128(s0)
2040114c:	f6d42e23          	sw	a3,-132(s0)
20401150:	f8042783          	lw	a5,-128(s0)
20401154:	d6f42823          	sw	a5,-656(s0)
20401158:	d6042a23          	sw	zero,-652(s0)
2040115c:	f8442783          	lw	a5,-124(s0)
20401160:	d6f42423          	sw	a5,-664(s0)
20401164:	d6042623          	sw	zero,-660(s0)
20401168:	d6842783          	lw	a5,-664(s0)
2040116c:	00079793          	slli	a5,a5,0x0
20401170:	d6f42223          	sw	a5,-668(s0)
20401174:	d6042023          	sw	zero,-672(s0)
20401178:	d7042683          	lw	a3,-656(s0)
2040117c:	d7442703          	lw	a4,-652(s0)
20401180:	8636                	mv	a2,a3
20401182:	d6042783          	lw	a5,-672(s0)
20401186:	d6442803          	lw	a6,-668(s0)
2040118a:	85be                	mv	a1,a5
2040118c:	8e4d                	or	a2,a2,a1
2040118e:	d4c42c23          	sw	a2,-680(s0)
20401192:	87c2                	mv	a5,a6
20401194:	8fd9                	or	a5,a5,a4
20401196:	d4f42e23          	sw	a5,-676(s0)
2040119a:	d5842783          	lw	a5,-680(s0)
2040119e:	d5c42803          	lw	a6,-676(s0)
204011a2:	e2f42023          	sw	a5,-480(s0)
204011a6:	e3042223          	sw	a6,-476(s0)
  later = current + usec * (F_CPU/1000000);
204011aa:	f8842783          	lw	a5,-120(s0)
204011ae:	d4f42823          	sw	a5,-688(s0)
204011b2:	d4042a23          	sw	zero,-684(s0)
204011b6:	d5042683          	lw	a3,-688(s0)
204011ba:	d5442703          	lw	a4,-684(s0)
204011be:	87b6                	mv	a5,a3
204011c0:	83f1                	srli	a5,a5,0x1c
204011c2:	863a                	mv	a2,a4
204011c4:	0612                	slli	a2,a2,0x4
204011c6:	e0c42223          	sw	a2,-508(s0)
204011ca:	e0442603          	lw	a2,-508(s0)
204011ce:	8fd1                	or	a5,a5,a2
204011d0:	e0f42223          	sw	a5,-508(s0)
204011d4:	87b6                	mv	a5,a3
204011d6:	0792                	slli	a5,a5,0x4
204011d8:	e0f42023          	sw	a5,-512(s0)
204011dc:	e0042683          	lw	a3,-512(s0)
204011e0:	e0442703          	lw	a4,-508(s0)
204011e4:	e2042503          	lw	a0,-480(s0)
204011e8:	e2442583          	lw	a1,-476(s0)
204011ec:	00a687b3          	add	a5,a3,a0
204011f0:	863e                	mv	a2,a5
204011f2:	00d63633          	sltu	a2,a2,a3
204011f6:	00b70833          	add	a6,a4,a1
204011fa:	01060733          	add	a4,a2,a6
204011fe:	883a                	mv	a6,a4
20401200:	f6f42823          	sw	a5,-144(s0)
20401204:	f7042a23          	sw	a6,-140(s0)
  if (later > current) // usual case
20401208:	e2042683          	lw	a3,-480(s0)
2040120c:	e2442703          	lw	a4,-476(s0)
20401210:	f7442783          	lw	a5,-140(s0)
20401214:	863a                	mv	a2,a4
20401216:	00f66d63          	bltu	a2,a5,20401230 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xb38>
2040121a:	f7442783          	lw	a5,-140(s0)
2040121e:	863a                	mv	a2,a4
20401220:	0ac79663          	bne	a5,a2,204012cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbd4>
20401224:	f7042783          	lw	a5,-144(s0)
20401228:	8736                	mv	a4,a3
2040122a:	00f76363          	bltu	a4,a5,20401230 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xb38>
2040122e:	a879                	j	204012cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbd4>
      while (later > current) {
20401230:	e2042783          	lw	a5,-480(s0)
20401234:	e2442803          	lw	a6,-476(s0)
20401238:	f7442703          	lw	a4,-140(s0)
2040123c:	86c2                	mv	a3,a6
2040123e:	00e6eb63          	bltu	a3,a4,20401254 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xb5c>
20401242:	f7442703          	lw	a4,-140(s0)
20401246:	86c2                	mv	a3,a6
20401248:	1cd71063          	bne	a4,a3,20401408 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd10>
2040124c:	f7042703          	lw	a4,-144(s0)
20401250:	1ae7fc63          	bleu	a4,a5,20401408 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd10>
	rdmcycle(&current);
20401254:	b80026f3          	csrr	a3,mcycleh
20401258:	b0002773          	csrr	a4,mcycle
2040125c:	b80027f3          	csrr	a5,mcycleh
20401260:	fef69ae3          	bne	a3,a5,20401254 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xb5c>
20401264:	f6d42623          	sw	a3,-148(s0)
20401268:	f6e42423          	sw	a4,-152(s0)
2040126c:	f6f42223          	sw	a5,-156(s0)
20401270:	f6842783          	lw	a5,-152(s0)
20401274:	d4f42423          	sw	a5,-696(s0)
20401278:	d4042623          	sw	zero,-692(s0)
2040127c:	f6c42783          	lw	a5,-148(s0)
20401280:	d4f42023          	sw	a5,-704(s0)
20401284:	d4042223          	sw	zero,-700(s0)
20401288:	d4042783          	lw	a5,-704(s0)
2040128c:	00079793          	slli	a5,a5,0x0
20401290:	d2f42e23          	sw	a5,-708(s0)
20401294:	d2042c23          	sw	zero,-712(s0)
20401298:	d4842683          	lw	a3,-696(s0)
2040129c:	d4c42703          	lw	a4,-692(s0)
204012a0:	8636                	mv	a2,a3
204012a2:	d3842783          	lw	a5,-712(s0)
204012a6:	d3c42803          	lw	a6,-708(s0)
204012aa:	85be                	mv	a1,a5
204012ac:	8e4d                	or	a2,a2,a1
204012ae:	d2c42823          	sw	a2,-720(s0)
204012b2:	87c2                	mv	a5,a6
204012b4:	8fd9                	or	a5,a5,a4
204012b6:	d2f42a23          	sw	a5,-716(s0)
204012ba:	d3042783          	lw	a5,-720(s0)
204012be:	d3442803          	lw	a6,-716(s0)
204012c2:	e2f42023          	sw	a5,-480(s0)
204012c6:	e3042223          	sw	a6,-476(s0)
204012ca:	b79d                	j	20401230 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xb38>
      while (later < current) {
204012cc:	e2042783          	lw	a5,-480(s0)
204012d0:	e2442803          	lw	a6,-476(s0)
204012d4:	f7442703          	lw	a4,-140(s0)
204012d8:	86c2                	mv	a3,a6
204012da:	00d76c63          	bltu	a4,a3,204012f2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbfa>
204012de:	f7442703          	lw	a4,-140(s0)
204012e2:	86c2                	mv	a3,a6
204012e4:	08d71363          	bne	a4,a3,2040136a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc72>
204012e8:	f7042703          	lw	a4,-144(s0)
204012ec:	00f76363          	bltu	a4,a5,204012f2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbfa>
204012f0:	a8ad                	j	2040136a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc72>
	rdmcycle(&current);
204012f2:	b80026f3          	csrr	a3,mcycleh
204012f6:	b0002773          	csrr	a4,mcycle
204012fa:	b80027f3          	csrr	a5,mcycleh
204012fe:	fef69ae3          	bne	a3,a5,204012f2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbfa>
20401302:	f6d42023          	sw	a3,-160(s0)
20401306:	f4e42e23          	sw	a4,-164(s0)
2040130a:	f4f42c23          	sw	a5,-168(s0)
2040130e:	f5c42783          	lw	a5,-164(s0)
20401312:	d2f42423          	sw	a5,-728(s0)
20401316:	d2042623          	sw	zero,-724(s0)
2040131a:	f6042783          	lw	a5,-160(s0)
2040131e:	d2f42023          	sw	a5,-736(s0)
20401322:	d2042223          	sw	zero,-732(s0)
20401326:	d2042783          	lw	a5,-736(s0)
2040132a:	00079793          	slli	a5,a5,0x0
2040132e:	d0f42e23          	sw	a5,-740(s0)
20401332:	d0042c23          	sw	zero,-744(s0)
20401336:	d2842683          	lw	a3,-728(s0)
2040133a:	d2c42703          	lw	a4,-724(s0)
2040133e:	8636                	mv	a2,a3
20401340:	d1842783          	lw	a5,-744(s0)
20401344:	d1c42803          	lw	a6,-740(s0)
20401348:	85be                	mv	a1,a5
2040134a:	8e4d                	or	a2,a2,a1
2040134c:	d0c42823          	sw	a2,-752(s0)
20401350:	87c2                	mv	a5,a6
20401352:	8fd9                	or	a5,a5,a4
20401354:	d0f42a23          	sw	a5,-748(s0)
20401358:	d1042783          	lw	a5,-752(s0)
2040135c:	d1442803          	lw	a6,-748(s0)
20401360:	e2f42023          	sw	a5,-480(s0)
20401364:	e3042223          	sw	a6,-476(s0)
20401368:	b795                	j	204012cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xbd4>
      while (current < later) {
2040136a:	e2042783          	lw	a5,-480(s0)
2040136e:	e2442803          	lw	a6,-476(s0)
20401372:	f7442703          	lw	a4,-140(s0)
20401376:	86c2                	mv	a3,a6
20401378:	00e6eb63          	bltu	a3,a4,2040138e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc96>
2040137c:	f7442703          	lw	a4,-140(s0)
20401380:	86c2                	mv	a3,a6
20401382:	08d71363          	bne	a4,a3,20401408 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd10>
20401386:	f7042703          	lw	a4,-144(s0)
2040138a:	06e7ff63          	bleu	a4,a5,20401408 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd10>
	rdmcycle(&current);
2040138e:	b80026f3          	csrr	a3,mcycleh
20401392:	b0002773          	csrr	a4,mcycle
20401396:	b80027f3          	csrr	a5,mcycleh
2040139a:	fef69ae3          	bne	a3,a5,2040138e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc96>
2040139e:	f4d42a23          	sw	a3,-172(s0)
204013a2:	f4e42823          	sw	a4,-176(s0)
204013a6:	f4f42623          	sw	a5,-180(s0)
204013aa:	f5042783          	lw	a5,-176(s0)
204013ae:	d0f42423          	sw	a5,-760(s0)
204013b2:	d0042623          	sw	zero,-756(s0)
204013b6:	f5442783          	lw	a5,-172(s0)
204013ba:	d0f42023          	sw	a5,-768(s0)
204013be:	d0042223          	sw	zero,-764(s0)
204013c2:	d0042783          	lw	a5,-768(s0)
204013c6:	00079793          	slli	a5,a5,0x0
204013ca:	cef42e23          	sw	a5,-772(s0)
204013ce:	ce042c23          	sw	zero,-776(s0)
204013d2:	d0842683          	lw	a3,-760(s0)
204013d6:	d0c42703          	lw	a4,-756(s0)
204013da:	8636                	mv	a2,a3
204013dc:	cf842783          	lw	a5,-776(s0)
204013e0:	cfc42803          	lw	a6,-772(s0)
204013e4:	85be                	mv	a1,a5
204013e6:	8e4d                	or	a2,a2,a1
204013e8:	cec42823          	sw	a2,-784(s0)
204013ec:	87c2                	mv	a5,a6
204013ee:	8fd9                	or	a5,a5,a4
204013f0:	cef42a23          	sw	a5,-780(s0)
204013f4:	cf042783          	lw	a5,-784(s0)
204013f8:	cf442803          	lw	a6,-780(s0)
204013fc:	e2f42023          	sw	a5,-480(s0)
20401400:	e3042223          	sw	a6,-476(s0)
20401404:	b79d                	j	2040136a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xc72>
    return;
20401406:	0001                	nop
    delayMicroseconds(150);

    // finally, set to 4-bit interface
    write4bits(0x02); 
20401408:	4589                	li	a1,2
2040140a:	e0c42503          	lw	a0,-500(s0)
2040140e:	4cc010ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
20401412:	ad39                	j	20401a30 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1338>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
20401414:	e0c42783          	lw	a5,-500(s0)
20401418:	0137c783          	lbu	a5,19(a5)
2040141c:	0207e793          	ori	a5,a5,32
20401420:	0ff7f793          	andi	a5,a5,255
20401424:	85be                	mv	a1,a5
20401426:	e0c42503          	lw	a0,-500(s0)
2040142a:	2ad000ef          	jal	ra,20401ed6 <LiquidCrystal::command(unsigned char)>
2040142e:	6785                	lui	a5,0x1
20401430:	19478793          	addi	a5,a5,404 # 1194 <__stack_size+0x994>
20401434:	e8f42423          	sw	a5,-376(s0)
  if (usec == 0) {
20401438:	e8842783          	lw	a5,-376(s0)
2040143c:	2c078e63          	beqz	a5,20401718 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1020>
  rdmcycle(&current);
20401440:	b80027f3          	csrr	a5,mcycleh
20401444:	b0002773          	csrr	a4,mcycle
20401448:	b80026f3          	csrr	a3,mcycleh
2040144c:	fed79ae3          	bne	a5,a3,20401440 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xd48>
20401450:	e8f42223          	sw	a5,-380(s0)
20401454:	e8e42023          	sw	a4,-384(s0)
20401458:	e6d42e23          	sw	a3,-388(s0)
2040145c:	e8042783          	lw	a5,-384(s0)
20401460:	b4f42823          	sw	a5,-1200(s0)
20401464:	b4042a23          	sw	zero,-1196(s0)
20401468:	e8442783          	lw	a5,-380(s0)
2040146c:	b4f42423          	sw	a5,-1208(s0)
20401470:	b4042623          	sw	zero,-1204(s0)
20401474:	b4842783          	lw	a5,-1208(s0)
20401478:	00079793          	slli	a5,a5,0x0
2040147c:	b4f42223          	sw	a5,-1212(s0)
20401480:	b4042023          	sw	zero,-1216(s0)
20401484:	b5042683          	lw	a3,-1200(s0)
20401488:	b5442703          	lw	a4,-1196(s0)
2040148c:	8636                	mv	a2,a3
2040148e:	b4042783          	lw	a5,-1216(s0)
20401492:	b4442803          	lw	a6,-1212(s0)
20401496:	85be                	mv	a1,a5
20401498:	8e4d                	or	a2,a2,a1
2040149a:	b2c42c23          	sw	a2,-1224(s0)
2040149e:	87c2                	mv	a5,a6
204014a0:	8fd9                	or	a5,a5,a4
204014a2:	b2f42e23          	sw	a5,-1220(s0)
204014a6:	b3842783          	lw	a5,-1224(s0)
204014aa:	b3c42803          	lw	a6,-1220(s0)
204014ae:	e4f42023          	sw	a5,-448(s0)
204014b2:	e5042223          	sw	a6,-444(s0)
  later = current + usec * (F_CPU/1000000);
204014b6:	e8842783          	lw	a5,-376(s0)
204014ba:	b2f42823          	sw	a5,-1232(s0)
204014be:	b2042a23          	sw	zero,-1228(s0)
204014c2:	b3042683          	lw	a3,-1232(s0)
204014c6:	b3442703          	lw	a4,-1228(s0)
204014ca:	87b6                	mv	a5,a3
204014cc:	83f1                	srli	a5,a5,0x1c
204014ce:	863a                	mv	a2,a4
204014d0:	0612                	slli	a2,a2,0x4
204014d2:	dec42223          	sw	a2,-540(s0)
204014d6:	de442603          	lw	a2,-540(s0)
204014da:	8fd1                	or	a5,a5,a2
204014dc:	def42223          	sw	a5,-540(s0)
204014e0:	87b6                	mv	a5,a3
204014e2:	0792                	slli	a5,a5,0x4
204014e4:	def42023          	sw	a5,-544(s0)
204014e8:	de042783          	lw	a5,-544(s0)
204014ec:	de442803          	lw	a6,-540(s0)
204014f0:	e4042683          	lw	a3,-448(s0)
204014f4:	e4442703          	lw	a4,-444(s0)
204014f8:	00d78533          	add	a0,a5,a3
204014fc:	862a                	mv	a2,a0
204014fe:	00f63633          	sltu	a2,a2,a5
20401502:	00e805b3          	add	a1,a6,a4
20401506:	00b607b3          	add	a5,a2,a1
2040150a:	85be                	mv	a1,a5
2040150c:	e6a42823          	sw	a0,-400(s0)
20401510:	e6b42a23          	sw	a1,-396(s0)
  if (later > current) // usual case
20401514:	e4042603          	lw	a2,-448(s0)
20401518:	e4442683          	lw	a3,-444(s0)
2040151c:	e7442703          	lw	a4,-396(s0)
20401520:	87b6                	mv	a5,a3
20401522:	00e7ed63          	bltu	a5,a4,2040153c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xe44>
20401526:	e7442703          	lw	a4,-396(s0)
2040152a:	87b6                	mv	a5,a3
2040152c:	0af71763          	bne	a4,a5,204015da <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xee2>
20401530:	e7042703          	lw	a4,-400(s0)
20401534:	87b2                	mv	a5,a2
20401536:	00e7e363          	bltu	a5,a4,2040153c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xe44>
2040153a:	a045                	j	204015da <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xee2>
      while (later > current) {
2040153c:	e4042603          	lw	a2,-448(s0)
20401540:	e4442683          	lw	a3,-444(s0)
20401544:	e7442703          	lw	a4,-396(s0)
20401548:	87b6                	mv	a5,a3
2040154a:	00e7ec63          	bltu	a5,a4,20401562 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xe6a>
2040154e:	e7442703          	lw	a4,-396(s0)
20401552:	87b6                	mv	a5,a3
20401554:	1cf71363          	bne	a4,a5,2040171a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1022>
20401558:	e7042703          	lw	a4,-400(s0)
2040155c:	87b2                	mv	a5,a2
2040155e:	1ae7fe63          	bleu	a4,a5,2040171a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1022>
	rdmcycle(&current);
20401562:	b80027f3          	csrr	a5,mcycleh
20401566:	b0002773          	csrr	a4,mcycle
2040156a:	b80026f3          	csrr	a3,mcycleh
2040156e:	fed79ae3          	bne	a5,a3,20401562 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xe6a>
20401572:	e6f42623          	sw	a5,-404(s0)
20401576:	e6e42423          	sw	a4,-408(s0)
2040157a:	e6d42223          	sw	a3,-412(s0)
2040157e:	e6842783          	lw	a5,-408(s0)
20401582:	b2f42423          	sw	a5,-1240(s0)
20401586:	b2042623          	sw	zero,-1236(s0)
2040158a:	e6c42783          	lw	a5,-404(s0)
2040158e:	b2f42023          	sw	a5,-1248(s0)
20401592:	b2042223          	sw	zero,-1244(s0)
20401596:	b2042783          	lw	a5,-1248(s0)
2040159a:	00079793          	slli	a5,a5,0x0
2040159e:	b0f42e23          	sw	a5,-1252(s0)
204015a2:	b0042c23          	sw	zero,-1256(s0)
204015a6:	b2842683          	lw	a3,-1240(s0)
204015aa:	b2c42703          	lw	a4,-1236(s0)
204015ae:	8636                	mv	a2,a3
204015b0:	b1842783          	lw	a5,-1256(s0)
204015b4:	b1c42803          	lw	a6,-1252(s0)
204015b8:	85be                	mv	a1,a5
204015ba:	8e4d                	or	a2,a2,a1
204015bc:	b0c42823          	sw	a2,-1264(s0)
204015c0:	87c2                	mv	a5,a6
204015c2:	8fd9                	or	a5,a5,a4
204015c4:	b0f42a23          	sw	a5,-1260(s0)
204015c8:	b1042783          	lw	a5,-1264(s0)
204015cc:	b1442803          	lw	a6,-1260(s0)
204015d0:	e4f42023          	sw	a5,-448(s0)
204015d4:	e5042223          	sw	a6,-444(s0)
204015d8:	b795                	j	2040153c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xe44>
      while (later < current) {
204015da:	e4042603          	lw	a2,-448(s0)
204015de:	e4442683          	lw	a3,-444(s0)
204015e2:	e7442703          	lw	a4,-396(s0)
204015e6:	87b6                	mv	a5,a3
204015e8:	00f76d63          	bltu	a4,a5,20401602 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf0a>
204015ec:	e7442703          	lw	a4,-396(s0)
204015f0:	87b6                	mv	a5,a3
204015f2:	08f71463          	bne	a4,a5,2040167a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf82>
204015f6:	e7042703          	lw	a4,-400(s0)
204015fa:	87b2                	mv	a5,a2
204015fc:	00f76363          	bltu	a4,a5,20401602 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf0a>
20401600:	a8ad                	j	2040167a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf82>
	rdmcycle(&current);
20401602:	b80027f3          	csrr	a5,mcycleh
20401606:	b0002773          	csrr	a4,mcycle
2040160a:	b80026f3          	csrr	a3,mcycleh
2040160e:	fed79ae3          	bne	a5,a3,20401602 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf0a>
20401612:	e6f42023          	sw	a5,-416(s0)
20401616:	e4e42e23          	sw	a4,-420(s0)
2040161a:	e4d42c23          	sw	a3,-424(s0)
2040161e:	e5c42783          	lw	a5,-420(s0)
20401622:	b0f42423          	sw	a5,-1272(s0)
20401626:	b0042623          	sw	zero,-1268(s0)
2040162a:	e6042783          	lw	a5,-416(s0)
2040162e:	b0f42023          	sw	a5,-1280(s0)
20401632:	b0042223          	sw	zero,-1276(s0)
20401636:	b0042783          	lw	a5,-1280(s0)
2040163a:	00079793          	slli	a5,a5,0x0
2040163e:	aef42e23          	sw	a5,-1284(s0)
20401642:	ae042c23          	sw	zero,-1288(s0)
20401646:	b0842683          	lw	a3,-1272(s0)
2040164a:	b0c42703          	lw	a4,-1268(s0)
2040164e:	8636                	mv	a2,a3
20401650:	af842783          	lw	a5,-1288(s0)
20401654:	afc42803          	lw	a6,-1284(s0)
20401658:	85be                	mv	a1,a5
2040165a:	8e4d                	or	a2,a2,a1
2040165c:	aec42823          	sw	a2,-1296(s0)
20401660:	87c2                	mv	a5,a6
20401662:	8fd9                	or	a5,a5,a4
20401664:	aef42a23          	sw	a5,-1292(s0)
20401668:	af042783          	lw	a5,-1296(s0)
2040166c:	af442803          	lw	a6,-1292(s0)
20401670:	e4f42023          	sw	a5,-448(s0)
20401674:	e5042223          	sw	a6,-444(s0)
20401678:	b78d                	j	204015da <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xee2>
      while (current < later) {
2040167a:	e4042603          	lw	a2,-448(s0)
2040167e:	e4442683          	lw	a3,-444(s0)
20401682:	e7442703          	lw	a4,-396(s0)
20401686:	87b6                	mv	a5,a3
20401688:	00e7ec63          	bltu	a5,a4,204016a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xfa8>
2040168c:	e7442703          	lw	a4,-396(s0)
20401690:	87b6                	mv	a5,a3
20401692:	08f71463          	bne	a4,a5,2040171a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1022>
20401696:	e7042703          	lw	a4,-400(s0)
2040169a:	87b2                	mv	a5,a2
2040169c:	06e7ff63          	bleu	a4,a5,2040171a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1022>
	rdmcycle(&current);
204016a0:	b80027f3          	csrr	a5,mcycleh
204016a4:	b0002773          	csrr	a4,mcycle
204016a8:	b80026f3          	csrr	a3,mcycleh
204016ac:	fed79ae3          	bne	a5,a3,204016a0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xfa8>
204016b0:	e4f42a23          	sw	a5,-428(s0)
204016b4:	e4e42823          	sw	a4,-432(s0)
204016b8:	e4d42623          	sw	a3,-436(s0)
204016bc:	e5042783          	lw	a5,-432(s0)
204016c0:	aef42423          	sw	a5,-1304(s0)
204016c4:	ae042623          	sw	zero,-1300(s0)
204016c8:	e5442783          	lw	a5,-428(s0)
204016cc:	aef42023          	sw	a5,-1312(s0)
204016d0:	ae042223          	sw	zero,-1308(s0)
204016d4:	ae042783          	lw	a5,-1312(s0)
204016d8:	00079793          	slli	a5,a5,0x0
204016dc:	acf42e23          	sw	a5,-1316(s0)
204016e0:	ac042c23          	sw	zero,-1320(s0)
204016e4:	ae842683          	lw	a3,-1304(s0)
204016e8:	aec42703          	lw	a4,-1300(s0)
204016ec:	8636                	mv	a2,a3
204016ee:	ad842783          	lw	a5,-1320(s0)
204016f2:	adc42803          	lw	a6,-1316(s0)
204016f6:	85be                	mv	a1,a5
204016f8:	8e4d                	or	a2,a2,a1
204016fa:	acc42823          	sw	a2,-1328(s0)
204016fe:	87c2                	mv	a5,a6
20401700:	8fd9                	or	a5,a5,a4
20401702:	acf42a23          	sw	a5,-1324(s0)
20401706:	ad042783          	lw	a5,-1328(s0)
2040170a:	ad442803          	lw	a6,-1324(s0)
2040170e:	e4f42023          	sw	a5,-448(s0)
20401712:	e5042223          	sw	a6,-444(s0)
20401716:	b795                	j	2040167a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xf82>
    return;
20401718:	0001                	nop
    delayMicroseconds(4500);  // wait more than 4.1ms

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
2040171a:	e0c42783          	lw	a5,-500(s0)
2040171e:	0137c783          	lbu	a5,19(a5)
20401722:	0207e793          	ori	a5,a5,32
20401726:	0ff7f793          	andi	a5,a5,255
2040172a:	85be                	mv	a1,a5
2040172c:	e0c42503          	lw	a0,-500(s0)
20401730:	7a6000ef          	jal	ra,20401ed6 <LiquidCrystal::command(unsigned char)>
20401734:	09600793          	li	a5,150
20401738:	ecf42423          	sw	a5,-312(s0)
  if (usec == 0) {
2040173c:	ec842783          	lw	a5,-312(s0)
20401740:	2c078b63          	beqz	a5,20401a16 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x131e>
  rdmcycle(&current);
20401744:	b80027f3          	csrr	a5,mcycleh
20401748:	b0002773          	csrr	a4,mcycle
2040174c:	b80026f3          	csrr	a3,mcycleh
20401750:	fed79ae3          	bne	a5,a3,20401744 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x104c>
20401754:	ecf42223          	sw	a5,-316(s0)
20401758:	ece42023          	sw	a4,-320(s0)
2040175c:	ead42e23          	sw	a3,-324(s0)
20401760:	ec042783          	lw	a5,-320(s0)
20401764:	bcf42c23          	sw	a5,-1064(s0)
20401768:	bc042e23          	sw	zero,-1060(s0)
2040176c:	ec442783          	lw	a5,-316(s0)
20401770:	bcf42823          	sw	a5,-1072(s0)
20401774:	bc042a23          	sw	zero,-1068(s0)
20401778:	bd042783          	lw	a5,-1072(s0)
2040177c:	00079793          	slli	a5,a5,0x0
20401780:	bcf42623          	sw	a5,-1076(s0)
20401784:	bc042423          	sw	zero,-1080(s0)
20401788:	bd842683          	lw	a3,-1064(s0)
2040178c:	bdc42703          	lw	a4,-1060(s0)
20401790:	8636                	mv	a2,a3
20401792:	bc842783          	lw	a5,-1080(s0)
20401796:	bcc42803          	lw	a6,-1076(s0)
2040179a:	85be                	mv	a1,a5
2040179c:	8e4d                	or	a2,a2,a1
2040179e:	bcc42023          	sw	a2,-1088(s0)
204017a2:	87c2                	mv	a5,a6
204017a4:	8fd9                	or	a5,a5,a4
204017a6:	bcf42223          	sw	a5,-1084(s0)
204017aa:	bc042783          	lw	a5,-1088(s0)
204017ae:	bc442803          	lw	a6,-1084(s0)
204017b2:	e2f42c23          	sw	a5,-456(s0)
204017b6:	e3042e23          	sw	a6,-452(s0)
  later = current + usec * (F_CPU/1000000);
204017ba:	ec842783          	lw	a5,-312(s0)
204017be:	baf42c23          	sw	a5,-1096(s0)
204017c2:	ba042e23          	sw	zero,-1092(s0)
204017c6:	bb842683          	lw	a3,-1096(s0)
204017ca:	bbc42703          	lw	a4,-1092(s0)
204017ce:	87b6                	mv	a5,a3
204017d0:	83f1                	srli	a5,a5,0x1c
204017d2:	863a                	mv	a2,a4
204017d4:	0612                	slli	a2,a2,0x4
204017d6:	dec42623          	sw	a2,-532(s0)
204017da:	dec42603          	lw	a2,-532(s0)
204017de:	8fd1                	or	a5,a5,a2
204017e0:	def42623          	sw	a5,-532(s0)
204017e4:	87b6                	mv	a5,a3
204017e6:	0792                	slli	a5,a5,0x4
204017e8:	def42423          	sw	a5,-536(s0)
204017ec:	de842683          	lw	a3,-536(s0)
204017f0:	dec42703          	lw	a4,-532(s0)
204017f4:	e3842503          	lw	a0,-456(s0)
204017f8:	e3c42583          	lw	a1,-452(s0)
204017fc:	00a687b3          	add	a5,a3,a0
20401800:	863e                	mv	a2,a5
20401802:	00d63633          	sltu	a2,a2,a3
20401806:	00b70833          	add	a6,a4,a1
2040180a:	01060733          	add	a4,a2,a6
2040180e:	883a                	mv	a6,a4
20401810:	eaf42823          	sw	a5,-336(s0)
20401814:	eb042a23          	sw	a6,-332(s0)
  if (later > current) // usual case
20401818:	e3842683          	lw	a3,-456(s0)
2040181c:	e3c42703          	lw	a4,-452(s0)
20401820:	eb442783          	lw	a5,-332(s0)
20401824:	863a                	mv	a2,a4
20401826:	00f66d63          	bltu	a2,a5,20401840 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1148>
2040182a:	eb442783          	lw	a5,-332(s0)
2040182e:	863a                	mv	a2,a4
20401830:	0ac79663          	bne	a5,a2,204018dc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x11e4>
20401834:	eb042783          	lw	a5,-336(s0)
20401838:	8736                	mv	a4,a3
2040183a:	00f76363          	bltu	a4,a5,20401840 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1148>
2040183e:	a879                	j	204018dc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x11e4>
      while (later > current) {
20401840:	e3842783          	lw	a5,-456(s0)
20401844:	e3c42803          	lw	a6,-452(s0)
20401848:	eb442703          	lw	a4,-332(s0)
2040184c:	86c2                	mv	a3,a6
2040184e:	00e6eb63          	bltu	a3,a4,20401864 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x116c>
20401852:	eb442703          	lw	a4,-332(s0)
20401856:	86c2                	mv	a3,a6
20401858:	1cd71063          	bne	a4,a3,20401a18 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1320>
2040185c:	eb042703          	lw	a4,-336(s0)
20401860:	1ae7fc63          	bleu	a4,a5,20401a18 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1320>
	rdmcycle(&current);
20401864:	b80026f3          	csrr	a3,mcycleh
20401868:	b0002773          	csrr	a4,mcycle
2040186c:	b80027f3          	csrr	a5,mcycleh
20401870:	fef69ae3          	bne	a3,a5,20401864 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x116c>
20401874:	ead42623          	sw	a3,-340(s0)
20401878:	eae42423          	sw	a4,-344(s0)
2040187c:	eaf42223          	sw	a5,-348(s0)
20401880:	ea842783          	lw	a5,-344(s0)
20401884:	baf42823          	sw	a5,-1104(s0)
20401888:	ba042a23          	sw	zero,-1100(s0)
2040188c:	eac42783          	lw	a5,-340(s0)
20401890:	baf42423          	sw	a5,-1112(s0)
20401894:	ba042623          	sw	zero,-1108(s0)
20401898:	ba842783          	lw	a5,-1112(s0)
2040189c:	00079793          	slli	a5,a5,0x0
204018a0:	baf42223          	sw	a5,-1116(s0)
204018a4:	ba042023          	sw	zero,-1120(s0)
204018a8:	bb042683          	lw	a3,-1104(s0)
204018ac:	bb442703          	lw	a4,-1100(s0)
204018b0:	8636                	mv	a2,a3
204018b2:	ba042783          	lw	a5,-1120(s0)
204018b6:	ba442803          	lw	a6,-1116(s0)
204018ba:	85be                	mv	a1,a5
204018bc:	8e4d                	or	a2,a2,a1
204018be:	b8c42c23          	sw	a2,-1128(s0)
204018c2:	87c2                	mv	a5,a6
204018c4:	8fd9                	or	a5,a5,a4
204018c6:	b8f42e23          	sw	a5,-1124(s0)
204018ca:	b9842783          	lw	a5,-1128(s0)
204018ce:	b9c42803          	lw	a6,-1124(s0)
204018d2:	e2f42c23          	sw	a5,-456(s0)
204018d6:	e3042e23          	sw	a6,-452(s0)
204018da:	b79d                	j	20401840 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1148>
      while (later < current) {
204018dc:	e3842783          	lw	a5,-456(s0)
204018e0:	e3c42803          	lw	a6,-452(s0)
204018e4:	eb442703          	lw	a4,-332(s0)
204018e8:	86c2                	mv	a3,a6
204018ea:	00d76c63          	bltu	a4,a3,20401902 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x120a>
204018ee:	eb442703          	lw	a4,-332(s0)
204018f2:	86c2                	mv	a3,a6
204018f4:	08d71363          	bne	a4,a3,2040197a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1282>
204018f8:	eb042703          	lw	a4,-336(s0)
204018fc:	00f76363          	bltu	a4,a5,20401902 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x120a>
20401900:	a8ad                	j	2040197a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1282>
	rdmcycle(&current);
20401902:	b80026f3          	csrr	a3,mcycleh
20401906:	b0002773          	csrr	a4,mcycle
2040190a:	b80027f3          	csrr	a5,mcycleh
2040190e:	fef69ae3          	bne	a3,a5,20401902 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x120a>
20401912:	ead42023          	sw	a3,-352(s0)
20401916:	e8e42e23          	sw	a4,-356(s0)
2040191a:	e8f42c23          	sw	a5,-360(s0)
2040191e:	e9c42783          	lw	a5,-356(s0)
20401922:	b8f42823          	sw	a5,-1136(s0)
20401926:	b8042a23          	sw	zero,-1132(s0)
2040192a:	ea042783          	lw	a5,-352(s0)
2040192e:	b8f42423          	sw	a5,-1144(s0)
20401932:	b8042623          	sw	zero,-1140(s0)
20401936:	b8842783          	lw	a5,-1144(s0)
2040193a:	00079793          	slli	a5,a5,0x0
2040193e:	b8f42223          	sw	a5,-1148(s0)
20401942:	b8042023          	sw	zero,-1152(s0)
20401946:	b9042683          	lw	a3,-1136(s0)
2040194a:	b9442703          	lw	a4,-1132(s0)
2040194e:	8636                	mv	a2,a3
20401950:	b8042783          	lw	a5,-1152(s0)
20401954:	b8442803          	lw	a6,-1148(s0)
20401958:	85be                	mv	a1,a5
2040195a:	8e4d                	or	a2,a2,a1
2040195c:	b6c42c23          	sw	a2,-1160(s0)
20401960:	87c2                	mv	a5,a6
20401962:	8fd9                	or	a5,a5,a4
20401964:	b6f42e23          	sw	a5,-1156(s0)
20401968:	b7842783          	lw	a5,-1160(s0)
2040196c:	b7c42803          	lw	a6,-1156(s0)
20401970:	e2f42c23          	sw	a5,-456(s0)
20401974:	e3042e23          	sw	a6,-452(s0)
20401978:	b795                	j	204018dc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x11e4>
      while (current < later) {
2040197a:	e3842783          	lw	a5,-456(s0)
2040197e:	e3c42803          	lw	a6,-452(s0)
20401982:	eb442703          	lw	a4,-332(s0)
20401986:	86c2                	mv	a3,a6
20401988:	00e6eb63          	bltu	a3,a4,2040199e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x12a6>
2040198c:	eb442703          	lw	a4,-332(s0)
20401990:	86c2                	mv	a3,a6
20401992:	08d71363          	bne	a4,a3,20401a18 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1320>
20401996:	eb042703          	lw	a4,-336(s0)
2040199a:	06e7ff63          	bleu	a4,a5,20401a18 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1320>
	rdmcycle(&current);
2040199e:	b80026f3          	csrr	a3,mcycleh
204019a2:	b0002773          	csrr	a4,mcycle
204019a6:	b80027f3          	csrr	a5,mcycleh
204019aa:	fef69ae3          	bne	a3,a5,2040199e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x12a6>
204019ae:	e8d42a23          	sw	a3,-364(s0)
204019b2:	e8e42823          	sw	a4,-368(s0)
204019b6:	e8f42623          	sw	a5,-372(s0)
204019ba:	e9042783          	lw	a5,-368(s0)
204019be:	b6f42823          	sw	a5,-1168(s0)
204019c2:	b6042a23          	sw	zero,-1164(s0)
204019c6:	e9442783          	lw	a5,-364(s0)
204019ca:	b6f42423          	sw	a5,-1176(s0)
204019ce:	b6042623          	sw	zero,-1172(s0)
204019d2:	b6842783          	lw	a5,-1176(s0)
204019d6:	00079793          	slli	a5,a5,0x0
204019da:	b6f42223          	sw	a5,-1180(s0)
204019de:	b6042023          	sw	zero,-1184(s0)
204019e2:	b7042683          	lw	a3,-1168(s0)
204019e6:	b7442703          	lw	a4,-1164(s0)
204019ea:	8636                	mv	a2,a3
204019ec:	b6042783          	lw	a5,-1184(s0)
204019f0:	b6442803          	lw	a6,-1180(s0)
204019f4:	85be                	mv	a1,a5
204019f6:	8e4d                	or	a2,a2,a1
204019f8:	b4c42c23          	sw	a2,-1192(s0)
204019fc:	87c2                	mv	a5,a6
204019fe:	8fd9                	or	a5,a5,a4
20401a00:	b4f42e23          	sw	a5,-1188(s0)
20401a04:	b5842783          	lw	a5,-1192(s0)
20401a08:	b5c42803          	lw	a6,-1188(s0)
20401a0c:	e2f42c23          	sw	a5,-456(s0)
20401a10:	e3042e23          	sw	a6,-452(s0)
20401a14:	b79d                	j	2040197a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x1282>
    return;
20401a16:	0001                	nop
    delayMicroseconds(150);

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
20401a18:	e0c42783          	lw	a5,-500(s0)
20401a1c:	0137c783          	lbu	a5,19(a5)
20401a20:	0207e793          	ori	a5,a5,32
20401a24:	0ff7f793          	andi	a5,a5,255
20401a28:	85be                	mv	a1,a5
20401a2a:	e0c42503          	lw	a0,-500(s0)
20401a2e:	2165                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
20401a30:	e0c42783          	lw	a5,-500(s0)
20401a34:	0137c783          	lbu	a5,19(a5)
20401a38:	0207e793          	ori	a5,a5,32
20401a3c:	0ff7f793          	andi	a5,a5,255
20401a40:	85be                	mv	a1,a5
20401a42:	e0c42503          	lw	a0,-500(s0)
20401a46:	2941                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
20401a48:	e0c42783          	lw	a5,-500(s0)
20401a4c:	4711                	li	a4,4
20401a4e:	00e78a23          	sb	a4,20(a5)
  display();
20401a52:	e0c42503          	lw	a0,-500(s0)
20401a56:	2925                	jal	20401e8e <LiquidCrystal::display()>

  // clear it off
  clear();
20401a58:	e0c42503          	lw	a0,-500(s0)
20401a5c:	20c9                	jal	20401b1e <LiquidCrystal::clear()>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
20401a5e:	e0c42783          	lw	a5,-500(s0)
20401a62:	4709                	li	a4,2
20401a64:	00e78aa3          	sb	a4,21(a5)
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
20401a68:	e0c42783          	lw	a5,-500(s0)
20401a6c:	0157c783          	lbu	a5,21(a5)
20401a70:	0047e793          	ori	a5,a5,4
20401a74:	0ff7f793          	andi	a5,a5,255
20401a78:	85be                	mv	a1,a5
20401a7a:	e0c42503          	lw	a0,-500(s0)
20401a7e:	29a1                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>

}
20401a80:	0001                	nop
20401a82:	838a                	mv	t2,sp
20401a84:	52c12083          	lw	ra,1324(sp)
20401a88:	52812403          	lw	s0,1320(sp)
20401a8c:	52412903          	lw	s2,1316(sp)
20401a90:	52012983          	lw	s3,1312(sp)
20401a94:	51c12a03          	lw	s4,1308(sp)
20401a98:	51812a83          	lw	s5,1304(sp)
20401a9c:	51412b03          	lw	s6,1300(sp)
20401aa0:	51012b83          	lw	s7,1296(sp)
20401aa4:	50c12c03          	lw	s8,1292(sp)
20401aa8:	50812c83          	lw	s9,1288(sp)
20401aac:	50412d03          	lw	s10,1284(sp)
20401ab0:	50012d83          	lw	s11,1280(sp)
20401ab4:	53010113          	addi	sp,sp,1328
20401ab8:	8082                	ret

20401aba <LiquidCrystal::setRowOffsets(int, int, int, int)>:

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
20401aba:	7179                	addi	sp,sp,-48
20401abc:	d622                	sw	s0,44(sp)
20401abe:	1800                	addi	s0,sp,48
20401ac0:	fea42623          	sw	a0,-20(s0)
20401ac4:	feb42423          	sw	a1,-24(s0)
20401ac8:	fec42223          	sw	a2,-28(s0)
20401acc:	fed42023          	sw	a3,-32(s0)
20401ad0:	fce42e23          	sw	a4,-36(s0)
  _row_offsets[0] = row0;
20401ad4:	fe842783          	lw	a5,-24(s0)
20401ad8:	0ff7f713          	andi	a4,a5,255
20401adc:	fec42783          	lw	a5,-20(s0)
20401ae0:	00e78c23          	sb	a4,24(a5)
  _row_offsets[1] = row1;
20401ae4:	fe442783          	lw	a5,-28(s0)
20401ae8:	0ff7f713          	andi	a4,a5,255
20401aec:	fec42783          	lw	a5,-20(s0)
20401af0:	00e78ca3          	sb	a4,25(a5)
  _row_offsets[2] = row2;
20401af4:	fe042783          	lw	a5,-32(s0)
20401af8:	0ff7f713          	andi	a4,a5,255
20401afc:	fec42783          	lw	a5,-20(s0)
20401b00:	00e78d23          	sb	a4,26(a5)
  _row_offsets[3] = row3;
20401b04:	fdc42783          	lw	a5,-36(s0)
20401b08:	0ff7f713          	andi	a4,a5,255
20401b0c:	fec42783          	lw	a5,-20(s0)
20401b10:	00e78da3          	sb	a4,27(a5)
}
20401b14:	0001                	nop
20401b16:	838a                	mv	t2,sp
20401b18:	5432                	lw	s0,44(sp)
20401b1a:	6145                	addi	sp,sp,48
20401b1c:	8082                	ret

20401b1e <LiquidCrystal::clear()>:

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
20401b1e:	7151                	addi	sp,sp,-240
20401b20:	d786                	sw	ra,236(sp)
20401b22:	d5a2                	sw	s0,232(sp)
20401b24:	d3ca                	sw	s2,228(sp)
20401b26:	d1ce                	sw	s3,224(sp)
20401b28:	cfd2                	sw	s4,220(sp)
20401b2a:	cdd6                	sw	s5,216(sp)
20401b2c:	cbda                	sw	s6,212(sp)
20401b2e:	c9de                	sw	s7,208(sp)
20401b30:	c7e2                	sw	s8,204(sp)
20401b32:	c5e6                	sw	s9,200(sp)
20401b34:	c3ea                	sw	s10,196(sp)
20401b36:	c1ee                	sw	s11,192(sp)
20401b38:	1980                	addi	s0,sp,240
20401b3a:	f6a42e23          	sw	a0,-132(s0)
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
20401b3e:	4585                	li	a1,1
20401b40:	f7c42503          	lw	a0,-132(s0)
20401b44:	2e49                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>
20401b46:	7d000793          	li	a5,2000
20401b4a:	fcf42623          	sw	a5,-52(s0)
  if (usec == 0) {
20401b4e:	fcc42783          	lw	a5,-52(s0)
20401b52:	e399                	bnez	a5,20401b58 <LiquidCrystal::clear()+0x3a>
    return;
20401b54:	0001                	nop
  delayMicroseconds(2000);  // this command takes a long time!
}
20401b56:	a479                	j	20401de4 <LiquidCrystal::clear()+0x2c6>
  rdmcycle(&current);
20401b58:	b80027f3          	csrr	a5,mcycleh
20401b5c:	b0002773          	csrr	a4,mcycle
20401b60:	b80026f3          	csrr	a3,mcycleh
20401b64:	fed79ae3          	bne	a5,a3,20401b58 <LiquidCrystal::clear()+0x3a>
20401b68:	fcf42423          	sw	a5,-56(s0)
20401b6c:	fce42223          	sw	a4,-60(s0)
20401b70:	fcd42023          	sw	a3,-64(s0)
20401b74:	fc442783          	lw	a5,-60(s0)
20401b78:	8c3e                	mv	s8,a5
20401b7a:	4c81                	li	s9,0
20401b7c:	fc842783          	lw	a5,-56(s0)
20401b80:	f6f42823          	sw	a5,-144(s0)
20401b84:	f6042a23          	sw	zero,-140(s0)
20401b88:	f7042783          	lw	a5,-144(s0)
20401b8c:	00079a93          	slli	s5,a5,0x0
20401b90:	4a01                	li	s4,0
20401b92:	014c6d33          	or	s10,s8,s4
20401b96:	015cedb3          	or	s11,s9,s5
20401b9a:	f9a42423          	sw	s10,-120(s0)
20401b9e:	f9b42623          	sw	s11,-116(s0)
  later = current + usec * (F_CPU/1000000);
20401ba2:	fcc42783          	lw	a5,-52(s0)
20401ba6:	8b3e                	mv	s6,a5
20401ba8:	4b81                	li	s7,0
20401baa:	01cb5793          	srli	a5,s6,0x1c
20401bae:	004b9993          	slli	s3,s7,0x4
20401bb2:	0137e9b3          	or	s3,a5,s3
20401bb6:	004b1913          	slli	s2,s6,0x4
20401bba:	87ca                	mv	a5,s2
20401bbc:	884e                	mv	a6,s3
20401bbe:	f8842583          	lw	a1,-120(s0)
20401bc2:	f8c42603          	lw	a2,-116(s0)
20401bc6:	00b786b3          	add	a3,a5,a1
20401bca:	8536                	mv	a0,a3
20401bcc:	00f53533          	sltu	a0,a0,a5
20401bd0:	00c80733          	add	a4,a6,a2
20401bd4:	00e507b3          	add	a5,a0,a4
20401bd8:	873e                	mv	a4,a5
20401bda:	fad42c23          	sw	a3,-72(s0)
20401bde:	fae42e23          	sw	a4,-68(s0)
  if (later > current) // usual case
20401be2:	f8842683          	lw	a3,-120(s0)
20401be6:	f8c42703          	lw	a4,-116(s0)
20401bea:	fbc42603          	lw	a2,-68(s0)
20401bee:	87ba                	mv	a5,a4
20401bf0:	00c7ed63          	bltu	a5,a2,20401c0a <LiquidCrystal::clear()+0xec>
20401bf4:	fbc42603          	lw	a2,-68(s0)
20401bf8:	87ba                	mv	a5,a4
20401bfa:	0af61763          	bne	a2,a5,20401ca8 <LiquidCrystal::clear()+0x18a>
20401bfe:	fb842783          	lw	a5,-72(s0)
20401c02:	8736                	mv	a4,a3
20401c04:	00f76363          	bltu	a4,a5,20401c0a <LiquidCrystal::clear()+0xec>
20401c08:	a045                	j	20401ca8 <LiquidCrystal::clear()+0x18a>
      while (later > current) {
20401c0a:	f8842783          	lw	a5,-120(s0)
20401c0e:	f8c42803          	lw	a6,-116(s0)
20401c12:	fbc42703          	lw	a4,-68(s0)
20401c16:	86c2                	mv	a3,a6
20401c18:	00e6ec63          	bltu	a3,a4,20401c30 <LiquidCrystal::clear()+0x112>
20401c1c:	fbc42703          	lw	a4,-68(s0)
20401c20:	86c2                	mv	a3,a6
20401c22:	1cd71163          	bne	a4,a3,20401de4 <LiquidCrystal::clear()+0x2c6>
20401c26:	fb842703          	lw	a4,-72(s0)
20401c2a:	00e7e363          	bltu	a5,a4,20401c30 <LiquidCrystal::clear()+0x112>
20401c2e:	aa5d                	j	20401de4 <LiquidCrystal::clear()+0x2c6>
	rdmcycle(&current);
20401c30:	b80026f3          	csrr	a3,mcycleh
20401c34:	b0002773          	csrr	a4,mcycle
20401c38:	b80027f3          	csrr	a5,mcycleh
20401c3c:	fef69ae3          	bne	a3,a5,20401c30 <LiquidCrystal::clear()+0x112>
20401c40:	fad42a23          	sw	a3,-76(s0)
20401c44:	fae42823          	sw	a4,-80(s0)
20401c48:	faf42623          	sw	a5,-84(s0)
20401c4c:	fb042783          	lw	a5,-80(s0)
20401c50:	f6f42423          	sw	a5,-152(s0)
20401c54:	f6042623          	sw	zero,-148(s0)
20401c58:	fb442783          	lw	a5,-76(s0)
20401c5c:	f6f42023          	sw	a5,-160(s0)
20401c60:	f6042223          	sw	zero,-156(s0)
20401c64:	f6042783          	lw	a5,-160(s0)
20401c68:	00079793          	slli	a5,a5,0x0
20401c6c:	f4f42e23          	sw	a5,-164(s0)
20401c70:	f4042c23          	sw	zero,-168(s0)
20401c74:	f6842683          	lw	a3,-152(s0)
20401c78:	f6c42703          	lw	a4,-148(s0)
20401c7c:	8636                	mv	a2,a3
20401c7e:	f5842783          	lw	a5,-168(s0)
20401c82:	f5c42803          	lw	a6,-164(s0)
20401c86:	85be                	mv	a1,a5
20401c88:	8e4d                	or	a2,a2,a1
20401c8a:	f4c42823          	sw	a2,-176(s0)
20401c8e:	87c2                	mv	a5,a6
20401c90:	8fd9                	or	a5,a5,a4
20401c92:	f4f42a23          	sw	a5,-172(s0)
20401c96:	f5042783          	lw	a5,-176(s0)
20401c9a:	f5442803          	lw	a6,-172(s0)
20401c9e:	f8f42423          	sw	a5,-120(s0)
20401ca2:	f9042623          	sw	a6,-116(s0)
20401ca6:	b795                	j	20401c0a <LiquidCrystal::clear()+0xec>
      while (later < current) {
20401ca8:	f8842783          	lw	a5,-120(s0)
20401cac:	f8c42803          	lw	a6,-116(s0)
20401cb0:	fbc42703          	lw	a4,-68(s0)
20401cb4:	86c2                	mv	a3,a6
20401cb6:	00d76c63          	bltu	a4,a3,20401cce <LiquidCrystal::clear()+0x1b0>
20401cba:	fbc42703          	lw	a4,-68(s0)
20401cbe:	86c2                	mv	a3,a6
20401cc0:	08d71363          	bne	a4,a3,20401d46 <LiquidCrystal::clear()+0x228>
20401cc4:	fb842703          	lw	a4,-72(s0)
20401cc8:	00f76363          	bltu	a4,a5,20401cce <LiquidCrystal::clear()+0x1b0>
20401ccc:	a8ad                	j	20401d46 <LiquidCrystal::clear()+0x228>
	rdmcycle(&current);
20401cce:	b80026f3          	csrr	a3,mcycleh
20401cd2:	b0002773          	csrr	a4,mcycle
20401cd6:	b80027f3          	csrr	a5,mcycleh
20401cda:	fef69ae3          	bne	a3,a5,20401cce <LiquidCrystal::clear()+0x1b0>
20401cde:	fad42423          	sw	a3,-88(s0)
20401ce2:	fae42223          	sw	a4,-92(s0)
20401ce6:	faf42023          	sw	a5,-96(s0)
20401cea:	fa442783          	lw	a5,-92(s0)
20401cee:	f4f42423          	sw	a5,-184(s0)
20401cf2:	f4042623          	sw	zero,-180(s0)
20401cf6:	fa842783          	lw	a5,-88(s0)
20401cfa:	f4f42023          	sw	a5,-192(s0)
20401cfe:	f4042223          	sw	zero,-188(s0)
20401d02:	f4042783          	lw	a5,-192(s0)
20401d06:	00079793          	slli	a5,a5,0x0
20401d0a:	f2f42e23          	sw	a5,-196(s0)
20401d0e:	f2042c23          	sw	zero,-200(s0)
20401d12:	f4842683          	lw	a3,-184(s0)
20401d16:	f4c42703          	lw	a4,-180(s0)
20401d1a:	8636                	mv	a2,a3
20401d1c:	f3842783          	lw	a5,-200(s0)
20401d20:	f3c42803          	lw	a6,-196(s0)
20401d24:	85be                	mv	a1,a5
20401d26:	8e4d                	or	a2,a2,a1
20401d28:	f2c42823          	sw	a2,-208(s0)
20401d2c:	87c2                	mv	a5,a6
20401d2e:	8fd9                	or	a5,a5,a4
20401d30:	f2f42a23          	sw	a5,-204(s0)
20401d34:	f3042783          	lw	a5,-208(s0)
20401d38:	f3442803          	lw	a6,-204(s0)
20401d3c:	f8f42423          	sw	a5,-120(s0)
20401d40:	f9042623          	sw	a6,-116(s0)
20401d44:	b795                	j	20401ca8 <LiquidCrystal::clear()+0x18a>
      while (current < later) {
20401d46:	f8842783          	lw	a5,-120(s0)
20401d4a:	f8c42803          	lw	a6,-116(s0)
20401d4e:	fbc42703          	lw	a4,-68(s0)
20401d52:	86c2                	mv	a3,a6
20401d54:	00e6ec63          	bltu	a3,a4,20401d6c <LiquidCrystal::clear()+0x24e>
20401d58:	fbc42703          	lw	a4,-68(s0)
20401d5c:	86c2                	mv	a3,a6
20401d5e:	08d71363          	bne	a4,a3,20401de4 <LiquidCrystal::clear()+0x2c6>
20401d62:	fb842703          	lw	a4,-72(s0)
20401d66:	00e7e363          	bltu	a5,a4,20401d6c <LiquidCrystal::clear()+0x24e>
20401d6a:	a8ad                	j	20401de4 <LiquidCrystal::clear()+0x2c6>
	rdmcycle(&current);
20401d6c:	b80026f3          	csrr	a3,mcycleh
20401d70:	b0002773          	csrr	a4,mcycle
20401d74:	b80027f3          	csrr	a5,mcycleh
20401d78:	fef69ae3          	bne	a3,a5,20401d6c <LiquidCrystal::clear()+0x24e>
20401d7c:	f8d42e23          	sw	a3,-100(s0)
20401d80:	f8e42c23          	sw	a4,-104(s0)
20401d84:	f8f42a23          	sw	a5,-108(s0)
20401d88:	f9842783          	lw	a5,-104(s0)
20401d8c:	f2f42423          	sw	a5,-216(s0)
20401d90:	f2042623          	sw	zero,-212(s0)
20401d94:	f9c42783          	lw	a5,-100(s0)
20401d98:	f2f42023          	sw	a5,-224(s0)
20401d9c:	f2042223          	sw	zero,-220(s0)
20401da0:	f2042783          	lw	a5,-224(s0)
20401da4:	00079793          	slli	a5,a5,0x0
20401da8:	f0f42e23          	sw	a5,-228(s0)
20401dac:	f0042c23          	sw	zero,-232(s0)
20401db0:	f2842683          	lw	a3,-216(s0)
20401db4:	f2c42703          	lw	a4,-212(s0)
20401db8:	8636                	mv	a2,a3
20401dba:	f1842783          	lw	a5,-232(s0)
20401dbe:	f1c42803          	lw	a6,-228(s0)
20401dc2:	85be                	mv	a1,a5
20401dc4:	8e4d                	or	a2,a2,a1
20401dc6:	f0c42823          	sw	a2,-240(s0)
20401dca:	87c2                	mv	a5,a6
20401dcc:	8fd9                	or	a5,a5,a4
20401dce:	f0f42a23          	sw	a5,-236(s0)
20401dd2:	f1042783          	lw	a5,-240(s0)
20401dd6:	f1442803          	lw	a6,-236(s0)
20401dda:	f8f42423          	sw	a5,-120(s0)
20401dde:	f9042623          	sw	a6,-116(s0)
20401de2:	b795                	j	20401d46 <LiquidCrystal::clear()+0x228>
20401de4:	0001                	nop
20401de6:	838a                	mv	t2,sp
20401de8:	50be                	lw	ra,236(sp)
20401dea:	542e                	lw	s0,232(sp)
20401dec:	591e                	lw	s2,228(sp)
20401dee:	598e                	lw	s3,224(sp)
20401df0:	4a7e                	lw	s4,220(sp)
20401df2:	4aee                	lw	s5,216(sp)
20401df4:	4b5e                	lw	s6,212(sp)
20401df6:	4bce                	lw	s7,208(sp)
20401df8:	4c3e                	lw	s8,204(sp)
20401dfa:	4cae                	lw	s9,200(sp)
20401dfc:	4d1e                	lw	s10,196(sp)
20401dfe:	4d8e                	lw	s11,192(sp)
20401e00:	616d                	addi	sp,sp,240
20401e02:	8082                	ret

20401e04 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
20401e04:	7179                	addi	sp,sp,-48
20401e06:	d606                	sw	ra,44(sp)
20401e08:	d422                	sw	s0,40(sp)
20401e0a:	1800                	addi	s0,sp,48
20401e0c:	fca42e23          	sw	a0,-36(s0)
20401e10:	87ae                	mv	a5,a1
20401e12:	8732                	mv	a4,a2
20401e14:	fcf40da3          	sb	a5,-37(s0)
20401e18:	87ba                	mv	a5,a4
20401e1a:	fcf40d23          	sb	a5,-38(s0)
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
20401e1e:	4791                	li	a5,4
20401e20:	fef42623          	sw	a5,-20(s0)
  if ( row >= max_lines ) {
20401e24:	fda44703          	lbu	a4,-38(s0)
20401e28:	478d                	li	a5,3
20401e2a:	00e7f563          	bleu	a4,a5,20401e34 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x30>
    row = max_lines - 1;    // we count rows starting w/0
20401e2e:	478d                	li	a5,3
20401e30:	fcf40d23          	sb	a5,-38(s0)
  }
  if ( row >= _numlines ) {
20401e34:	fdc42783          	lw	a5,-36(s0)
20401e38:	0177c783          	lbu	a5,23(a5)
20401e3c:	fda44703          	lbu	a4,-38(s0)
20401e40:	00f76963          	bltu	a4,a5,20401e52 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x4e>
    row = _numlines - 1;    // we count rows starting w/0
20401e44:	fdc42783          	lw	a5,-36(s0)
20401e48:	0177c783          	lbu	a5,23(a5)
20401e4c:	17fd                	addi	a5,a5,-1
20401e4e:	fcf40d23          	sb	a5,-38(s0)
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
20401e52:	fda44783          	lbu	a5,-38(s0)
20401e56:	fdc42703          	lw	a4,-36(s0)
20401e5a:	97ba                	add	a5,a5,a4
20401e5c:	0187c703          	lbu	a4,24(a5)
20401e60:	fdb44783          	lbu	a5,-37(s0)
20401e64:	97ba                	add	a5,a5,a4
20401e66:	0ff7f793          	andi	a5,a5,255
20401e6a:	07e2                	slli	a5,a5,0x18
20401e6c:	87e1                	srai	a5,a5,0x18
20401e6e:	f807e793          	ori	a5,a5,-128
20401e72:	07e2                	slli	a5,a5,0x18
20401e74:	87e1                	srai	a5,a5,0x18
20401e76:	0ff7f793          	andi	a5,a5,255
20401e7a:	85be                	mv	a1,a5
20401e7c:	fdc42503          	lw	a0,-36(s0)
20401e80:	2899                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>
}
20401e82:	0001                	nop
20401e84:	838a                	mv	t2,sp
20401e86:	50b2                	lw	ra,44(sp)
20401e88:	5422                	lw	s0,40(sp)
20401e8a:	6145                	addi	sp,sp,48
20401e8c:	8082                	ret

20401e8e <LiquidCrystal::display()>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
20401e8e:	1101                	addi	sp,sp,-32
20401e90:	ce06                	sw	ra,28(sp)
20401e92:	cc22                	sw	s0,24(sp)
20401e94:	1000                	addi	s0,sp,32
20401e96:	fea42623          	sw	a0,-20(s0)
  _displaycontrol |= LCD_DISPLAYON;
20401e9a:	fec42783          	lw	a5,-20(s0)
20401e9e:	0147c783          	lbu	a5,20(a5)
20401ea2:	0047e793          	ori	a5,a5,4
20401ea6:	0ff7f713          	andi	a4,a5,255
20401eaa:	fec42783          	lw	a5,-20(s0)
20401eae:	00e78a23          	sb	a4,20(a5)
  command(LCD_DISPLAYCONTROL | _displaycontrol);
20401eb2:	fec42783          	lw	a5,-20(s0)
20401eb6:	0147c783          	lbu	a5,20(a5)
20401eba:	0087e793          	ori	a5,a5,8
20401ebe:	0ff7f793          	andi	a5,a5,255
20401ec2:	85be                	mv	a1,a5
20401ec4:	fec42503          	lw	a0,-20(s0)
20401ec8:	2039                	jal	20401ed6 <LiquidCrystal::command(unsigned char)>
}
20401eca:	0001                	nop
20401ecc:	838a                	mv	t2,sp
20401ece:	40f2                	lw	ra,28(sp)
20401ed0:	4462                	lw	s0,24(sp)
20401ed2:	6105                	addi	sp,sp,32
20401ed4:	8082                	ret

20401ed6 <LiquidCrystal::command(unsigned char)>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
20401ed6:	1101                	addi	sp,sp,-32
20401ed8:	ce06                	sw	ra,28(sp)
20401eda:	cc22                	sw	s0,24(sp)
20401edc:	1000                	addi	s0,sp,32
20401ede:	fea42623          	sw	a0,-20(s0)
20401ee2:	87ae                	mv	a5,a1
20401ee4:	fef405a3          	sb	a5,-21(s0)
  send(value, LOW);
20401ee8:	feb44783          	lbu	a5,-21(s0)
20401eec:	4601                	li	a2,0
20401eee:	85be                	mv	a1,a5
20401ef0:	fec42503          	lw	a0,-20(s0)
20401ef4:	2835                	jal	20401f30 <LiquidCrystal::send(unsigned char, unsigned char)>
}
20401ef6:	0001                	nop
20401ef8:	838a                	mv	t2,sp
20401efa:	40f2                	lw	ra,28(sp)
20401efc:	4462                	lw	s0,24(sp)
20401efe:	6105                	addi	sp,sp,32
20401f00:	8082                	ret

20401f02 <LiquidCrystal::write(unsigned char)>:

inline size_t LiquidCrystal::write(uint8_t value) {
20401f02:	1101                	addi	sp,sp,-32
20401f04:	ce06                	sw	ra,28(sp)
20401f06:	cc22                	sw	s0,24(sp)
20401f08:	1000                	addi	s0,sp,32
20401f0a:	fea42623          	sw	a0,-20(s0)
20401f0e:	87ae                	mv	a5,a1
20401f10:	fef405a3          	sb	a5,-21(s0)
  send(value, HIGH);
20401f14:	feb44783          	lbu	a5,-21(s0)
20401f18:	4605                	li	a2,1
20401f1a:	85be                	mv	a1,a5
20401f1c:	fec42503          	lw	a0,-20(s0)
20401f20:	2801                	jal	20401f30 <LiquidCrystal::send(unsigned char, unsigned char)>
  return 1; // assume sucess
20401f22:	4785                	li	a5,1
}
20401f24:	853e                	mv	a0,a5
20401f26:	838a                	mv	t2,sp
20401f28:	40f2                	lw	ra,28(sp)
20401f2a:	4462                	lw	s0,24(sp)
20401f2c:	6105                	addi	sp,sp,32
20401f2e:	8082                	ret

20401f30 <LiquidCrystal::send(unsigned char, unsigned char)>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
20401f30:	1101                	addi	sp,sp,-32
20401f32:	ce06                	sw	ra,28(sp)
20401f34:	cc22                	sw	s0,24(sp)
20401f36:	1000                	addi	s0,sp,32
20401f38:	fea42623          	sw	a0,-20(s0)
20401f3c:	87ae                	mv	a5,a1
20401f3e:	8732                	mv	a4,a2
20401f40:	fef405a3          	sb	a5,-21(s0)
20401f44:	87ba                	mv	a5,a4
20401f46:	fef40523          	sb	a5,-22(s0)
  digitalWrite(_rs_pin, mode);
20401f4a:	fec42783          	lw	a5,-20(s0)
20401f4e:	0087c783          	lbu	a5,8(a5)
20401f52:	873e                	mv	a4,a5
20401f54:	fea44783          	lbu	a5,-22(s0)
20401f58:	85be                	mv	a1,a5
20401f5a:	853a                	mv	a0,a4
20401f5c:	3e1000ef          	jal	ra,20402b3c <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
20401f60:	fec42783          	lw	a5,-20(s0)
20401f64:	0097c703          	lbu	a4,9(a5)
20401f68:	0ff00793          	li	a5,255
20401f6c:	00f70a63          	beq	a4,a5,20401f80 <LiquidCrystal::send(unsigned char, unsigned char)+0x50>
    digitalWrite(_rw_pin, LOW);
20401f70:	fec42783          	lw	a5,-20(s0)
20401f74:	0097c783          	lbu	a5,9(a5)
20401f78:	4581                	li	a1,0
20401f7a:	853e                	mv	a0,a5
20401f7c:	3c1000ef          	jal	ra,20402b3c <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
20401f80:	fec42783          	lw	a5,-20(s0)
20401f84:	0137c783          	lbu	a5,19(a5)
20401f88:	8bc1                	andi	a5,a5,16
20401f8a:	cb89                	beqz	a5,20401f9c <LiquidCrystal::send(unsigned char, unsigned char)+0x6c>
    write8bits(value); 
20401f8c:	feb44783          	lbu	a5,-21(s0)
20401f90:	85be                	mv	a1,a5
20401f92:	fec42503          	lw	a0,-20(s0)
20401f96:	1a9000ef          	jal	ra,2040293e <LiquidCrystal::write8bits(unsigned char)>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
20401f9a:	a015                	j	20401fbe <LiquidCrystal::send(unsigned char, unsigned char)+0x8e>
    write4bits(value>>4);
20401f9c:	feb44783          	lbu	a5,-21(s0)
20401fa0:	8791                	srai	a5,a5,0x4
20401fa2:	0ff7f793          	andi	a5,a5,255
20401fa6:	85be                	mv	a1,a5
20401fa8:	fec42503          	lw	a0,-20(s0)
20401fac:	12f000ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
    write4bits(value);
20401fb0:	feb44783          	lbu	a5,-21(s0)
20401fb4:	85be                	mv	a1,a5
20401fb6:	fec42503          	lw	a0,-20(s0)
20401fba:	121000ef          	jal	ra,204028da <LiquidCrystal::write4bits(unsigned char)>
}
20401fbe:	0001                	nop
20401fc0:	838a                	mv	t2,sp
20401fc2:	40f2                	lw	ra,28(sp)
20401fc4:	4462                	lw	s0,24(sp)
20401fc6:	6105                	addi	sp,sp,32
20401fc8:	8082                	ret

20401fca <LiquidCrystal::pulseEnable()>:

void LiquidCrystal::pulseEnable(void) {
20401fca:	d6010113          	addi	sp,sp,-672
20401fce:	28112e23          	sw	ra,668(sp)
20401fd2:	28812c23          	sw	s0,664(sp)
20401fd6:	29212a23          	sw	s2,660(sp)
20401fda:	29312823          	sw	s3,656(sp)
20401fde:	29412623          	sw	s4,652(sp)
20401fe2:	29512423          	sw	s5,648(sp)
20401fe6:	29612223          	sw	s6,644(sp)
20401fea:	29712023          	sw	s7,640(sp)
20401fee:	27812e23          	sw	s8,636(sp)
20401ff2:	27912c23          	sw	s9,632(sp)
20401ff6:	27a12a23          	sw	s10,628(sp)
20401ffa:	27b12823          	sw	s11,624(sp)
20401ffe:	1500                	addi	s0,sp,672
20402000:	eea42623          	sw	a0,-276(s0)
  digitalWrite(_enable_pin, LOW);
20402004:	eec42783          	lw	a5,-276(s0)
20402008:	00a7c783          	lbu	a5,10(a5)
2040200c:	4581                	li	a1,0
2040200e:	853e                	mv	a0,a5
20402010:	32d000ef          	jal	ra,20402b3c <digitalWrite>
20402014:	4785                	li	a5,1
20402016:	f4f42823          	sw	a5,-176(s0)
  if (usec == 0) {
2040201a:	f5042783          	lw	a5,-176(s0)
2040201e:	28078963          	beqz	a5,204022b0 <LiquidCrystal::pulseEnable()+0x2e6>
  rdmcycle(&current);
20402022:	b80027f3          	csrr	a5,mcycleh
20402026:	b0002773          	csrr	a4,mcycle
2040202a:	b80026f3          	csrr	a3,mcycleh
2040202e:	fed79ae3          	bne	a5,a3,20402022 <LiquidCrystal::pulseEnable()+0x58>
20402032:	f4f42623          	sw	a5,-180(s0)
20402036:	f4e42423          	sw	a4,-184(s0)
2040203a:	f4d42223          	sw	a3,-188(s0)
2040203e:	f4842783          	lw	a5,-184(s0)
20402042:	8c3e                	mv	s8,a5
20402044:	4c81                	li	s9,0
20402046:	f4c42783          	lw	a5,-180(s0)
2040204a:	dcf42023          	sw	a5,-576(s0)
2040204e:	dc042223          	sw	zero,-572(s0)
20402052:	dc042783          	lw	a5,-576(s0)
20402056:	00079993          	slli	s3,a5,0x0
2040205a:	4901                	li	s2,0
2040205c:	012c6d33          	or	s10,s8,s2
20402060:	013cedb3          	or	s11,s9,s3
20402064:	f1a42423          	sw	s10,-248(s0)
20402068:	f1b42623          	sw	s11,-244(s0)
  later = current + usec * (F_CPU/1000000);
2040206c:	f5042783          	lw	a5,-176(s0)
20402070:	8b3e                	mv	s6,a5
20402072:	4b81                	li	s7,0
20402074:	01cb5793          	srli	a5,s6,0x1c
20402078:	004b9a93          	slli	s5,s7,0x4
2040207c:	0157eab3          	or	s5,a5,s5
20402080:	004b1a13          	slli	s4,s6,0x4
20402084:	87d2                	mv	a5,s4
20402086:	8856                	mv	a6,s5
20402088:	f0842683          	lw	a3,-248(s0)
2040208c:	f0c42703          	lw	a4,-244(s0)
20402090:	00d78533          	add	a0,a5,a3
20402094:	862a                	mv	a2,a0
20402096:	00f63633          	sltu	a2,a2,a5
2040209a:	00e805b3          	add	a1,a6,a4
2040209e:	00b607b3          	add	a5,a2,a1
204020a2:	85be                	mv	a1,a5
204020a4:	f2a42c23          	sw	a0,-200(s0)
204020a8:	f2b42e23          	sw	a1,-196(s0)
  if (later > current) // usual case
204020ac:	f0842603          	lw	a2,-248(s0)
204020b0:	f0c42683          	lw	a3,-244(s0)
204020b4:	f3c42703          	lw	a4,-196(s0)
204020b8:	87b6                	mv	a5,a3
204020ba:	00e7ed63          	bltu	a5,a4,204020d4 <LiquidCrystal::pulseEnable()+0x10a>
204020be:	f3c42703          	lw	a4,-196(s0)
204020c2:	87b6                	mv	a5,a3
204020c4:	0af71763          	bne	a4,a5,20402172 <LiquidCrystal::pulseEnable()+0x1a8>
204020c8:	f3842703          	lw	a4,-200(s0)
204020cc:	87b2                	mv	a5,a2
204020ce:	00e7e363          	bltu	a5,a4,204020d4 <LiquidCrystal::pulseEnable()+0x10a>
204020d2:	a045                	j	20402172 <LiquidCrystal::pulseEnable()+0x1a8>
      while (later > current) {
204020d4:	f0842603          	lw	a2,-248(s0)
204020d8:	f0c42683          	lw	a3,-244(s0)
204020dc:	f3c42703          	lw	a4,-196(s0)
204020e0:	87b6                	mv	a5,a3
204020e2:	00e7ec63          	bltu	a5,a4,204020fa <LiquidCrystal::pulseEnable()+0x130>
204020e6:	f3c42703          	lw	a4,-196(s0)
204020ea:	87b6                	mv	a5,a3
204020ec:	1cf71363          	bne	a4,a5,204022b2 <LiquidCrystal::pulseEnable()+0x2e8>
204020f0:	f3842703          	lw	a4,-200(s0)
204020f4:	87b2                	mv	a5,a2
204020f6:	1ae7fe63          	bleu	a4,a5,204022b2 <LiquidCrystal::pulseEnable()+0x2e8>
	rdmcycle(&current);
204020fa:	b80027f3          	csrr	a5,mcycleh
204020fe:	b0002773          	csrr	a4,mcycle
20402102:	b80026f3          	csrr	a3,mcycleh
20402106:	fed79ae3          	bne	a5,a3,204020fa <LiquidCrystal::pulseEnable()+0x130>
2040210a:	f2f42a23          	sw	a5,-204(s0)
2040210e:	f2e42823          	sw	a4,-208(s0)
20402112:	f2d42623          	sw	a3,-212(s0)
20402116:	f3042783          	lw	a5,-208(s0)
2040211a:	daf42c23          	sw	a5,-584(s0)
2040211e:	da042e23          	sw	zero,-580(s0)
20402122:	f3442783          	lw	a5,-204(s0)
20402126:	daf42823          	sw	a5,-592(s0)
2040212a:	da042a23          	sw	zero,-588(s0)
2040212e:	db042783          	lw	a5,-592(s0)
20402132:	00079793          	slli	a5,a5,0x0
20402136:	daf42623          	sw	a5,-596(s0)
2040213a:	da042423          	sw	zero,-600(s0)
2040213e:	db842683          	lw	a3,-584(s0)
20402142:	dbc42703          	lw	a4,-580(s0)
20402146:	8636                	mv	a2,a3
20402148:	da842783          	lw	a5,-600(s0)
2040214c:	dac42803          	lw	a6,-596(s0)
20402150:	85be                	mv	a1,a5
20402152:	8e4d                	or	a2,a2,a1
20402154:	dac42023          	sw	a2,-608(s0)
20402158:	87c2                	mv	a5,a6
2040215a:	8fd9                	or	a5,a5,a4
2040215c:	daf42223          	sw	a5,-604(s0)
20402160:	da042783          	lw	a5,-608(s0)
20402164:	da442803          	lw	a6,-604(s0)
20402168:	f0f42423          	sw	a5,-248(s0)
2040216c:	f1042623          	sw	a6,-244(s0)
20402170:	b795                	j	204020d4 <LiquidCrystal::pulseEnable()+0x10a>
      while (later < current) {
20402172:	f0842603          	lw	a2,-248(s0)
20402176:	f0c42683          	lw	a3,-244(s0)
2040217a:	f3c42703          	lw	a4,-196(s0)
2040217e:	87b6                	mv	a5,a3
20402180:	00f76d63          	bltu	a4,a5,2040219a <LiquidCrystal::pulseEnable()+0x1d0>
20402184:	f3c42703          	lw	a4,-196(s0)
20402188:	87b6                	mv	a5,a3
2040218a:	08f71463          	bne	a4,a5,20402212 <LiquidCrystal::pulseEnable()+0x248>
2040218e:	f3842703          	lw	a4,-200(s0)
20402192:	87b2                	mv	a5,a2
20402194:	00f76363          	bltu	a4,a5,2040219a <LiquidCrystal::pulseEnable()+0x1d0>
20402198:	a8ad                	j	20402212 <LiquidCrystal::pulseEnable()+0x248>
	rdmcycle(&current);
2040219a:	b80027f3          	csrr	a5,mcycleh
2040219e:	b0002773          	csrr	a4,mcycle
204021a2:	b80026f3          	csrr	a3,mcycleh
204021a6:	fed79ae3          	bne	a5,a3,2040219a <LiquidCrystal::pulseEnable()+0x1d0>
204021aa:	f2f42423          	sw	a5,-216(s0)
204021ae:	f2e42223          	sw	a4,-220(s0)
204021b2:	f2d42023          	sw	a3,-224(s0)
204021b6:	f2442783          	lw	a5,-220(s0)
204021ba:	d8f42c23          	sw	a5,-616(s0)
204021be:	d8042e23          	sw	zero,-612(s0)
204021c2:	f2842783          	lw	a5,-216(s0)
204021c6:	d8f42823          	sw	a5,-624(s0)
204021ca:	d8042a23          	sw	zero,-620(s0)
204021ce:	d9042783          	lw	a5,-624(s0)
204021d2:	00079793          	slli	a5,a5,0x0
204021d6:	d8f42623          	sw	a5,-628(s0)
204021da:	d8042423          	sw	zero,-632(s0)
204021de:	d9842683          	lw	a3,-616(s0)
204021e2:	d9c42703          	lw	a4,-612(s0)
204021e6:	8636                	mv	a2,a3
204021e8:	d8842783          	lw	a5,-632(s0)
204021ec:	d8c42803          	lw	a6,-628(s0)
204021f0:	85be                	mv	a1,a5
204021f2:	8e4d                	or	a2,a2,a1
204021f4:	d8c42023          	sw	a2,-640(s0)
204021f8:	87c2                	mv	a5,a6
204021fa:	8fd9                	or	a5,a5,a4
204021fc:	d8f42223          	sw	a5,-636(s0)
20402200:	d8042783          	lw	a5,-640(s0)
20402204:	d8442803          	lw	a6,-636(s0)
20402208:	f0f42423          	sw	a5,-248(s0)
2040220c:	f1042623          	sw	a6,-244(s0)
20402210:	b78d                	j	20402172 <LiquidCrystal::pulseEnable()+0x1a8>
      while (current < later) {
20402212:	f0842603          	lw	a2,-248(s0)
20402216:	f0c42683          	lw	a3,-244(s0)
2040221a:	f3c42703          	lw	a4,-196(s0)
2040221e:	87b6                	mv	a5,a3
20402220:	00e7ec63          	bltu	a5,a4,20402238 <LiquidCrystal::pulseEnable()+0x26e>
20402224:	f3c42703          	lw	a4,-196(s0)
20402228:	87b6                	mv	a5,a3
2040222a:	08f71463          	bne	a4,a5,204022b2 <LiquidCrystal::pulseEnable()+0x2e8>
2040222e:	f3842703          	lw	a4,-200(s0)
20402232:	87b2                	mv	a5,a2
20402234:	06e7ff63          	bleu	a4,a5,204022b2 <LiquidCrystal::pulseEnable()+0x2e8>
	rdmcycle(&current);
20402238:	b80027f3          	csrr	a5,mcycleh
2040223c:	b0002773          	csrr	a4,mcycle
20402240:	b80026f3          	csrr	a3,mcycleh
20402244:	fed79ae3          	bne	a5,a3,20402238 <LiquidCrystal::pulseEnable()+0x26e>
20402248:	f0f42e23          	sw	a5,-228(s0)
2040224c:	f0e42c23          	sw	a4,-232(s0)
20402250:	f0d42a23          	sw	a3,-236(s0)
20402254:	f1842783          	lw	a5,-232(s0)
20402258:	d6f42c23          	sw	a5,-648(s0)
2040225c:	d6042e23          	sw	zero,-644(s0)
20402260:	f1c42783          	lw	a5,-228(s0)
20402264:	d6f42823          	sw	a5,-656(s0)
20402268:	d6042a23          	sw	zero,-652(s0)
2040226c:	d7042783          	lw	a5,-656(s0)
20402270:	00079793          	slli	a5,a5,0x0
20402274:	d6f42623          	sw	a5,-660(s0)
20402278:	d6042423          	sw	zero,-664(s0)
2040227c:	d7842683          	lw	a3,-648(s0)
20402280:	d7c42703          	lw	a4,-644(s0)
20402284:	8636                	mv	a2,a3
20402286:	d6842783          	lw	a5,-664(s0)
2040228a:	d6c42803          	lw	a6,-660(s0)
2040228e:	85be                	mv	a1,a5
20402290:	8e4d                	or	a2,a2,a1
20402292:	d6c42023          	sw	a2,-672(s0)
20402296:	87c2                	mv	a5,a6
20402298:	8fd9                	or	a5,a5,a4
2040229a:	d6f42223          	sw	a5,-668(s0)
2040229e:	d6042783          	lw	a5,-672(s0)
204022a2:	d6442803          	lw	a6,-668(s0)
204022a6:	f0f42423          	sw	a5,-248(s0)
204022aa:	f1042623          	sw	a6,-244(s0)
204022ae:	b795                	j	20402212 <LiquidCrystal::pulseEnable()+0x248>
    return;
204022b0:	0001                	nop
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
204022b2:	eec42783          	lw	a5,-276(s0)
204022b6:	00a7c783          	lbu	a5,10(a5)
204022ba:	4585                	li	a1,1
204022bc:	853e                	mv	a0,a5
204022be:	07f000ef          	jal	ra,20402b3c <digitalWrite>
204022c2:	4785                	li	a5,1
204022c4:	f8f42823          	sw	a5,-112(s0)
  if (usec == 0) {
204022c8:	f9042783          	lw	a5,-112(s0)
204022cc:	2c078e63          	beqz	a5,204025a8 <LiquidCrystal::pulseEnable()+0x5de>
  rdmcycle(&current);
204022d0:	b80027f3          	csrr	a5,mcycleh
204022d4:	b0002773          	csrr	a4,mcycle
204022d8:	b80026f3          	csrr	a3,mcycleh
204022dc:	fed79ae3          	bne	a5,a3,204022d0 <LiquidCrystal::pulseEnable()+0x306>
204022e0:	f8f42623          	sw	a5,-116(s0)
204022e4:	f8e42423          	sw	a4,-120(s0)
204022e8:	f8d42223          	sw	a3,-124(s0)
204022ec:	f8842783          	lw	a5,-120(s0)
204022f0:	e4f42423          	sw	a5,-440(s0)
204022f4:	e4042623          	sw	zero,-436(s0)
204022f8:	f8c42783          	lw	a5,-116(s0)
204022fc:	e4f42023          	sw	a5,-448(s0)
20402300:	e4042223          	sw	zero,-444(s0)
20402304:	e4042783          	lw	a5,-448(s0)
20402308:	00079793          	slli	a5,a5,0x0
2040230c:	e2f42e23          	sw	a5,-452(s0)
20402310:	e2042c23          	sw	zero,-456(s0)
20402314:	e4842683          	lw	a3,-440(s0)
20402318:	e4c42703          	lw	a4,-436(s0)
2040231c:	8636                	mv	a2,a3
2040231e:	e3842783          	lw	a5,-456(s0)
20402322:	e3c42803          	lw	a6,-452(s0)
20402326:	85be                	mv	a1,a5
20402328:	8e4d                	or	a2,a2,a1
2040232a:	e2c42823          	sw	a2,-464(s0)
2040232e:	87c2                	mv	a5,a6
20402330:	8fd9                	or	a5,a5,a4
20402332:	e2f42a23          	sw	a5,-460(s0)
20402336:	e3042783          	lw	a5,-464(s0)
2040233a:	e3442803          	lw	a6,-460(s0)
2040233e:	f0f42023          	sw	a5,-256(s0)
20402342:	f1042223          	sw	a6,-252(s0)
  later = current + usec * (F_CPU/1000000);
20402346:	f9042783          	lw	a5,-112(s0)
2040234a:	e2f42423          	sw	a5,-472(s0)
2040234e:	e2042623          	sw	zero,-468(s0)
20402352:	e2842683          	lw	a3,-472(s0)
20402356:	e2c42703          	lw	a4,-468(s0)
2040235a:	87b6                	mv	a5,a3
2040235c:	83f1                	srli	a5,a5,0x1c
2040235e:	863a                	mv	a2,a4
20402360:	0612                	slli	a2,a2,0x4
20402362:	ecc42e23          	sw	a2,-292(s0)
20402366:	edc42603          	lw	a2,-292(s0)
2040236a:	8fd1                	or	a5,a5,a2
2040236c:	ecf42e23          	sw	a5,-292(s0)
20402370:	87b6                	mv	a5,a3
20402372:	0792                	slli	a5,a5,0x4
20402374:	ecf42c23          	sw	a5,-296(s0)
20402378:	ed842783          	lw	a5,-296(s0)
2040237c:	edc42803          	lw	a6,-292(s0)
20402380:	f0042683          	lw	a3,-256(s0)
20402384:	f0442703          	lw	a4,-252(s0)
20402388:	00d78533          	add	a0,a5,a3
2040238c:	862a                	mv	a2,a0
2040238e:	00f63633          	sltu	a2,a2,a5
20402392:	00e805b3          	add	a1,a6,a4
20402396:	00b607b3          	add	a5,a2,a1
2040239a:	85be                	mv	a1,a5
2040239c:	f6a42c23          	sw	a0,-136(s0)
204023a0:	f6b42e23          	sw	a1,-132(s0)
  if (later > current) // usual case
204023a4:	f0042603          	lw	a2,-256(s0)
204023a8:	f0442683          	lw	a3,-252(s0)
204023ac:	f7c42703          	lw	a4,-132(s0)
204023b0:	87b6                	mv	a5,a3
204023b2:	00e7ed63          	bltu	a5,a4,204023cc <LiquidCrystal::pulseEnable()+0x402>
204023b6:	f7c42703          	lw	a4,-132(s0)
204023ba:	87b6                	mv	a5,a3
204023bc:	0af71763          	bne	a4,a5,2040246a <LiquidCrystal::pulseEnable()+0x4a0>
204023c0:	f7842703          	lw	a4,-136(s0)
204023c4:	87b2                	mv	a5,a2
204023c6:	00e7e363          	bltu	a5,a4,204023cc <LiquidCrystal::pulseEnable()+0x402>
204023ca:	a045                	j	2040246a <LiquidCrystal::pulseEnable()+0x4a0>
      while (later > current) {
204023cc:	f0042603          	lw	a2,-256(s0)
204023d0:	f0442683          	lw	a3,-252(s0)
204023d4:	f7c42703          	lw	a4,-132(s0)
204023d8:	87b6                	mv	a5,a3
204023da:	00e7ec63          	bltu	a5,a4,204023f2 <LiquidCrystal::pulseEnable()+0x428>
204023de:	f7c42703          	lw	a4,-132(s0)
204023e2:	87b6                	mv	a5,a3
204023e4:	1cf71363          	bne	a4,a5,204025aa <LiquidCrystal::pulseEnable()+0x5e0>
204023e8:	f7842703          	lw	a4,-136(s0)
204023ec:	87b2                	mv	a5,a2
204023ee:	1ae7fe63          	bleu	a4,a5,204025aa <LiquidCrystal::pulseEnable()+0x5e0>
	rdmcycle(&current);
204023f2:	b80027f3          	csrr	a5,mcycleh
204023f6:	b0002773          	csrr	a4,mcycle
204023fa:	b80026f3          	csrr	a3,mcycleh
204023fe:	fed79ae3          	bne	a5,a3,204023f2 <LiquidCrystal::pulseEnable()+0x428>
20402402:	f6f42a23          	sw	a5,-140(s0)
20402406:	f6e42823          	sw	a4,-144(s0)
2040240a:	f6d42623          	sw	a3,-148(s0)
2040240e:	f7042783          	lw	a5,-144(s0)
20402412:	e2f42023          	sw	a5,-480(s0)
20402416:	e2042223          	sw	zero,-476(s0)
2040241a:	f7442783          	lw	a5,-140(s0)
2040241e:	e0f42c23          	sw	a5,-488(s0)
20402422:	e0042e23          	sw	zero,-484(s0)
20402426:	e1842783          	lw	a5,-488(s0)
2040242a:	00079793          	slli	a5,a5,0x0
2040242e:	e0f42a23          	sw	a5,-492(s0)
20402432:	e0042823          	sw	zero,-496(s0)
20402436:	e2042683          	lw	a3,-480(s0)
2040243a:	e2442703          	lw	a4,-476(s0)
2040243e:	8636                	mv	a2,a3
20402440:	e1042783          	lw	a5,-496(s0)
20402444:	e1442803          	lw	a6,-492(s0)
20402448:	85be                	mv	a1,a5
2040244a:	8e4d                	or	a2,a2,a1
2040244c:	e0c42423          	sw	a2,-504(s0)
20402450:	87c2                	mv	a5,a6
20402452:	8fd9                	or	a5,a5,a4
20402454:	e0f42623          	sw	a5,-500(s0)
20402458:	e0842783          	lw	a5,-504(s0)
2040245c:	e0c42803          	lw	a6,-500(s0)
20402460:	f0f42023          	sw	a5,-256(s0)
20402464:	f1042223          	sw	a6,-252(s0)
20402468:	b795                	j	204023cc <LiquidCrystal::pulseEnable()+0x402>
      while (later < current) {
2040246a:	f0042603          	lw	a2,-256(s0)
2040246e:	f0442683          	lw	a3,-252(s0)
20402472:	f7c42703          	lw	a4,-132(s0)
20402476:	87b6                	mv	a5,a3
20402478:	00f76d63          	bltu	a4,a5,20402492 <LiquidCrystal::pulseEnable()+0x4c8>
2040247c:	f7c42703          	lw	a4,-132(s0)
20402480:	87b6                	mv	a5,a3
20402482:	08f71463          	bne	a4,a5,2040250a <LiquidCrystal::pulseEnable()+0x540>
20402486:	f7842703          	lw	a4,-136(s0)
2040248a:	87b2                	mv	a5,a2
2040248c:	00f76363          	bltu	a4,a5,20402492 <LiquidCrystal::pulseEnable()+0x4c8>
20402490:	a8ad                	j	2040250a <LiquidCrystal::pulseEnable()+0x540>
	rdmcycle(&current);
20402492:	b80027f3          	csrr	a5,mcycleh
20402496:	b0002773          	csrr	a4,mcycle
2040249a:	b80026f3          	csrr	a3,mcycleh
2040249e:	fed79ae3          	bne	a5,a3,20402492 <LiquidCrystal::pulseEnable()+0x4c8>
204024a2:	f6f42423          	sw	a5,-152(s0)
204024a6:	f6e42223          	sw	a4,-156(s0)
204024aa:	f6d42023          	sw	a3,-160(s0)
204024ae:	f6442783          	lw	a5,-156(s0)
204024b2:	e0f42023          	sw	a5,-512(s0)
204024b6:	e0042223          	sw	zero,-508(s0)
204024ba:	f6842783          	lw	a5,-152(s0)
204024be:	def42c23          	sw	a5,-520(s0)
204024c2:	de042e23          	sw	zero,-516(s0)
204024c6:	df842783          	lw	a5,-520(s0)
204024ca:	00079793          	slli	a5,a5,0x0
204024ce:	def42a23          	sw	a5,-524(s0)
204024d2:	de042823          	sw	zero,-528(s0)
204024d6:	e0042683          	lw	a3,-512(s0)
204024da:	e0442703          	lw	a4,-508(s0)
204024de:	8636                	mv	a2,a3
204024e0:	df042783          	lw	a5,-528(s0)
204024e4:	df442803          	lw	a6,-524(s0)
204024e8:	85be                	mv	a1,a5
204024ea:	8e4d                	or	a2,a2,a1
204024ec:	dec42423          	sw	a2,-536(s0)
204024f0:	87c2                	mv	a5,a6
204024f2:	8fd9                	or	a5,a5,a4
204024f4:	def42623          	sw	a5,-532(s0)
204024f8:	de842783          	lw	a5,-536(s0)
204024fc:	dec42803          	lw	a6,-532(s0)
20402500:	f0f42023          	sw	a5,-256(s0)
20402504:	f1042223          	sw	a6,-252(s0)
20402508:	b78d                	j	2040246a <LiquidCrystal::pulseEnable()+0x4a0>
      while (current < later) {
2040250a:	f0042603          	lw	a2,-256(s0)
2040250e:	f0442683          	lw	a3,-252(s0)
20402512:	f7c42703          	lw	a4,-132(s0)
20402516:	87b6                	mv	a5,a3
20402518:	00e7ec63          	bltu	a5,a4,20402530 <LiquidCrystal::pulseEnable()+0x566>
2040251c:	f7c42703          	lw	a4,-132(s0)
20402520:	87b6                	mv	a5,a3
20402522:	08f71463          	bne	a4,a5,204025aa <LiquidCrystal::pulseEnable()+0x5e0>
20402526:	f7842703          	lw	a4,-136(s0)
2040252a:	87b2                	mv	a5,a2
2040252c:	06e7ff63          	bleu	a4,a5,204025aa <LiquidCrystal::pulseEnable()+0x5e0>
	rdmcycle(&current);
20402530:	b80027f3          	csrr	a5,mcycleh
20402534:	b0002773          	csrr	a4,mcycle
20402538:	b80026f3          	csrr	a3,mcycleh
2040253c:	fed79ae3          	bne	a5,a3,20402530 <LiquidCrystal::pulseEnable()+0x566>
20402540:	f4f42e23          	sw	a5,-164(s0)
20402544:	f4e42c23          	sw	a4,-168(s0)
20402548:	f4d42a23          	sw	a3,-172(s0)
2040254c:	f5842783          	lw	a5,-168(s0)
20402550:	def42023          	sw	a5,-544(s0)
20402554:	de042223          	sw	zero,-540(s0)
20402558:	f5c42783          	lw	a5,-164(s0)
2040255c:	dcf42c23          	sw	a5,-552(s0)
20402560:	dc042e23          	sw	zero,-548(s0)
20402564:	dd842783          	lw	a5,-552(s0)
20402568:	00079793          	slli	a5,a5,0x0
2040256c:	dcf42a23          	sw	a5,-556(s0)
20402570:	dc042823          	sw	zero,-560(s0)
20402574:	de042683          	lw	a3,-544(s0)
20402578:	de442703          	lw	a4,-540(s0)
2040257c:	8636                	mv	a2,a3
2040257e:	dd042783          	lw	a5,-560(s0)
20402582:	dd442803          	lw	a6,-556(s0)
20402586:	85be                	mv	a1,a5
20402588:	8e4d                	or	a2,a2,a1
2040258a:	dcc42423          	sw	a2,-568(s0)
2040258e:	87c2                	mv	a5,a6
20402590:	8fd9                	or	a5,a5,a4
20402592:	dcf42623          	sw	a5,-564(s0)
20402596:	dc842783          	lw	a5,-568(s0)
2040259a:	dcc42803          	lw	a6,-564(s0)
2040259e:	f0f42023          	sw	a5,-256(s0)
204025a2:	f1042223          	sw	a6,-252(s0)
204025a6:	b795                	j	2040250a <LiquidCrystal::pulseEnable()+0x540>
    return;
204025a8:	0001                	nop
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
204025aa:	eec42783          	lw	a5,-276(s0)
204025ae:	00a7c783          	lbu	a5,10(a5)
204025b2:	4581                	li	a1,0
204025b4:	853e                	mv	a0,a5
204025b6:	2359                	jal	20402b3c <digitalWrite>
204025b8:	06400793          	li	a5,100
204025bc:	fcf42623          	sw	a5,-52(s0)
  if (usec == 0) {
204025c0:	fcc42783          	lw	a5,-52(s0)
204025c4:	e399                	bnez	a5,204025ca <LiquidCrystal::pulseEnable()+0x600>
    return;
204025c6:	0001                	nop
  delayMicroseconds(100);   // commands need > 37us to settle
}
204025c8:	ace1                	j	204028a0 <LiquidCrystal::pulseEnable()+0x8d6>
  rdmcycle(&current);
204025ca:	b80027f3          	csrr	a5,mcycleh
204025ce:	b0002773          	csrr	a4,mcycle
204025d2:	b80026f3          	csrr	a3,mcycleh
204025d6:	fed79ae3          	bne	a5,a3,204025ca <LiquidCrystal::pulseEnable()+0x600>
204025da:	fcf42423          	sw	a5,-56(s0)
204025de:	fce42223          	sw	a4,-60(s0)
204025e2:	fcd42023          	sw	a3,-64(s0)
204025e6:	fc442783          	lw	a5,-60(s0)
204025ea:	ecf42823          	sw	a5,-304(s0)
204025ee:	ec042a23          	sw	zero,-300(s0)
204025f2:	fc842783          	lw	a5,-56(s0)
204025f6:	ecf42423          	sw	a5,-312(s0)
204025fa:	ec042623          	sw	zero,-308(s0)
204025fe:	ec842783          	lw	a5,-312(s0)
20402602:	00079793          	slli	a5,a5,0x0
20402606:	ecf42223          	sw	a5,-316(s0)
2040260a:	ec042023          	sw	zero,-320(s0)
2040260e:	ed042683          	lw	a3,-304(s0)
20402612:	ed442703          	lw	a4,-300(s0)
20402616:	8636                	mv	a2,a3
20402618:	ec042783          	lw	a5,-320(s0)
2040261c:	ec442803          	lw	a6,-316(s0)
20402620:	85be                	mv	a1,a5
20402622:	8e4d                	or	a2,a2,a1
20402624:	eac42c23          	sw	a2,-328(s0)
20402628:	87c2                	mv	a5,a6
2040262a:	8fd9                	or	a5,a5,a4
2040262c:	eaf42e23          	sw	a5,-324(s0)
20402630:	eb842783          	lw	a5,-328(s0)
20402634:	ebc42803          	lw	a6,-324(s0)
20402638:	eef42c23          	sw	a5,-264(s0)
2040263c:	ef042e23          	sw	a6,-260(s0)
  later = current + usec * (F_CPU/1000000);
20402640:	fcc42783          	lw	a5,-52(s0)
20402644:	eaf42823          	sw	a5,-336(s0)
20402648:	ea042a23          	sw	zero,-332(s0)
2040264c:	eb042683          	lw	a3,-336(s0)
20402650:	eb442703          	lw	a4,-332(s0)
20402654:	87b6                	mv	a5,a3
20402656:	83f1                	srli	a5,a5,0x1c
20402658:	863a                	mv	a2,a4
2040265a:	0612                	slli	a2,a2,0x4
2040265c:	eec42223          	sw	a2,-284(s0)
20402660:	ee442603          	lw	a2,-284(s0)
20402664:	8fd1                	or	a5,a5,a2
20402666:	eef42223          	sw	a5,-284(s0)
2040266a:	87b6                	mv	a5,a3
2040266c:	0792                	slli	a5,a5,0x4
2040266e:	eef42023          	sw	a5,-288(s0)
20402672:	ee042783          	lw	a5,-288(s0)
20402676:	ee442803          	lw	a6,-284(s0)
2040267a:	ef842583          	lw	a1,-264(s0)
2040267e:	efc42603          	lw	a2,-260(s0)
20402682:	00b786b3          	add	a3,a5,a1
20402686:	8536                	mv	a0,a3
20402688:	00f53533          	sltu	a0,a0,a5
2040268c:	00c80733          	add	a4,a6,a2
20402690:	00e507b3          	add	a5,a0,a4
20402694:	873e                	mv	a4,a5
20402696:	fad42c23          	sw	a3,-72(s0)
2040269a:	fae42e23          	sw	a4,-68(s0)
  if (later > current) // usual case
2040269e:	ef842683          	lw	a3,-264(s0)
204026a2:	efc42703          	lw	a4,-260(s0)
204026a6:	fbc42603          	lw	a2,-68(s0)
204026aa:	87ba                	mv	a5,a4
204026ac:	00c7ed63          	bltu	a5,a2,204026c6 <LiquidCrystal::pulseEnable()+0x6fc>
204026b0:	fbc42603          	lw	a2,-68(s0)
204026b4:	87ba                	mv	a5,a4
204026b6:	0af61763          	bne	a2,a5,20402764 <LiquidCrystal::pulseEnable()+0x79a>
204026ba:	fb842783          	lw	a5,-72(s0)
204026be:	8736                	mv	a4,a3
204026c0:	00f76363          	bltu	a4,a5,204026c6 <LiquidCrystal::pulseEnable()+0x6fc>
204026c4:	a045                	j	20402764 <LiquidCrystal::pulseEnable()+0x79a>
      while (later > current) {
204026c6:	ef842783          	lw	a5,-264(s0)
204026ca:	efc42803          	lw	a6,-260(s0)
204026ce:	fbc42703          	lw	a4,-68(s0)
204026d2:	86c2                	mv	a3,a6
204026d4:	00e6ec63          	bltu	a3,a4,204026ec <LiquidCrystal::pulseEnable()+0x722>
204026d8:	fbc42703          	lw	a4,-68(s0)
204026dc:	86c2                	mv	a3,a6
204026de:	1cd71163          	bne	a4,a3,204028a0 <LiquidCrystal::pulseEnable()+0x8d6>
204026e2:	fb842703          	lw	a4,-72(s0)
204026e6:	00e7e363          	bltu	a5,a4,204026ec <LiquidCrystal::pulseEnable()+0x722>
204026ea:	aa5d                	j	204028a0 <LiquidCrystal::pulseEnable()+0x8d6>
	rdmcycle(&current);
204026ec:	b80026f3          	csrr	a3,mcycleh
204026f0:	b0002773          	csrr	a4,mcycle
204026f4:	b80027f3          	csrr	a5,mcycleh
204026f8:	fef69ae3          	bne	a3,a5,204026ec <LiquidCrystal::pulseEnable()+0x722>
204026fc:	fad42a23          	sw	a3,-76(s0)
20402700:	fae42823          	sw	a4,-80(s0)
20402704:	faf42623          	sw	a5,-84(s0)
20402708:	fb042783          	lw	a5,-80(s0)
2040270c:	eaf42423          	sw	a5,-344(s0)
20402710:	ea042623          	sw	zero,-340(s0)
20402714:	fb442783          	lw	a5,-76(s0)
20402718:	eaf42023          	sw	a5,-352(s0)
2040271c:	ea042223          	sw	zero,-348(s0)
20402720:	ea042783          	lw	a5,-352(s0)
20402724:	00079793          	slli	a5,a5,0x0
20402728:	e8f42e23          	sw	a5,-356(s0)
2040272c:	e8042c23          	sw	zero,-360(s0)
20402730:	ea842683          	lw	a3,-344(s0)
20402734:	eac42703          	lw	a4,-340(s0)
20402738:	8636                	mv	a2,a3
2040273a:	e9842783          	lw	a5,-360(s0)
2040273e:	e9c42803          	lw	a6,-356(s0)
20402742:	85be                	mv	a1,a5
20402744:	8e4d                	or	a2,a2,a1
20402746:	e8c42823          	sw	a2,-368(s0)
2040274a:	87c2                	mv	a5,a6
2040274c:	8fd9                	or	a5,a5,a4
2040274e:	e8f42a23          	sw	a5,-364(s0)
20402752:	e9042783          	lw	a5,-368(s0)
20402756:	e9442803          	lw	a6,-364(s0)
2040275a:	eef42c23          	sw	a5,-264(s0)
2040275e:	ef042e23          	sw	a6,-260(s0)
20402762:	b795                	j	204026c6 <LiquidCrystal::pulseEnable()+0x6fc>
      while (later < current) {
20402764:	ef842783          	lw	a5,-264(s0)
20402768:	efc42803          	lw	a6,-260(s0)
2040276c:	fbc42703          	lw	a4,-68(s0)
20402770:	86c2                	mv	a3,a6
20402772:	00d76c63          	bltu	a4,a3,2040278a <LiquidCrystal::pulseEnable()+0x7c0>
20402776:	fbc42703          	lw	a4,-68(s0)
2040277a:	86c2                	mv	a3,a6
2040277c:	08d71363          	bne	a4,a3,20402802 <LiquidCrystal::pulseEnable()+0x838>
20402780:	fb842703          	lw	a4,-72(s0)
20402784:	00f76363          	bltu	a4,a5,2040278a <LiquidCrystal::pulseEnable()+0x7c0>
20402788:	a8ad                	j	20402802 <LiquidCrystal::pulseEnable()+0x838>
	rdmcycle(&current);
2040278a:	b80026f3          	csrr	a3,mcycleh
2040278e:	b0002773          	csrr	a4,mcycle
20402792:	b80027f3          	csrr	a5,mcycleh
20402796:	fef69ae3          	bne	a3,a5,2040278a <LiquidCrystal::pulseEnable()+0x7c0>
2040279a:	fad42423          	sw	a3,-88(s0)
2040279e:	fae42223          	sw	a4,-92(s0)
204027a2:	faf42023          	sw	a5,-96(s0)
204027a6:	fa442783          	lw	a5,-92(s0)
204027aa:	e8f42423          	sw	a5,-376(s0)
204027ae:	e8042623          	sw	zero,-372(s0)
204027b2:	fa842783          	lw	a5,-88(s0)
204027b6:	e8f42023          	sw	a5,-384(s0)
204027ba:	e8042223          	sw	zero,-380(s0)
204027be:	e8042783          	lw	a5,-384(s0)
204027c2:	00079793          	slli	a5,a5,0x0
204027c6:	e6f42e23          	sw	a5,-388(s0)
204027ca:	e6042c23          	sw	zero,-392(s0)
204027ce:	e8842683          	lw	a3,-376(s0)
204027d2:	e8c42703          	lw	a4,-372(s0)
204027d6:	8636                	mv	a2,a3
204027d8:	e7842783          	lw	a5,-392(s0)
204027dc:	e7c42803          	lw	a6,-388(s0)
204027e0:	85be                	mv	a1,a5
204027e2:	8e4d                	or	a2,a2,a1
204027e4:	e6c42823          	sw	a2,-400(s0)
204027e8:	87c2                	mv	a5,a6
204027ea:	8fd9                	or	a5,a5,a4
204027ec:	e6f42a23          	sw	a5,-396(s0)
204027f0:	e7042783          	lw	a5,-400(s0)
204027f4:	e7442803          	lw	a6,-396(s0)
204027f8:	eef42c23          	sw	a5,-264(s0)
204027fc:	ef042e23          	sw	a6,-260(s0)
20402800:	b795                	j	20402764 <LiquidCrystal::pulseEnable()+0x79a>
      while (current < later) {
20402802:	ef842783          	lw	a5,-264(s0)
20402806:	efc42803          	lw	a6,-260(s0)
2040280a:	fbc42703          	lw	a4,-68(s0)
2040280e:	86c2                	mv	a3,a6
20402810:	00e6ec63          	bltu	a3,a4,20402828 <LiquidCrystal::pulseEnable()+0x85e>
20402814:	fbc42703          	lw	a4,-68(s0)
20402818:	86c2                	mv	a3,a6
2040281a:	08d71363          	bne	a4,a3,204028a0 <LiquidCrystal::pulseEnable()+0x8d6>
2040281e:	fb842703          	lw	a4,-72(s0)
20402822:	00e7e363          	bltu	a5,a4,20402828 <LiquidCrystal::pulseEnable()+0x85e>
20402826:	a8ad                	j	204028a0 <LiquidCrystal::pulseEnable()+0x8d6>
	rdmcycle(&current);
20402828:	b80026f3          	csrr	a3,mcycleh
2040282c:	b0002773          	csrr	a4,mcycle
20402830:	b80027f3          	csrr	a5,mcycleh
20402834:	fef69ae3          	bne	a3,a5,20402828 <LiquidCrystal::pulseEnable()+0x85e>
20402838:	f8d42e23          	sw	a3,-100(s0)
2040283c:	f8e42c23          	sw	a4,-104(s0)
20402840:	f8f42a23          	sw	a5,-108(s0)
20402844:	f9842783          	lw	a5,-104(s0)
20402848:	e6f42423          	sw	a5,-408(s0)
2040284c:	e6042623          	sw	zero,-404(s0)
20402850:	f9c42783          	lw	a5,-100(s0)
20402854:	e6f42023          	sw	a5,-416(s0)
20402858:	e6042223          	sw	zero,-412(s0)
2040285c:	e6042783          	lw	a5,-416(s0)
20402860:	00079793          	slli	a5,a5,0x0
20402864:	e4f42e23          	sw	a5,-420(s0)
20402868:	e4042c23          	sw	zero,-424(s0)
2040286c:	e6842683          	lw	a3,-408(s0)
20402870:	e6c42703          	lw	a4,-404(s0)
20402874:	8636                	mv	a2,a3
20402876:	e5842783          	lw	a5,-424(s0)
2040287a:	e5c42803          	lw	a6,-420(s0)
2040287e:	85be                	mv	a1,a5
20402880:	8e4d                	or	a2,a2,a1
20402882:	e4c42823          	sw	a2,-432(s0)
20402886:	87c2                	mv	a5,a6
20402888:	8fd9                	or	a5,a5,a4
2040288a:	e4f42a23          	sw	a5,-428(s0)
2040288e:	e5042783          	lw	a5,-432(s0)
20402892:	e5442803          	lw	a6,-428(s0)
20402896:	eef42c23          	sw	a5,-264(s0)
2040289a:	ef042e23          	sw	a6,-260(s0)
2040289e:	b795                	j	20402802 <LiquidCrystal::pulseEnable()+0x838>
204028a0:	0001                	nop
204028a2:	838a                	mv	t2,sp
204028a4:	29c12083          	lw	ra,668(sp)
204028a8:	29812403          	lw	s0,664(sp)
204028ac:	29412903          	lw	s2,660(sp)
204028b0:	29012983          	lw	s3,656(sp)
204028b4:	28c12a03          	lw	s4,652(sp)
204028b8:	28812a83          	lw	s5,648(sp)
204028bc:	28412b03          	lw	s6,644(sp)
204028c0:	28012b83          	lw	s7,640(sp)
204028c4:	27c12c03          	lw	s8,636(sp)
204028c8:	27812c83          	lw	s9,632(sp)
204028cc:	27412d03          	lw	s10,628(sp)
204028d0:	27012d83          	lw	s11,624(sp)
204028d4:	2a010113          	addi	sp,sp,672
204028d8:	8082                	ret

204028da <LiquidCrystal::write4bits(unsigned char)>:

void LiquidCrystal::write4bits(uint8_t value) {
204028da:	7179                	addi	sp,sp,-48
204028dc:	d606                	sw	ra,44(sp)
204028de:	d422                	sw	s0,40(sp)
204028e0:	1800                	addi	s0,sp,48
204028e2:	fca42e23          	sw	a0,-36(s0)
204028e6:	87ae                	mv	a5,a1
204028e8:	fcf40da3          	sb	a5,-37(s0)
  for (int i = 0; i < 4; i++) {
204028ec:	fe042623          	sw	zero,-20(s0)
204028f0:	fec42703          	lw	a4,-20(s0)
204028f4:	478d                	li	a5,3
204028f6:	02e7ca63          	blt	a5,a4,2040292a <LiquidCrystal::write4bits(unsigned char)+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
204028fa:	fdc42703          	lw	a4,-36(s0)
204028fe:	fec42783          	lw	a5,-20(s0)
20402902:	97ba                	add	a5,a5,a4
20402904:	00b7c783          	lbu	a5,11(a5)
20402908:	86be                	mv	a3,a5
2040290a:	fdb44703          	lbu	a4,-37(s0)
2040290e:	fec42783          	lw	a5,-20(s0)
20402912:	40f757b3          	sra	a5,a4,a5
20402916:	8b85                	andi	a5,a5,1
20402918:	85be                	mv	a1,a5
2040291a:	8536                	mv	a0,a3
2040291c:	2405                	jal	20402b3c <digitalWrite>
  for (int i = 0; i < 4; i++) {
2040291e:	fec42783          	lw	a5,-20(s0)
20402922:	0785                	addi	a5,a5,1
20402924:	fef42623          	sw	a5,-20(s0)
20402928:	b7e1                	j	204028f0 <LiquidCrystal::write4bits(unsigned char)+0x16>
  }

  pulseEnable();
2040292a:	fdc42503          	lw	a0,-36(s0)
2040292e:	e9cff0ef          	jal	ra,20401fca <LiquidCrystal::pulseEnable()>
}
20402932:	0001                	nop
20402934:	838a                	mv	t2,sp
20402936:	50b2                	lw	ra,44(sp)
20402938:	5422                	lw	s0,40(sp)
2040293a:	6145                	addi	sp,sp,48
2040293c:	8082                	ret

2040293e <LiquidCrystal::write8bits(unsigned char)>:

void LiquidCrystal::write8bits(uint8_t value) {
2040293e:	7179                	addi	sp,sp,-48
20402940:	d606                	sw	ra,44(sp)
20402942:	d422                	sw	s0,40(sp)
20402944:	1800                	addi	s0,sp,48
20402946:	fca42e23          	sw	a0,-36(s0)
2040294a:	87ae                	mv	a5,a1
2040294c:	fcf40da3          	sb	a5,-37(s0)
  for (int i = 0; i < 8; i++) {
20402950:	fe042623          	sw	zero,-20(s0)
20402954:	fec42703          	lw	a4,-20(s0)
20402958:	479d                	li	a5,7
2040295a:	02e7ca63          	blt	a5,a4,2040298e <LiquidCrystal::write8bits(unsigned char)+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
2040295e:	fdc42703          	lw	a4,-36(s0)
20402962:	fec42783          	lw	a5,-20(s0)
20402966:	97ba                	add	a5,a5,a4
20402968:	00b7c783          	lbu	a5,11(a5)
2040296c:	86be                	mv	a3,a5
2040296e:	fdb44703          	lbu	a4,-37(s0)
20402972:	fec42783          	lw	a5,-20(s0)
20402976:	40f757b3          	sra	a5,a4,a5
2040297a:	8b85                	andi	a5,a5,1
2040297c:	85be                	mv	a1,a5
2040297e:	8536                	mv	a0,a3
20402980:	2a75                	jal	20402b3c <digitalWrite>
  for (int i = 0; i < 8; i++) {
20402982:	fec42783          	lw	a5,-20(s0)
20402986:	0785                	addi	a5,a5,1
20402988:	fef42623          	sw	a5,-20(s0)
2040298c:	b7e1                	j	20402954 <LiquidCrystal::write8bits(unsigned char)+0x16>
  }
  
  pulseEnable();
2040298e:	fdc42503          	lw	a0,-36(s0)
20402992:	e38ff0ef          	jal	ra,20401fca <LiquidCrystal::pulseEnable()>
}
20402996:	0001                	nop
20402998:	838a                	mv	t2,sp
2040299a:	50b2                	lw	ra,44(sp)
2040299c:	5422                	lw	s0,40(sp)
2040299e:	6145                	addi	sp,sp,48
204029a0:	8082                	ret

204029a2 <__wrap_malloc>:

/* These functions are intended for embedded RV32 systems and are
   obviously incorrect in general. */

void* __wrap_malloc(unsigned long sz)
{
204029a2:	1141                	addi	sp,sp,-16
204029a4:	c606                	sw	ra,12(sp)
  extern void* sbrk(long);
  void* res = sbrk(sz);
204029a6:	2819                	jal	204029bc <__wrap_sbrk>
  if ((long)res == -1)
    return 0;
204029a8:	00150793          	addi	a5,a0,1
  return res;
}
204029ac:	40b2                	lw	ra,12(sp)
    return 0;
204029ae:	00f037b3          	snez	a5,a5
204029b2:	40f007b3          	neg	a5,a5
}
204029b6:	8d7d                	and	a0,a0,a5
204029b8:	0141                	addi	sp,sp,16
204029ba:	8082                	ret

204029bc <__wrap_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
204029bc:	800007b7          	lui	a5,0x80000
204029c0:	43078793          	addi	a5,a5,1072 # 80000430 <_sp+0xffffc430>
204029c4:	4394                	lw	a3,0(a5)
204029c6:	80000737          	lui	a4,0x80000
204029ca:	49870713          	addi	a4,a4,1176 # 80000498 <_sp+0xffffc498>
204029ce:	9536                	add	a0,a0,a3
204029d0:	00e56b63          	bltu	a0,a4,204029e6 <__wrap_sbrk+0x2a>
204029d4:	80004737          	lui	a4,0x80004
204029d8:	80070713          	addi	a4,a4,-2048 # 80003800 <_sp+0xfffff800>
204029dc:	00a76563          	bltu	a4,a0,204029e6 <__wrap_sbrk+0x2a>
    return NULL - 1;

  curbrk += incr;
204029e0:	c388                	sw	a0,0(a5)
  return curbrk - incr;
}
204029e2:	8536                	mv	a0,a3
204029e4:	8082                	ret
    return NULL - 1;
204029e6:	56fd                	li	a3,-1
}
204029e8:	8536                	mv	a0,a3
204029ea:	8082                	ret

204029ec <calc_inv>:
int_inverse f_cpu_1000_inv;
int_inverse f_cpu_1000000_inv;

void calc_inv(uint32_t n, int_inverse * res){
  uint32_t one = ~0;
  uint32_t d = one/n;
204029ec:	57fd                	li	a5,-1
  uint32_t r = one%n + 1;
204029ee:	02a7f733          	remu	a4,a5,a0
  if (r >= n) ++d;
  if (d == 0) --d;
204029f2:	56fd                	li	a3,-1
  uint32_t d = one/n;
204029f4:	02a7d7b3          	divu	a5,a5,a0
  uint32_t r = one%n + 1;
204029f8:	0705                	addi	a4,a4,1
  if (r >= n) ++d;
204029fa:	00a73733          	sltu	a4,a4,a0
204029fe:	00174713          	xori	a4,a4,1
20402a02:	97ba                	add	a5,a5,a4
  if (d == 0) --d;
20402a04:	cb91                	beqz	a5,20402a18 <calc_inv+0x2c>
  uint32_t shift = 0;
  while ((d & 0x80000000) == 0){
20402a06:	0007cd63          	bltz	a5,20402a20 <calc_inv+0x34>
20402a0a:	4701                	li	a4,0
    d <<= 1;
20402a0c:	0786                	slli	a5,a5,0x1
    ++shift;
20402a0e:	0705                	addi	a4,a4,1
  while ((d & 0x80000000) == 0){
20402a10:	fe07dee3          	bgez	a5,20402a0c <calc_inv+0x20>
    d <<= 1;
20402a14:	86be                	mv	a3,a5
    ++shift;
20402a16:	87ba                	mv	a5,a4
  }
  res->n = n;
20402a18:	c188                	sw	a0,0(a1)
  res->mult = d;
20402a1a:	c1d4                	sw	a3,4(a1)
  res->shift = shift;
20402a1c:	c59c                	sw	a5,8(a1)
}
20402a1e:	8082                	ret
  while ((d & 0x80000000) == 0){
20402a20:	86be                	mv	a3,a5
20402a22:	4781                	li	a5,0
20402a24:	bfd5                	j	20402a18 <calc_inv+0x2c>

20402a26 <divide64_using_inverse>:
// If divisor-1 has i bits, then the answer is exact for n of up to 64-i bits
// e.g. for divisors up to a million, n can have up to 45 bits
// On RV32IM with divide32_using_inverse inlines this uses 5 multiplies,
// 33 instructions, zero branches, 3 loads, 0 stores.
uint64_t divide64_using_inverse(uint64_t n, int_inverse *inv){
  uint32_t preshift = (31 - inv->shift) & 31;
20402a26:	00862883          	lw	a7,8(a2)
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
20402a2a:	425c                	lw	a5,4(a2)
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a2c:	00159313          	slli	t1,a1,0x1
  uint32_t preshift = (31 - inv->shift) & 31;
20402a30:	fff8c693          	not	a3,a7
20402a34:	8afd                	andi	a3,a3,31
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a36:	fff6c593          	not	a1,a3
20402a3a:	00b31333          	sll	t1,t1,a1
20402a3e:	00d55833          	srl	a6,a0,a3
20402a42:	01036833          	or	a6,t1,a6
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
20402a46:	02f83733          	mulhu	a4,a6,a5
  if (n - d*inv->n >= inv->n) ++d;
20402a4a:	4210                	lw	a2,0(a2)
   d >>= inv->shift;
20402a4c:	01175733          	srl	a4,a4,a7
  if (n - d*inv->n >= inv->n) ++d;
20402a50:	02c70333          	mul	t1,a4,a2
20402a54:	40680833          	sub	a6,a6,t1
20402a58:	00c83833          	sltu	a6,a6,a2
20402a5c:	00184813          	xori	a6,a6,1
20402a60:	9742                	add	a4,a4,a6
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a62:	00d716b3          	sll	a3,a4,a3
  uint32_t r = n - d * inv->n;
20402a66:	02d60833          	mul	a6,a2,a3
  uint64_t d = (uint64_t)divide32_using_inverse(n >> preshift, inv) << preshift;
20402a6a:	8305                	srli	a4,a4,0x1
20402a6c:	00b755b3          	srl	a1,a4,a1
  uint32_t r = n - d * inv->n;
20402a70:	41050533          	sub	a0,a0,a6
 uint32_t d =  (uint32_t)(((uint64_t)n * inv->mult) >> 32);
20402a74:	02f537b3          	mulhu	a5,a0,a5
   d >>= inv->shift;
20402a78:	0117d7b3          	srl	a5,a5,a7
  if (n - d*inv->n >= inv->n) ++d;
20402a7c:	02c78733          	mul	a4,a5,a2
20402a80:	8d19                	sub	a0,a0,a4
20402a82:	00c53533          	sltu	a0,a0,a2
20402a86:	00154513          	xori	a0,a0,1
20402a8a:	97aa                	add	a5,a5,a0
  d += divide32_using_inverse(r, inv);
20402a8c:	00d78533          	add	a0,a5,a3
20402a90:	00f537b3          	sltu	a5,a0,a5
  return d;
}
20402a94:	95be                	add	a1,a1,a5
20402a96:	8082                	ret

20402a98 <millis>:


uint32_t
millis()
{
20402a98:	1141                	addi	sp,sp,-16
20402a9a:	c606                	sw	ra,12(sp)
  uint64_t x;
  rdmcycle(&x);
20402a9c:	b80025f3          	csrr	a1,mcycleh
20402aa0:	b0002573          	csrr	a0,mcycle
20402aa4:	b80027f3          	csrr	a5,mcycleh
20402aa8:	fef59ae3          	bne	a1,a5,20402a9c <millis+0x4>
  x = divide64_using_inverse(x, &f_cpu_1000_inv);
20402aac:	80000637          	lui	a2,0x80000
20402ab0:	48860613          	addi	a2,a2,1160 # 80000488 <_sp+0xffffc488>
20402ab4:	3f8d                	jal	20402a26 <divide64_using_inverse>
  return((uint32_t) (x & 0xFFFFFFFF));
}
20402ab6:	40b2                	lw	ra,12(sp)
20402ab8:	0141                	addi	sp,sp,16
20402aba:	8082                	ret

20402abc <pinMode>:

void
pinMode(uint32_t pin, uint32_t mode)
{
  
  if (pin >= variant_pin_map_size)
20402abc:	204047b7          	lui	a5,0x20404
20402ac0:	be07a783          	lw	a5,-1056(a5) # 20403be0 <variant_pin_map_size>
20402ac4:	02f57d63          	bleu	a5,a0,20402afe <pinMode+0x42>
    return;
  
  GPIO_REG(GPIO_OUTPUT_XOR)  &= ~digitalPinToBitMask(pin);
20402ac8:	204047b7          	lui	a5,0x20404
20402acc:	a5478793          	addi	a5,a5,-1452 # 20403a54 <variant_pin_map>
20402ad0:	050a                	slli	a0,a0,0x2
20402ad2:	953e                	add	a0,a0,a5
20402ad4:	00154703          	lbu	a4,1(a0)
20402ad8:	100127b7          	lui	a5,0x10012
20402adc:	43b0                	lw	a2,64(a5)
20402ade:	4505                	li	a0,1
20402ae0:	00e51733          	sll	a4,a0,a4
20402ae4:	fff74693          	not	a3,a4
20402ae8:	8e75                	and	a2,a2,a3
20402aea:	c3b0                	sw	a2,64(a5)
  GPIO_REG(GPIO_IOF_EN)      &= ~digitalPinToBitMask(pin);
20402aec:	5f90                	lw	a2,56(a5)
20402aee:	8e75                	and	a2,a2,a3
20402af0:	df90                	sw	a2,56(a5)
//pwm_enabled_pin[pin] = 0;
  
  switch (mode) {
20402af2:	02a58b63          	beq	a1,a0,20402b28 <pinMode+0x6c>
20402af6:	cd99                	beqz	a1,20402b14 <pinMode+0x58>
20402af8:	4609                	li	a2,2
20402afa:	00c58363          	beq	a1,a2,20402b00 <pinMode+0x44>
    GPIO_REG(GPIO_INPUT_EN)  &= ~digitalPinToBitMask(pin);
    GPIO_REG(GPIO_OUTPUT_EN) |=  digitalPinToBitMask(pin);
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
    break;
  }
}
20402afe:	8082                	ret
    GPIO_REG(GPIO_INPUT_EN)  |=  digitalPinToBitMask(pin);
20402b00:	43d0                	lw	a2,4(a5)
20402b02:	8e59                	or	a2,a2,a4
20402b04:	c3d0                	sw	a2,4(a5)
    GPIO_REG(GPIO_OUTPUT_EN) &= ~digitalPinToBitMask(pin);
20402b06:	4790                	lw	a2,8(a5)
20402b08:	8ef1                	and	a3,a3,a2
20402b0a:	c794                	sw	a3,8(a5)
    GPIO_REG(GPIO_PULLUP_EN) |=  digitalPinToBitMask(pin);
20402b0c:	4b94                	lw	a3,16(a5)
20402b0e:	8f55                	or	a4,a4,a3
20402b10:	cb98                	sw	a4,16(a5)
    break;
20402b12:	8082                	ret
    GPIO_REG(GPIO_INPUT_EN)  |=  digitalPinToBitMask(pin);
20402b14:	43d0                	lw	a2,4(a5)
20402b16:	8f51                	or	a4,a4,a2
20402b18:	c3d8                	sw	a4,4(a5)
    GPIO_REG(GPIO_OUTPUT_EN) &= ~digitalPinToBitMask(pin);
20402b1a:	4798                	lw	a4,8(a5)
20402b1c:	8f75                	and	a4,a4,a3
20402b1e:	c798                	sw	a4,8(a5)
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
20402b20:	4b98                	lw	a4,16(a5)
20402b22:	8ef9                	and	a3,a3,a4
20402b24:	cb94                	sw	a3,16(a5)
    break;
20402b26:	8082                	ret
    GPIO_REG(GPIO_INPUT_EN)  &= ~digitalPinToBitMask(pin);
20402b28:	43d0                	lw	a2,4(a5)
20402b2a:	8e75                	and	a2,a2,a3
20402b2c:	c3d0                	sw	a2,4(a5)
    GPIO_REG(GPIO_OUTPUT_EN) |=  digitalPinToBitMask(pin);
20402b2e:	4790                	lw	a2,8(a5)
20402b30:	8f51                	or	a4,a4,a2
20402b32:	c798                	sw	a4,8(a5)
    GPIO_REG(GPIO_PULLUP_EN) &= ~digitalPinToBitMask(pin);
20402b34:	4b98                	lw	a4,16(a5)
20402b36:	8ef9                	and	a3,a3,a4
20402b38:	cb94                	sw	a3,16(a5)
}
20402b3a:	8082                	ret

20402b3c <digitalWrite>:


void
digitalWrite(uint32_t pin, uint32_t val)
{
  if (pin >= variant_pin_map_size)
20402b3c:	204047b7          	lui	a5,0x20404
20402b40:	be07a783          	lw	a5,-1056(a5) # 20403be0 <variant_pin_map_size>
20402b44:	02f57b63          	bleu	a5,a0,20402b7a <digitalWrite+0x3e>
    return;
  
  if (val)
20402b48:	204047b7          	lui	a5,0x20404
20402b4c:	a5478793          	addi	a5,a5,-1452 # 20403a54 <variant_pin_map>
20402b50:	050a                	slli	a0,a0,0x2
20402b52:	953e                	add	a0,a0,a5
20402b54:	00154703          	lbu	a4,1(a0)
20402b58:	4785                	li	a5,1
20402b5a:	00e797b3          	sll	a5,a5,a4
20402b5e:	c599                	beqz	a1,20402b6c <digitalWrite+0x30>
    GPIO_REG(GPIO_OUTPUT_VAL) |=  digitalPinToBitMask(pin);
20402b60:	100126b7          	lui	a3,0x10012
20402b64:	46d8                	lw	a4,12(a3)
20402b66:	8fd9                	or	a5,a5,a4
20402b68:	c6dc                	sw	a5,12(a3)
20402b6a:	8082                	ret
  else
    GPIO_REG(GPIO_OUTPUT_VAL) &= ~digitalPinToBitMask(pin);
20402b6c:	10012737          	lui	a4,0x10012
20402b70:	4754                	lw	a3,12(a4)
20402b72:	fff7c793          	not	a5,a5
20402b76:	8ff5                	and	a5,a5,a3
20402b78:	c75c                	sw	a5,12(a4)

}
20402b7a:	8082                	ret

20402b7c <digitalRead>:

int
digitalRead(uint32_t pin)
{
if (pin >= variant_pin_map_size)
20402b7c:	204047b7          	lui	a5,0x20404
20402b80:	be07a783          	lw	a5,-1056(a5) # 20403be0 <variant_pin_map_size>
20402b84:	02f57463          	bleu	a5,a0,20402bac <digitalRead+0x30>
  return 0;

 return ((GPIO_REG(GPIO_INPUT_VAL) & digitalPinToBitMask(pin)) != 0);
20402b88:	204047b7          	lui	a5,0x20404
20402b8c:	a5478793          	addi	a5,a5,-1452 # 20403a54 <variant_pin_map>
20402b90:	050a                	slli	a0,a0,0x2
20402b92:	953e                	add	a0,a0,a5
20402b94:	00154703          	lbu	a4,1(a0)
20402b98:	100127b7          	lui	a5,0x10012
20402b9c:	439c                	lw	a5,0(a5)
20402b9e:	4505                	li	a0,1
20402ba0:	00e51533          	sll	a0,a0,a4
20402ba4:	8d7d                	and	a0,a0,a5
20402ba6:	00a03533          	snez	a0,a0
20402baa:	8082                	ret
  return 0;
20402bac:	4501                	li	a0,0
}
20402bae:	8082                	ret

20402bb0 <Print::write(unsigned char const*, unsigned int)>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
20402bb0:	1101                	addi	sp,sp,-32
20402bb2:	ce06                	sw	ra,28(sp)
20402bb4:	cc22                	sw	s0,24(sp)
20402bb6:	ca26                	sw	s1,20(sp)
20402bb8:	c84a                	sw	s2,16(sp)
20402bba:	c64e                	sw	s3,12(sp)
  size_t n = 0;
  while (size--) {
20402bbc:	ca0d                	beqz	a2,20402bee <Print::write(unsigned char const*, unsigned int)+0x3e>
20402bbe:	892a                	mv	s2,a0
20402bc0:	842e                	mv	s0,a1
20402bc2:	00c589b3          	add	s3,a1,a2
  size_t n = 0;
20402bc6:	4481                	li	s1,0
    n += write(*buffer++);
20402bc8:	00092783          	lw	a5,0(s2)
20402bcc:	0405                	addi	s0,s0,1
20402bce:	fff44583          	lbu	a1,-1(s0)
20402bd2:	439c                	lw	a5,0(a5)
20402bd4:	854a                	mv	a0,s2
20402bd6:	9782                	jalr	a5
20402bd8:	94aa                	add	s1,s1,a0
  while (size--) {
20402bda:	fe8997e3          	bne	s3,s0,20402bc8 <Print::write(unsigned char const*, unsigned int)+0x18>
  }
  return n;
}
20402bde:	40f2                	lw	ra,28(sp)
20402be0:	4462                	lw	s0,24(sp)
20402be2:	8526                	mv	a0,s1
20402be4:	4942                	lw	s2,16(sp)
20402be6:	44d2                	lw	s1,20(sp)
20402be8:	49b2                	lw	s3,12(sp)
20402bea:	6105                	addi	sp,sp,32
20402bec:	8082                	ret
20402bee:	40f2                	lw	ra,28(sp)
20402bf0:	4462                	lw	s0,24(sp)
  size_t n = 0;
20402bf2:	4481                	li	s1,0
}
20402bf4:	8526                	mv	a0,s1
20402bf6:	4942                	lw	s2,16(sp)
20402bf8:	44d2                	lw	s1,20(sp)
20402bfa:	49b2                	lw	s3,12(sp)
20402bfc:	6105                	addi	sp,sp,32
20402bfe:	8082                	ret

20402c00 <Print::print(char const*)>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
20402c00:	c59d                	beqz	a1,20402c2e <Print::print(char const*)+0x2e>
      return write((const uint8_t *)str, strlen(str));
20402c02:	411c                	lw	a5,0(a0)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
20402c04:	1141                	addi	sp,sp,-16
20402c06:	c226                	sw	s1,4(sp)
20402c08:	c04a                	sw	s2,0(sp)
20402c0a:	84aa                	mv	s1,a0
20402c0c:	0047a903          	lw	s2,4(a5) # 10012004 <__stack_size+0x10011804>
20402c10:	852e                	mv	a0,a1
20402c12:	c422                	sw	s0,8(sp)
20402c14:	c606                	sw	ra,12(sp)
20402c16:	842e                	mv	s0,a1
20402c18:	2be1                	jal	204031f0 <strlen>
20402c1a:	85a2                	mv	a1,s0
  return write(str);
}
20402c1c:	4422                	lw	s0,8(sp)
20402c1e:	40b2                	lw	ra,12(sp)
20402c20:	862a                	mv	a2,a0
20402c22:	834a                	mv	t1,s2
20402c24:	8526                	mv	a0,s1
20402c26:	4902                	lw	s2,0(sp)
20402c28:	4492                	lw	s1,4(sp)
20402c2a:	0141                	addi	sp,sp,16
20402c2c:	8302                	jr	t1
20402c2e:	4501                	li	a0,0
20402c30:	8082                	ret

20402c32 <Print::println(char const*)>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
20402c32:	1141                	addi	sp,sp,-16
20402c34:	c422                	sw	s0,8(sp)
20402c36:	c04a                	sw	s2,0(sp)
20402c38:	c606                	sw	ra,12(sp)
20402c3a:	c226                	sw	s1,4(sp)
20402c3c:	842a                	mv	s0,a0
      if (str == NULL) return 0;
20402c3e:	411c                	lw	a5,0(a0)
20402c40:	4901                	li	s2,0
20402c42:	cd81                	beqz	a1,20402c5a <Print::println(char const*)+0x28>
      return write((const uint8_t *)str, strlen(str));
20402c44:	0047a903          	lw	s2,4(a5)
20402c48:	852e                	mv	a0,a1
20402c4a:	84ae                	mv	s1,a1
20402c4c:	2355                	jal	204031f0 <strlen>
20402c4e:	862a                	mv	a2,a0
20402c50:	85a6                	mv	a1,s1
20402c52:	8522                	mv	a0,s0
20402c54:	9902                	jalr	s2
20402c56:	401c                	lw	a5,0(s0)
20402c58:	892a                	mv	s2,a0
  return write(c);
20402c5a:	439c                	lw	a5,0(a5)
20402c5c:	45b5                	li	a1,13
20402c5e:	8522                	mv	a0,s0
20402c60:	9782                	jalr	a5
20402c62:	401c                	lw	a5,0(s0)
20402c64:	84aa                	mv	s1,a0
20402c66:	45a9                	li	a1,10
20402c68:	439c                	lw	a5,0(a5)
20402c6a:	8522                	mv	a0,s0
  size_t n = print(c);
  n += println();
20402c6c:	94ca                	add	s1,s1,s2
  return write(c);
20402c6e:	9782                	jalr	a5
  return n;
}
20402c70:	40b2                	lw	ra,12(sp)
20402c72:	4422                	lw	s0,8(sp)
20402c74:	9526                	add	a0,a0,s1
20402c76:	4902                	lw	s2,0(sp)
20402c78:	4492                	lw	s1,4(sp)
20402c7a:	0141                	addi	sp,sp,16
20402c7c:	8082                	ret

20402c7e <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////
__attribute__((stack_erase))
size_t Print::printNumber(unsigned long n, uint8_t base) {
20402c7e:	7139                	addi	sp,sp,-64
20402c80:	da26                	sw	s1,52(sp)
20402c82:	de06                	sw	ra,60(sp)
20402c84:	dc22                	sw	s0,56(sp)
20402c86:	d84a                	sw	s2,48(sp)
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
20402c88:	02010623          	sb	zero,44(sp)

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
20402c8c:	4785                	li	a5,1
size_t Print::printNumber(unsigned long n, uint8_t base) {
20402c8e:	84aa                	mv	s1,a0
20402c90:	872e                	mv	a4,a1
20402c92:	8532                	mv	a0,a2
  if (base < 2) base = 10;
20402c94:	00c7e463          	bltu	a5,a2,20402c9c <Print::printNumber(unsigned long, unsigned char)+0x1e>
20402c98:	4529                	li	a0,10
20402c9a:	4629                	li	a2,10
20402c9c:	1060                	addi	s0,sp,44

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
20402c9e:	48a5                	li	a7,9
20402ca0:	a809                	j	20402cb2 <Print::printNumber(unsigned long, unsigned char)+0x34>
20402ca2:	0ff87793          	andi	a5,a6,255
20402ca6:	147d                	addi	s0,s0,-1
20402ca8:	00f40023          	sb	a5,0(s0)
  } while(n);
20402cac:	02a76863          	bltu	a4,a0,20402cdc <Print::printNumber(unsigned long, unsigned char)+0x5e>
    n /= base;
20402cb0:	872e                	mv	a4,a1
20402cb2:	02a755b3          	divu	a1,a4,a0
    char c = m - base * n;
20402cb6:	02b607b3          	mul	a5,a2,a1
20402cba:	40f707b3          	sub	a5,a4,a5
20402cbe:	0ff7f793          	andi	a5,a5,255
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
20402cc2:	03078813          	addi	a6,a5,48
20402cc6:	03778693          	addi	a3,a5,55
20402cca:	fcf8fce3          	bleu	a5,a7,20402ca2 <Print::printNumber(unsigned long, unsigned char)+0x24>
20402cce:	0ff6f793          	andi	a5,a3,255
20402cd2:	147d                	addi	s0,s0,-1
20402cd4:	00f40023          	sb	a5,0(s0)
  } while(n);
20402cd8:	fca77ce3          	bleu	a0,a4,20402cb0 <Print::printNumber(unsigned long, unsigned char)+0x32>
20402cdc:	409c                	lw	a5,0(s1)
20402cde:	8522                	mv	a0,s0
20402ce0:	0047a903          	lw	s2,4(a5)
20402ce4:	2331                	jal	204031f0 <strlen>
20402ce6:	862a                	mv	a2,a0
20402ce8:	85a2                	mv	a1,s0
20402cea:	8526                	mv	a0,s1
20402cec:	9902                	jalr	s2

  return write(str);
}
20402cee:	5462                	lw	s0,56(sp)
20402cf0:	50f2                	lw	ra,60(sp)
20402cf2:	54d2                	lw	s1,52(sp)
20402cf4:	5942                	lw	s2,48(sp)
20402cf6:	838a                	mv	t2,sp
20402cf8:	6121                	addi	sp,sp,64
20402cfa:	00238663          	beq	t2,sp,20402d06 <Print::printNumber(unsigned long, unsigned char)+0x88>
20402cfe:	0003a023          	sw	zero,0(t2)
20402d02:	0391                	addi	t2,t2,4
20402d04:	bfdd                	j	20402cfa <Print::printNumber(unsigned long, unsigned char)+0x7c>
20402d06:	8082                	ret

20402d08 <Print::print(unsigned long, int)>:
  if (base == 0) return write(n);
20402d08:	e619                	bnez	a2,20402d16 <Print::print(unsigned long, int)+0xe>
20402d0a:	4118                	lw	a4,0(a0)
20402d0c:	0ff5f593          	andi	a1,a1,255
20402d10:	00072303          	lw	t1,0(a4) # 10012000 <__stack_size+0x10011800>
20402d14:	8302                	jr	t1
  else return printNumber(n, base);
20402d16:	0ff67613          	andi	a2,a2,255
20402d1a:	b795                	j	20402c7e <Print::printNumber(unsigned long, unsigned char)>

20402d1c <UARTClass::operator bool()>:
    int read(void);
    void flush(void);
    size_t write(const uint8_t c);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    operator bool() {return (true);}; // UART always active
20402d1c:	4505                	li	a0,1
20402d1e:	8082                	ret

20402d20 <UARTClass::begin(unsigned long)>:
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402d20:	100127b7          	lui	a5,0x10012
20402d24:	43b4                	lw	a3,64(a5)
20402d26:	fffd0737          	lui	a4,0xfffd0
{
20402d2a:	1141                	addi	sp,sp,-16
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402d2c:	177d                	addi	a4,a4,-1
{
20402d2e:	c606                	sw	ra,12(sp)
  GPIO_REG(GPIO_OUTPUT_XOR)&= ~(IOF0_UART0_MASK);
20402d30:	8ef9                	and	a3,a3,a4
20402d32:	c3b4                	sw	a3,64(a5)
  GPIO_REG(GPIO_IOF_SEL)   &= ~(IOF0_UART0_MASK);
20402d34:	5fd4                	lw	a3,60(a5)
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402d36:	00030837          	lui	a6,0x30
  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402d3a:	00f42537          	lui	a0,0xf42
  GPIO_REG(GPIO_IOF_SEL)   &= ~(IOF0_UART0_MASK);
20402d3e:	8f75                	and	a4,a4,a3
20402d40:	dfd8                	sw	a4,60(a5)
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402d42:	5f98                	lw	a4,56(a5)
  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402d44:	862e                	mv	a2,a1
20402d46:	4681                	li	a3,0
  GPIO_REG(GPIO_IOF_EN)    |= IOF0_UART0_MASK;
20402d48:	01076733          	or	a4,a4,a6
20402d4c:	df98                	sw	a4,56(a5)
  UART_REG(UART_REG_DIV) = F_CPU / bauds - 1;
20402d4e:	40050513          	addi	a0,a0,1024 # f42400 <__stack_size+0xf41c00>
20402d52:	4581                	li	a1,0
20402d54:	7fc000ef          	jal	ra,20403550 <__divdi3>
20402d58:	100137b7          	lui	a5,0x10013
20402d5c:	157d                	addi	a0,a0,-1
20402d5e:	cf88                	sw	a0,24(a5)
  UART_REG(UART_REG_TXCTRL) |= UART_TXEN;
20402d60:	4798                	lw	a4,8(a5)
}
20402d62:	40b2                	lw	ra,12(sp)
  UART_REG(UART_REG_TXCTRL) |= UART_TXEN;
20402d64:	00176713          	ori	a4,a4,1
20402d68:	c798                	sw	a4,8(a5)
  UART_REG(UART_REG_RXCTRL) |= UART_RXEN;
20402d6a:	47d8                	lw	a4,12(a5)
20402d6c:	00176713          	ori	a4,a4,1
20402d70:	c7d8                	sw	a4,12(a5)
}
20402d72:	0141                	addi	sp,sp,16
20402d74:	8082                	ret

20402d76 <UARTClass::end()>:
  GPIO_REG(GPIO_IOF_EN)    &= ~IOF0_UART0_MASK;
20402d76:	100126b7          	lui	a3,0x10012
20402d7a:	5e9c                	lw	a5,56(a3)
20402d7c:	fffd0737          	lui	a4,0xfffd0
20402d80:	177d                	addi	a4,a4,-1
20402d82:	8ff9                	and	a5,a5,a4
20402d84:	de9c                	sw	a5,56(a3)
  UART_REG(UART_REG_TXCTRL) &= ~UART_TXEN;
20402d86:	100137b7          	lui	a5,0x10013
20402d8a:	4798                	lw	a4,8(a5)
20402d8c:	9b79                	andi	a4,a4,-2
20402d8e:	c798                	sw	a4,8(a5)
  UART_REG(UART_REG_RXCTRL) &= ~UART_RXEN;
20402d90:	47d8                	lw	a4,12(a5)
20402d92:	9b79                	andi	a4,a4,-2
20402d94:	c7d8                	sw	a4,12(a5)
}
20402d96:	8082                	ret

20402d98 <UARTClass::available()>:
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402d98:	100137b7          	lui	a5,0x10013
20402d9c:	43d8                	lw	a4,4(a5)
20402d9e:	02074463          	bltz	a4,20402dc6 <UARTClass::available()+0x2e>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402da2:	01454783          	lbu	a5,20(a0)
20402da6:	0ff7f793          	andi	a5,a5,255
20402daa:	00178693          	addi	a3,a5,1 # 10013001 <__stack_size+0x10012801>
20402dae:	0ff6f693          	andi	a3,a3,255
20402db2:	00d50a23          	sb	a3,20(a0)
20402db6:	97aa                	add	a5,a5,a0
20402db8:	00e78b23          	sb	a4,22(a5)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402dbc:	01454783          	lbu	a5,20(a0)
20402dc0:	8b9d                	andi	a5,a5,7
20402dc2:	00f50a23          	sb	a5,20(a0)
  return (!(sio_rxbuf_head == sio_rxbuf_tail));
20402dc6:	01454783          	lbu	a5,20(a0)
20402dca:	01554503          	lbu	a0,21(a0)
20402dce:	40a78533          	sub	a0,a5,a0
}
20402dd2:	00a03533          	snez	a0,a0
20402dd6:	8082                	ret

20402dd8 <UARTClass::peek()>:
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402dd8:	100137b7          	lui	a5,0x10013
20402ddc:	43d8                	lw	a4,4(a5)
20402dde:	02074463          	bltz	a4,20402e06 <UARTClass::peek()+0x2e>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402de2:	01454783          	lbu	a5,20(a0)
20402de6:	0ff7f793          	andi	a5,a5,255
20402dea:	00178693          	addi	a3,a5,1 # 10013001 <__stack_size+0x10012801>
20402dee:	0ff6f693          	andi	a3,a3,255
20402df2:	00d50a23          	sb	a3,20(a0)
20402df6:	97aa                	add	a5,a5,a0
20402df8:	00e78b23          	sb	a4,22(a5)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402dfc:	01454783          	lbu	a5,20(a0)
20402e00:	8b9d                	andi	a5,a5,7
20402e02:	00f50a23          	sb	a5,20(a0)
  if (sio_rxbuf_tail == sio_rxbuf_head)
20402e06:	01554703          	lbu	a4,21(a0)
20402e0a:	01454783          	lbu	a5,20(a0)
20402e0e:	0ff7f793          	andi	a5,a5,255
20402e12:	00e78863          	beq	a5,a4,20402e22 <UARTClass::peek()+0x4a>
    return (sio_rxbuf[sio_rxbuf_tail]);
20402e16:	01554783          	lbu	a5,21(a0)
20402e1a:	953e                	add	a0,a0,a5
20402e1c:	01654503          	lbu	a0,22(a0)
20402e20:	8082                	ret
    return (-1);
20402e22:	557d                	li	a0,-1
}
20402e24:	8082                	ret

20402e26 <UARTClass::read()>:
{
20402e26:	87aa                	mv	a5,a0
  if ((c = UART_REG(UART_REG_RXFIFO)) >= 0) {
20402e28:	100135b7          	lui	a1,0x10013
20402e2c:	41d4                	lw	a3,4(a1)
20402e2e:	0206c463          	bltz	a3,20402e56 <UARTClass::read()+0x30>
    sio_rxbuf[sio_rxbuf_head++] = c;
20402e32:	0147c703          	lbu	a4,20(a5)
20402e36:	0ff77713          	andi	a4,a4,255
20402e3a:	00170613          	addi	a2,a4,1 # fffd0001 <_sp+0x7ffcc001>
20402e3e:	0ff67613          	andi	a2,a2,255
20402e42:	00c78a23          	sb	a2,20(a5)
20402e46:	973e                	add	a4,a4,a5
20402e48:	00d70b23          	sb	a3,22(a4)
    sio_rxbuf_head &= SIO_RXBUFMASK;
20402e4c:	0147c703          	lbu	a4,20(a5)
20402e50:	8b1d                	andi	a4,a4,7
20402e52:	00e78a23          	sb	a4,20(a5)
    busy = (sio_rxbuf_head == sio_rxbuf_tail);
20402e56:	0147c683          	lbu	a3,20(a5)
20402e5a:	0157c703          	lbu	a4,21(a5)
20402e5e:	0ff77713          	andi	a4,a4,255
  } while (blocking && busy);
20402e62:	fcd705e3          	beq	a4,a3,20402e2c <UARTClass::read()+0x6>
  c = sio_rxbuf[sio_rxbuf_tail++];
20402e66:	0157c703          	lbu	a4,21(a5)
20402e6a:	0ff77713          	andi	a4,a4,255
20402e6e:	00170693          	addi	a3,a4,1
20402e72:	0ff6f693          	andi	a3,a3,255
20402e76:	00d78aa3          	sb	a3,21(a5)
  sio_rxbuf_tail &= SIO_RXBUFMASK;
20402e7a:	0157c683          	lbu	a3,21(a5)
  c = sio_rxbuf[sio_rxbuf_tail++];
20402e7e:	973e                	add	a4,a4,a5
20402e80:	01674503          	lbu	a0,22(a4)
  sio_rxbuf_tail &= SIO_RXBUFMASK;
20402e84:	0076f713          	andi	a4,a3,7
20402e88:	00e78aa3          	sb	a4,21(a5)
}
20402e8c:	8082                	ret

20402e8e <UARTClass::flush()>:
}
20402e8e:	8082                	ret

20402e90 <UARTClass::write(unsigned char)>:
  uint32_t busy = (*val) & 0x80000000;
20402e90:	100137b7          	lui	a5,0x10013
20402e94:	439c                	lw	a5,0(a5)
    while (*val & 0x80000000);
20402e96:	10013737          	lui	a4,0x10013
20402e9a:	431c                	lw	a5,0(a4)
20402e9c:	fe07cfe3          	bltz	a5,20402e9a <UARTClass::write(unsigned char)+0xa>
  UART_REG(UART_REG_TXFIFO) = c;
20402ea0:	c30c                	sw	a1,0(a4)
}
20402ea2:	4505                	li	a0,1
20402ea4:	8082                	ret

20402ea6 <randomSeed(unsigned long)>:
}
#include "WMath.h"

extern void randomSeed( uint32_t dwSeed )
{
  if ( dwSeed != 0 )
20402ea6:	e111                	bnez	a0,20402eaa <randomSeed(unsigned long)+0x4>
  {
    srand( dwSeed ) ;
  }
}
20402ea8:	8082                	ret
    srand( dwSeed ) ;
20402eaa:	a49d                	j	20403110 <srand>

20402eac <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
20402eac:	a001                	j	20402eac <__cxa_pure_virtual>

20402eae <freedom_e300_specific_initialization()>:
  write_csr(mtvec, &trap_entry);
20402eae:	204037b7          	lui	a5,0x20403
20402eb2:	ed478793          	addi	a5,a5,-300 # 20402ed4 <trap_entry>
20402eb6:	30579073          	csrw	mtvec,a5
  if (read_csr(misa) & (1 << ('F' - 'A'))) { // if F extension is present
20402eba:	301027f3          	csrr	a5,misa
20402ebe:	0207f793          	andi	a5,a5,32
20402ec2:	c791                	beqz	a5,20402ece <freedom_e300_specific_initialization()+0x20>
    write_csr(mstatus, MSTATUS_FS); // allow FPU instructions without trapping
20402ec4:	6799                	lui	a5,0x6
20402ec6:	30079073          	csrw	mstatus,a5
    write_csr(fcsr, 0); // initialize rounding mode, undefined at reset
20402eca:	00305073          	csrwi	fcsr,0
	PRCI_use_hfxosc((uint32_t) 1 );
20402ece:	4505                	li	a0,1
20402ed0:	a065                	j	20402f78 <PRCI_use_hfxosc>
	...

20402ed4 <trap_entry>:

  .section      .text.entry	
  .align 2
  .global trap_entry
trap_entry:
  addi sp, sp, -32*REGBYTES
20402ed4:	7119                	addi	sp,sp,-128

  STORE x1, 1*REGBYTES(sp)
20402ed6:	c206                	sw	ra,4(sp)
  STORE x2, 2*REGBYTES(sp)
20402ed8:	c40a                	sw	sp,8(sp)
  STORE x3, 3*REGBYTES(sp)
20402eda:	c60e                	sw	gp,12(sp)
  STORE x4, 4*REGBYTES(sp)
20402edc:	c812                	sw	tp,16(sp)
  STORE x5, 5*REGBYTES(sp)
20402ede:	ca16                	sw	t0,20(sp)
  STORE x6, 6*REGBYTES(sp)
20402ee0:	cc1a                	sw	t1,24(sp)
  STORE x7, 7*REGBYTES(sp)
20402ee2:	ce1e                	sw	t2,28(sp)
  STORE x8, 8*REGBYTES(sp)
20402ee4:	d022                	sw	s0,32(sp)
  STORE x9, 9*REGBYTES(sp)
20402ee6:	d226                	sw	s1,36(sp)
  STORE x10, 10*REGBYTES(sp)
20402ee8:	d42a                	sw	a0,40(sp)
  STORE x11, 11*REGBYTES(sp)
20402eea:	d62e                	sw	a1,44(sp)
  STORE x12, 12*REGBYTES(sp)
20402eec:	d832                	sw	a2,48(sp)
  STORE x13, 13*REGBYTES(sp)
20402eee:	da36                	sw	a3,52(sp)
  STORE x14, 14*REGBYTES(sp)
20402ef0:	dc3a                	sw	a4,56(sp)
  STORE x15, 15*REGBYTES(sp)
20402ef2:	de3e                	sw	a5,60(sp)
  STORE x16, 16*REGBYTES(sp)
20402ef4:	c0c2                	sw	a6,64(sp)
  STORE x17, 17*REGBYTES(sp)
20402ef6:	c2c6                	sw	a7,68(sp)
  STORE x18, 18*REGBYTES(sp)
20402ef8:	c4ca                	sw	s2,72(sp)
  STORE x19, 19*REGBYTES(sp)
20402efa:	c6ce                	sw	s3,76(sp)
  STORE x20, 20*REGBYTES(sp)
20402efc:	c8d2                	sw	s4,80(sp)
  STORE x21, 21*REGBYTES(sp)
20402efe:	cad6                	sw	s5,84(sp)
  STORE x22, 22*REGBYTES(sp)
20402f00:	ccda                	sw	s6,88(sp)
  STORE x23, 23*REGBYTES(sp)
20402f02:	cede                	sw	s7,92(sp)
  STORE x24, 24*REGBYTES(sp)
20402f04:	d0e2                	sw	s8,96(sp)
  STORE x25, 25*REGBYTES(sp)
20402f06:	d2e6                	sw	s9,100(sp)
  STORE x26, 26*REGBYTES(sp)
20402f08:	d4ea                	sw	s10,104(sp)
  STORE x27, 27*REGBYTES(sp)
20402f0a:	d6ee                	sw	s11,108(sp)
  STORE x28, 28*REGBYTES(sp)
20402f0c:	d8f2                	sw	t3,112(sp)
  STORE x29, 29*REGBYTES(sp)
20402f0e:	daf6                	sw	t4,116(sp)
  STORE x30, 30*REGBYTES(sp)
20402f10:	dcfa                	sw	t5,120(sp)
  STORE x31, 31*REGBYTES(sp)
20402f12:	defe                	sw	t6,124(sp)

  csrr a0, mcause
20402f14:	34202573          	csrr	a0,mcause
  csrr a1, mepc
20402f18:	341025f3          	csrr	a1,mepc
  mv a2, sp
20402f1c:	860a                	mv	a2,sp
  call handle_trap
20402f1e:	2899                	jal	20402f74 <handle_trap>
  csrw mepc, a0
20402f20:	34151073          	csrw	mepc,a0

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
20402f24:	000022b7          	lui	t0,0x2
20402f28:	80028293          	addi	t0,t0,-2048 # 1800 <__stack_size+0x1000>
  csrs mstatus, t0
20402f2c:	3002a073          	csrs	mstatus,t0

  LOAD x1, 1*REGBYTES(sp)
20402f30:	4092                	lw	ra,4(sp)
  LOAD x2, 2*REGBYTES(sp)
20402f32:	4122                	lw	sp,8(sp)
  LOAD x3, 3*REGBYTES(sp)
20402f34:	41b2                	lw	gp,12(sp)
  LOAD x4, 4*REGBYTES(sp)
20402f36:	4242                	lw	tp,16(sp)
  LOAD x5, 5*REGBYTES(sp)
20402f38:	42d2                	lw	t0,20(sp)
  LOAD x6, 6*REGBYTES(sp)
20402f3a:	4362                	lw	t1,24(sp)
  LOAD x7, 7*REGBYTES(sp)
20402f3c:	43f2                	lw	t2,28(sp)
  LOAD x8, 8*REGBYTES(sp)
20402f3e:	5402                	lw	s0,32(sp)
  LOAD x9, 9*REGBYTES(sp)
20402f40:	5492                	lw	s1,36(sp)
  LOAD x10, 10*REGBYTES(sp)
20402f42:	5522                	lw	a0,40(sp)
  LOAD x11, 11*REGBYTES(sp)
20402f44:	55b2                	lw	a1,44(sp)
  LOAD x12, 12*REGBYTES(sp)
20402f46:	5642                	lw	a2,48(sp)
  LOAD x13, 13*REGBYTES(sp)
20402f48:	56d2                	lw	a3,52(sp)
  LOAD x14, 14*REGBYTES(sp)
20402f4a:	5762                	lw	a4,56(sp)
  LOAD x15, 15*REGBYTES(sp)
20402f4c:	57f2                	lw	a5,60(sp)
  LOAD x16, 16*REGBYTES(sp)
20402f4e:	4806                	lw	a6,64(sp)
  LOAD x17, 17*REGBYTES(sp)
20402f50:	4896                	lw	a7,68(sp)
  LOAD x18, 18*REGBYTES(sp)
20402f52:	4926                	lw	s2,72(sp)
  LOAD x19, 19*REGBYTES(sp)
20402f54:	49b6                	lw	s3,76(sp)
  LOAD x20, 20*REGBYTES(sp)
20402f56:	4a46                	lw	s4,80(sp)
  LOAD x21, 21*REGBYTES(sp)
20402f58:	4ad6                	lw	s5,84(sp)
  LOAD x22, 22*REGBYTES(sp)
20402f5a:	4b66                	lw	s6,88(sp)
  LOAD x23, 23*REGBYTES(sp)
20402f5c:	4bf6                	lw	s7,92(sp)
  LOAD x24, 24*REGBYTES(sp)
20402f5e:	5c06                	lw	s8,96(sp)
  LOAD x25, 25*REGBYTES(sp)
20402f60:	5c96                	lw	s9,100(sp)
  LOAD x26, 26*REGBYTES(sp)
20402f62:	5d26                	lw	s10,104(sp)
  LOAD x27, 27*REGBYTES(sp)
20402f64:	5db6                	lw	s11,108(sp)
  LOAD x28, 28*REGBYTES(sp)
20402f66:	5e46                	lw	t3,112(sp)
  LOAD x29, 29*REGBYTES(sp)
20402f68:	5ed6                	lw	t4,116(sp)
  LOAD x30, 30*REGBYTES(sp)
20402f6a:	5f66                	lw	t5,120(sp)
  LOAD x31, 31*REGBYTES(sp)
20402f6c:	5ff6                	lw	t6,124(sp)

  addi sp, sp, 32*REGBYTES
20402f6e:	6109                	addi	sp,sp,128
  mret
20402f70:	30200073          	mret

20402f74 <handle_trap>:

.weak handle_trap
handle_trap:
1:
  j 1b
20402f74:	a001                	j	20402f74 <handle_trap>
	...

20402f78 <PRCI_use_hfxosc>:
void PRCI_use_pll(int refsel, int bypass,
			 int r, int f, int q, int finaldiv,
			 int hfroscdiv, int hfrosctrim)
{
  // Ensure that we aren't running off the PLL before we mess with it.
  if (PRCI_REG(PRCI_PLLCFG) & PLL_SEL(1)) {
20402f78:	100087b7          	lui	a5,0x10008
20402f7c:	4798                	lw	a4,8(a5)
20402f7e:	00f71693          	slli	a3,a4,0xf
20402f82:	0206d063          	bgez	a3,20402fa2 <PRCI_use_hfxosc+0x2a>
  PRCI_REG(PRCI_HFROSCCFG) = (ROSC_DIV(div) | ROSC_TRIM(trim) | ROSC_EN(1));
20402f86:	40100737          	lui	a4,0x40100
20402f8a:	0711                	addi	a4,a4,4
20402f8c:	c398                	sw	a4,0(a5)
  while ((PRCI_REG(PRCI_HFROSCCFG) & ROSC_RDY(1)) == 0);
20402f8e:	10008737          	lui	a4,0x10008
20402f92:	431c                	lw	a5,0(a4)
20402f94:	fe07dfe3          	bgez	a5,20402f92 <PRCI_use_hfxosc+0x1a>
  PRCI_REG(PRCI_PLLCFG) &= ~PLL_SEL(1);
20402f98:	471c                	lw	a5,8(a4)
20402f9a:	76c1                	lui	a3,0xffff0
20402f9c:	16fd                	addi	a3,a3,-1
20402f9e:	8ff5                	and	a5,a5,a3
20402fa0:	c71c                	sw	a5,8(a4)
  
  if (bypass) {
    // Bypass
    config_value |= PLL_BYPASS(1);

    PRCI_REG(PRCI_PLLCFG) = config_value;
20402fa2:	100087b7          	lui	a5,0x10008
20402fa6:	00060737          	lui	a4,0x60
20402faa:	c798                	sw	a4,8(a5)

    // If we don't have an HFXTAL, this doesn't really matter.
    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
20402fac:	10000713          	li	a4,256
20402fb0:	c7d8                	sw	a4,12(a5)
    while ((PRCI_REG(PRCI_PLLCFG) & PLL_LOCK(1)) == 0);

  }

  // Switch over to PLL Clock source
  PRCI_REG(PRCI_PLLCFG) |= PLL_SEL(1);
20402fb2:	4798                	lw	a4,8(a5)
20402fb4:	66c1                	lui	a3,0x10
20402fb6:	8f55                	or	a4,a4,a3
20402fb8:	c798                	sw	a4,8(a5)

  // If we're running off HFXOSC, turn off the HFROSC to
  // save power.
  if (refsel) {
    PRCI_REG(PRCI_HFROSCCFG) &= ~ROSC_EN(1);
20402fba:	4398                	lw	a4,0(a5)
20402fbc:	c00006b7          	lui	a3,0xc0000
20402fc0:	16fd                	addi	a3,a3,-1
20402fc2:	8f75                	and	a4,a4,a3
20402fc4:	c398                	sw	a4,0(a5)
	       0, // PLL settings don't matter
	       0, // PLL settings don't matter
	       finaldiv,
	       -1,
	       -1);
}
20402fc6:	8082                	ret

20402fc8 <atexit>:
 */

int
atexit (void (*fn) (void))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
20402fc8:	00050593          	mv	a1,a0
20402fcc:	00000693          	li	a3,0
20402fd0:	00000613          	li	a2,0
20402fd4:	00000513          	li	a0,0
20402fd8:	3700006f          	j	20403348 <__register_exitproc>

20402fdc <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
20402fdc:	ff010113          	addi	sp,sp,-16
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
20402fe0:	00000593          	li	a1,0
{
20402fe4:	00812423          	sw	s0,8(sp)
20402fe8:	00112623          	sw	ra,12(sp)
20402fec:	00050413          	mv	s0,a0
    __call_exitprocs (code, NULL);
20402ff0:	3f4000ef          	jal	ra,204033e4 <__call_exitprocs>

  if (_GLOBAL_REENT->__cleanup)
20402ff4:	800007b7          	lui	a5,0x80000
20402ff8:	4287a503          	lw	a0,1064(a5) # 80000428 <_sp+0xffffc428>
20402ffc:	03c52783          	lw	a5,60(a0)
20403000:	00078463          	beqz	a5,20403008 <exit+0x2c>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
20403004:	000780e7          	jalr	a5
  _exit (code);
20403008:	00040513          	mv	a0,s0
2040300c:	4f4000ef          	jal	ra,20403500 <_exit>

20403010 <__libc_fini_array>:
extern void _fini (void);

/* Run all the cleanup routines.  */
void
__libc_fini_array (void)
{
20403010:	ff010113          	addi	sp,sp,-16
20403014:	00812423          	sw	s0,8(sp)
20403018:	00912223          	sw	s1,4(sp)
  size_t count;
  size_t i;
  
  count = __fini_array_end - __fini_array_start;
2040301c:	20404437          	lui	s0,0x20404
20403020:	204044b7          	lui	s1,0x20404
20403024:	bec48793          	addi	a5,s1,-1044 # 20403bec <__fini_array_end>
20403028:	bec40413          	addi	s0,s0,-1044 # 20403bec <__fini_array_end>
2040302c:	40f40433          	sub	s0,s0,a5
{
20403030:	00112623          	sw	ra,12(sp)
  count = __fini_array_end - __fini_array_start;
20403034:	40245413          	srai	s0,s0,0x2
  for (i = count; i > 0; i--)
20403038:	02040263          	beqz	s0,2040305c <__libc_fini_array+0x4c>
2040303c:	00241493          	slli	s1,s0,0x2
20403040:	ffc48493          	addi	s1,s1,-4
20403044:	00f484b3          	add	s1,s1,a5
    __fini_array_start[i-1] ();
20403048:	0004a783          	lw	a5,0(s1)
2040304c:	fff40413          	addi	s0,s0,-1
20403050:	ffc48493          	addi	s1,s1,-4
20403054:	000780e7          	jalr	a5
  for (i = count; i > 0; i--)
20403058:	fe0418e3          	bnez	s0,20403048 <__libc_fini_array+0x38>

  _fini ();
}
2040305c:	00812403          	lw	s0,8(sp)
20403060:	00c12083          	lw	ra,12(sp)
20403064:	00412483          	lw	s1,4(sp)
20403068:	01010113          	addi	sp,sp,16
  _fini ();
2040306c:	808fd06f          	j	20400074 <_fini>

20403070 <__libc_init_array>:
extern void _init (void);

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
20403070:	ff010113          	addi	sp,sp,-16
20403074:	00812423          	sw	s0,8(sp)
20403078:	01212023          	sw	s2,0(sp)
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
2040307c:	20404437          	lui	s0,0x20404
20403080:	20404937          	lui	s2,0x20404
20403084:	be440793          	addi	a5,s0,-1052 # 20403be4 <__init_array_start>
20403088:	be490913          	addi	s2,s2,-1052 # 20403be4 <__init_array_start>
2040308c:	40f90933          	sub	s2,s2,a5
{
20403090:	00112623          	sw	ra,12(sp)
20403094:	00912223          	sw	s1,4(sp)
  count = __preinit_array_end - __preinit_array_start;
20403098:	40295913          	srai	s2,s2,0x2
  for (i = 0; i < count; i++)
2040309c:	02090063          	beqz	s2,204030bc <__libc_init_array+0x4c>
204030a0:	be440413          	addi	s0,s0,-1052
204030a4:	00000493          	li	s1,0
    __preinit_array_start[i] ();
204030a8:	00042783          	lw	a5,0(s0)
  for (i = 0; i < count; i++)
204030ac:	00148493          	addi	s1,s1,1
204030b0:	00440413          	addi	s0,s0,4
    __preinit_array_start[i] ();
204030b4:	000780e7          	jalr	a5
  for (i = 0; i < count; i++)
204030b8:	fe9918e3          	bne	s2,s1,204030a8 <__libc_init_array+0x38>

  _init ();
204030bc:	fb9fc0ef          	jal	ra,20400074 <_fini>

  count = __init_array_end - __init_array_start;
204030c0:	20404437          	lui	s0,0x20404
204030c4:	20404937          	lui	s2,0x20404
204030c8:	be440793          	addi	a5,s0,-1052 # 20403be4 <__init_array_start>
204030cc:	bec90913          	addi	s2,s2,-1044 # 20403bec <__fini_array_end>
204030d0:	40f90933          	sub	s2,s2,a5
204030d4:	40295913          	srai	s2,s2,0x2
  for (i = 0; i < count; i++)
204030d8:	02090063          	beqz	s2,204030f8 <__libc_init_array+0x88>
204030dc:	be440413          	addi	s0,s0,-1052
204030e0:	00000493          	li	s1,0
    __init_array_start[i] ();
204030e4:	00042783          	lw	a5,0(s0)
  for (i = 0; i < count; i++)
204030e8:	00148493          	addi	s1,s1,1
204030ec:	00440413          	addi	s0,s0,4
    __init_array_start[i] ();
204030f0:	000780e7          	jalr	a5
  for (i = 0; i < count; i++)
204030f4:	fe9918e3          	bne	s2,s1,204030e4 <__libc_init_array+0x74>
}
204030f8:	00c12083          	lw	ra,12(sp)
204030fc:	00812403          	lw	s0,8(sp)
20403100:	00412483          	lw	s1,4(sp)
20403104:	00012903          	lw	s2,0(sp)
20403108:	01010113          	addi	sp,sp,16
2040310c:	00008067          	ret

20403110 <srand>:
srand (unsigned int seed)
{
  struct _reent *reent = _REENT;

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
20403110:	800007b7          	lui	a5,0x80000
20403114:	4347a783          	lw	a5,1076(a5) # 80000434 <_sp+0xffffc434>
20403118:	0aa7a423          	sw	a0,168(a5)
2040311c:	0a07a623          	sw	zero,172(a5)
}
20403120:	00008067          	ret

20403124 <rand>:

int
rand (void)
{
  struct _reent *reent = _REENT;
20403124:	800007b7          	lui	a5,0x80000
20403128:	4347a583          	lw	a1,1076(a5) # 80000434 <_sp+0xffffc434>
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
2040312c:	4c958637          	lui	a2,0x4c958
20403130:	f2d60613          	addi	a2,a2,-211 # 4c957f2d <__fini_array_end+0x2c554341>
20403134:	0a85a703          	lw	a4,168(a1) # 100130a8 <__stack_size+0x100128a8>
20403138:	0ac5a503          	lw	a0,172(a1)
2040313c:	02c707b3          	mul	a5,a4,a2
20403140:	00178693          	addi	a3,a5,1
20403144:	00f6b7b3          	sltu	a5,a3,a5
  _REENT_RAND_NEXT(reent) =
20403148:	0ad5a423          	sw	a3,168(a1)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
2040314c:	5851f6b7          	lui	a3,0x5851f
20403150:	42d68693          	addi	a3,a3,1069 # 5851f42d <__fini_array_end+0x3811b841>
20403154:	02d706b3          	mul	a3,a4,a3
20403158:	02c50533          	mul	a0,a0,a2
2040315c:	02c73733          	mulhu	a4,a4,a2
20403160:	00d50533          	add	a0,a0,a3
20403164:	00e50533          	add	a0,a0,a4
20403168:	00a787b3          	add	a5,a5,a0
  return (int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
}
2040316c:	80000537          	lui	a0,0x80000
20403170:	fff54513          	not	a0,a0
  _REENT_RAND_NEXT(reent) =
20403174:	0af5a623          	sw	a5,172(a1)
}
20403178:	00a7f533          	and	a0,a5,a0
2040317c:	00008067          	ret

20403180 <srandom>:
srandom (unsigned int seed)
{
  struct _reent *reent = _REENT;

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
20403180:	800007b7          	lui	a5,0x80000
20403184:	4347a783          	lw	a5,1076(a5) # 80000434 <_sp+0xffffc434>
20403188:	0aa7a423          	sw	a0,168(a5)
2040318c:	0a07a623          	sw	zero,172(a5)
}
20403190:	00008067          	ret

20403194 <random>:

long int
random (void)
{
  struct _reent *reent = _REENT;
20403194:	800007b7          	lui	a5,0x80000
20403198:	4347a583          	lw	a1,1076(a5) # 80000434 <_sp+0xffffc434>
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
2040319c:	4c958637          	lui	a2,0x4c958
204031a0:	f2d60613          	addi	a2,a2,-211 # 4c957f2d <__fini_array_end+0x2c554341>
204031a4:	0a85a703          	lw	a4,168(a1)
204031a8:	0ac5a503          	lw	a0,172(a1)
204031ac:	02c707b3          	mul	a5,a4,a2
204031b0:	00178693          	addi	a3,a5,1
204031b4:	00f6b7b3          	sltu	a5,a3,a5
  _REENT_RAND_NEXT(reent) =
204031b8:	0ad5a423          	sw	a3,168(a1)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
204031bc:	5851f6b7          	lui	a3,0x5851f
204031c0:	42d68693          	addi	a3,a3,1069 # 5851f42d <__fini_array_end+0x3811b841>
204031c4:	02d706b3          	mul	a3,a4,a3
204031c8:	02c50533          	mul	a0,a0,a2
204031cc:	02c73733          	mulhu	a4,a4,a2
204031d0:	00d50533          	add	a0,a0,a3
204031d4:	00e50533          	add	a0,a0,a4
204031d8:	00a787b3          	add	a5,a5,a0
  return (long int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
}
204031dc:	80000537          	lui	a0,0x80000
204031e0:	fff54513          	not	a0,a0
  _REENT_RAND_NEXT(reent) =
204031e4:	0af5a623          	sw	a5,172(a1)
}
204031e8:	00a7f533          	and	a0,a5,a0
204031ec:	00008067          	ret

204031f0 <strlen>:
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  while (*str++)
    ;
  return str - start - 1;
#else
  if (__builtin_expect ((uintptr_t)str & (sizeof (long) - 1), 0)) do
204031f0:	00357793          	andi	a5,a0,3
204031f4:	00050713          	mv	a4,a0
204031f8:	04079c63          	bnez	a5,20403250 <strlen+0x60>
static __inline unsigned long __libc_detect_null(unsigned long w)
{
  unsigned long mask = 0x7f7f7f7f;
  if (sizeof (long) == 8)
    mask = ((mask << 16) << 16) | mask;
  return ~(((w & mask) + mask) | w | mask);
204031fc:	7f7f86b7          	lui	a3,0x7f7f8
20403200:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__fini_array_end+0x5f3f4393>
      if (!ch)
	return str - start - 1;
    } while ((uintptr_t)str & (sizeof (long) - 1));

  unsigned long *ls = (unsigned long *)str;
  while (!__libc_detect_null (*ls++))
20403204:	fff00593          	li	a1,-1
20403208:	00470713          	addi	a4,a4,4 # 60004 <__stack_size+0x5f804>
2040320c:	ffc72603          	lw	a2,-4(a4)
20403210:	00d677b3          	and	a5,a2,a3
20403214:	00d787b3          	add	a5,a5,a3
20403218:	00c7e7b3          	or	a5,a5,a2
2040321c:	00d7e7b3          	or	a5,a5,a3
20403220:	feb784e3          	beq	a5,a1,20403208 <strlen+0x18>

  str = (const char *)ls;
  size_t ret = str - start, sl = sizeof (long);

  char c0 = str[0 - sl], c1 = str[1 - sl], c2 = str[2 - sl], c3 = str[3 - sl];
  if (c0 == 0)            return ret + 0 - sl;
20403224:	ffc74683          	lbu	a3,-4(a4)
  size_t ret = str - start, sl = sizeof (long);
20403228:	40a707b3          	sub	a5,a4,a0
  char c0 = str[0 - sl], c1 = str[1 - sl], c2 = str[2 - sl], c3 = str[3 - sl];
2040322c:	ffd74603          	lbu	a2,-3(a4)
20403230:	ffe74503          	lbu	a0,-2(a4)
  if (c0 == 0)            return ret + 0 - sl;
20403234:	04068063          	beqz	a3,20403274 <strlen+0x84>
  if (c1 == 0)            return ret + 1 - sl;
20403238:	02060a63          	beqz	a2,2040326c <strlen+0x7c>
  if (c2 == 0)            return ret + 2 - sl;
2040323c:	00a03533          	snez	a0,a0
20403240:	00f50533          	add	a0,a0,a5
20403244:	ffe50513          	addi	a0,a0,-2 # 7ffffffe <_sp+0xffffbffe>
  if (c1 == 0)            return ret + 5 - sl;
  if (c2 == 0)            return ret + 6 - sl;

  return ret + 7 - sl;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
20403248:	00008067          	ret
    } while ((uintptr_t)str & (sizeof (long) - 1));
2040324c:	fa0688e3          	beqz	a3,204031fc <strlen+0xc>
      char ch = *str;
20403250:	00074783          	lbu	a5,0(a4)
      str++;
20403254:	00170713          	addi	a4,a4,1
    } while ((uintptr_t)str & (sizeof (long) - 1));
20403258:	00377693          	andi	a3,a4,3
      if (!ch)
2040325c:	fe0798e3          	bnez	a5,2040324c <strlen+0x5c>
	return str - start - 1;
20403260:	40a70733          	sub	a4,a4,a0
20403264:	fff70513          	addi	a0,a4,-1
20403268:	00008067          	ret
  if (c1 == 0)            return ret + 1 - sl;
2040326c:	ffd78513          	addi	a0,a5,-3
20403270:	00008067          	ret
  if (c0 == 0)            return ret + 0 - sl;
20403274:	ffc78513          	addi	a0,a5,-4
20403278:	00008067          	ret

2040327c <strncpy>:
  const char *src = src0;
  long *aligned_dst;
  const long *aligned_src;

  /* If SRC and DEST is aligned and count large enough, then copy words.  */
  if (!UNALIGNED (src, dst) && !TOO_SMALL (count))
2040327c:	00a5e7b3          	or	a5,a1,a0
20403280:	0037f793          	andi	a5,a5,3
20403284:	06079a63          	bnez	a5,204032f8 <strncpy+0x7c>
20403288:	00300793          	li	a5,3
    {
      aligned_dst = (long*)dst;
2040328c:	00050713          	mv	a4,a0
  if (!UNALIGNED (src, dst) && !TOO_SMALL (count))
20403290:	06c7e863          	bltu	a5,a2,20403300 <strncpy+0x84>

      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (count > 0)
20403294:	06060063          	beqz	a2,204032f4 <strncpy+0x78>
    {
      --count;
      if ((*dst++ = *src++) == '\0')
20403298:	0005c803          	lbu	a6,0(a1)
      --count;
2040329c:	fff60693          	addi	a3,a2,-1
      if ((*dst++ = *src++) == '\0')
204032a0:	00158593          	addi	a1,a1,1
204032a4:	01070023          	sb	a6,0(a4)
204032a8:	00170793          	addi	a5,a4,1
204032ac:	02080863          	beqz	a6,204032dc <strncpy+0x60>
204032b0:	00c70633          	add	a2,a4,a2
204032b4:	00d706b3          	add	a3,a4,a3
204032b8:	0140006f          	j	204032cc <strncpy+0x50>
204032bc:	fff5c703          	lbu	a4,-1(a1)
204032c0:	00178793          	addi	a5,a5,1
204032c4:	fee78fa3          	sb	a4,-1(a5)
204032c8:	00070c63          	beqz	a4,204032e0 <strncpy+0x64>
204032cc:	00158593          	addi	a1,a1,1
204032d0:	40f68833          	sub	a6,a3,a5
  while (count > 0)
204032d4:	fec794e3          	bne	a5,a2,204032bc <strncpy+0x40>
204032d8:	00008067          	ret
      --count;
204032dc:	00068813          	mv	a6,a3
204032e0:	01078733          	add	a4,a5,a6
	break;
    }

  while (count-- > 0)
204032e4:	06080063          	beqz	a6,20403344 <strncpy+0xc8>
    *dst++ = '\0';
204032e8:	00178793          	addi	a5,a5,1
204032ec:	fe078fa3          	sb	zero,-1(a5)
  while (count-- > 0)
204032f0:	fee79ce3          	bne	a5,a4,204032e8 <strncpy+0x6c>

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
204032f4:	00008067          	ret
  char *dst = dst0;
204032f8:	00050713          	mv	a4,a0
204032fc:	f99ff06f          	j	20403294 <strncpy+0x18>
      while (count >= sizeof (long int) && !DETECTNULL(*aligned_src))
20403300:	feff0337          	lui	t1,0xfeff0
20403304:	808088b7          	lui	a7,0x80808
20403308:	eff30313          	addi	t1,t1,-257 # fefefeff <_sp+0x7efebeff>
2040330c:	08088893          	addi	a7,a7,128 # 80808080 <_sp+0x804080>
20403310:	00300e13          	li	t3,3
20403314:	0005a683          	lw	a3,0(a1)
20403318:	006687b3          	add	a5,a3,t1
2040331c:	fff6c813          	not	a6,a3
20403320:	0107f7b3          	and	a5,a5,a6
20403324:	0117f7b3          	and	a5,a5,a7
20403328:	f60798e3          	bnez	a5,20403298 <strncpy+0x1c>
	  *aligned_dst++ = *aligned_src++;
2040332c:	00470713          	addi	a4,a4,4
	  count -= sizeof (long int);
20403330:	ffc60613          	addi	a2,a2,-4
	  *aligned_dst++ = *aligned_src++;
20403334:	fed72e23          	sw	a3,-4(a4)
20403338:	00458593          	addi	a1,a1,4
      while (count >= sizeof (long int) && !DETECTNULL(*aligned_src))
2040333c:	fcce6ce3          	bltu	t3,a2,20403314 <strncpy+0x98>
20403340:	f55ff06f          	j	20403294 <strncpy+0x18>
20403344:	00008067          	ret

20403348 <__register_exitproc>:

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
20403348:	800007b7          	lui	a5,0x80000
2040334c:	4287a703          	lw	a4,1064(a5) # 80000428 <_sp+0xffffc428>
20403350:	14872783          	lw	a5,328(a4)
  if (p == NULL)
20403354:	04078c63          	beqz	a5,204033ac <__register_exitproc+0x64>
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
20403358:	0047a703          	lw	a4,4(a5)
2040335c:	01f00813          	li	a6,31
20403360:	06e84e63          	blt	a6,a4,204033dc <__register_exitproc+0x94>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
20403364:	00271813          	slli	a6,a4,0x2
20403368:	02050663          	beqz	a0,20403394 <__register_exitproc+0x4c>
#endif
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
2040336c:	01078333          	add	t1,a5,a6
20403370:	08c32423          	sw	a2,136(t1)
      args->_fntypes |= (1 << p->_ind);
20403374:	1887a883          	lw	a7,392(a5)
20403378:	00100613          	li	a2,1
2040337c:	00e61633          	sll	a2,a2,a4
20403380:	00c8e8b3          	or	a7,a7,a2
20403384:	1917a423          	sw	a7,392(a5)
      args->_dso_handle[p->_ind] = d;
20403388:	10d32423          	sw	a3,264(t1)
      if (type == __et_cxa)
2040338c:	00200693          	li	a3,2
20403390:	02d50463          	beq	a0,a3,204033b8 <__register_exitproc+0x70>
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
20403394:	00170713          	addi	a4,a4,1
20403398:	00e7a223          	sw	a4,4(a5)
2040339c:	010787b3          	add	a5,a5,a6
204033a0:	00b7a423          	sw	a1,8(a5)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
204033a4:	00000513          	li	a0,0
204033a8:	00008067          	ret
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
204033ac:	14c70793          	addi	a5,a4,332
204033b0:	14f72423          	sw	a5,328(a4)
204033b4:	fa5ff06f          	j	20403358 <__register_exitproc+0x10>
	args->_is_cxa |= (1 << p->_ind);
204033b8:	18c7a683          	lw	a3,396(a5)
  p->_fns[p->_ind++] = fn;
204033bc:	00170713          	addi	a4,a4,1
204033c0:	00e7a223          	sw	a4,4(a5)
	args->_is_cxa |= (1 << p->_ind);
204033c4:	00c6e633          	or	a2,a3,a2
204033c8:	18c7a623          	sw	a2,396(a5)
  p->_fns[p->_ind++] = fn;
204033cc:	010787b3          	add	a5,a5,a6
204033d0:	00b7a423          	sw	a1,8(a5)
  return 0;
204033d4:	00000513          	li	a0,0
204033d8:	00008067          	ret
      return -1;
204033dc:	fff00513          	li	a0,-1
}
204033e0:	00008067          	ret

204033e4 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
204033e4:	fd010113          	addi	sp,sp,-48
204033e8:	800007b7          	lui	a5,0x80000
204033ec:	01812423          	sw	s8,8(sp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
204033f0:	4287ac03          	lw	s8,1064(a5) # 80000428 <_sp+0xffffc428>
{
204033f4:	01312e23          	sw	s3,28(sp)
204033f8:	01412c23          	sw	s4,24(sp)
204033fc:	01512a23          	sw	s5,20(sp)
20403400:	01612823          	sw	s6,16(sp)
20403404:	02112623          	sw	ra,44(sp)
20403408:	02812423          	sw	s0,40(sp)
2040340c:	02912223          	sw	s1,36(sp)
20403410:	03212023          	sw	s2,32(sp)
20403414:	01712623          	sw	s7,12(sp)
20403418:	00050a93          	mv	s5,a0
2040341c:	00058b13          	mv	s6,a1
#endif
      for (n = p->_ind - 1; n >= 0; n--)
	{
	  int ind;

	  i = 1 << n;
20403420:	00100a13          	li	s4,1
      for (n = p->_ind - 1; n >= 0; n--)
20403424:	fff00993          	li	s3,-1
  p = _GLOBAL_ATEXIT;
20403428:	148c2903          	lw	s2,328(s8)
  while (p)
2040342c:	02090863          	beqz	s2,2040345c <__call_exitprocs+0x78>
      for (n = p->_ind - 1; n >= 0; n--)
20403430:	00492483          	lw	s1,4(s2)
20403434:	fff48413          	addi	s0,s1,-1
20403438:	02044263          	bltz	s0,2040345c <__call_exitprocs+0x78>
2040343c:	00249493          	slli	s1,s1,0x2
20403440:	009904b3          	add	s1,s2,s1

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
20403444:	040b0463          	beqz	s6,2040348c <__call_exitprocs+0xa8>
20403448:	1044a783          	lw	a5,260(s1)
2040344c:	05678063          	beq	a5,s6,2040348c <__call_exitprocs+0xa8>
      for (n = p->_ind - 1; n >= 0; n--)
20403450:	fff40413          	addi	s0,s0,-1
20403454:	ffc48493          	addi	s1,s1,-4
20403458:	ff3416e3          	bne	s0,s3,20403444 <__call_exitprocs+0x60>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
2040345c:	02c12083          	lw	ra,44(sp)
20403460:	02812403          	lw	s0,40(sp)
20403464:	02412483          	lw	s1,36(sp)
20403468:	02012903          	lw	s2,32(sp)
2040346c:	01c12983          	lw	s3,28(sp)
20403470:	01812a03          	lw	s4,24(sp)
20403474:	01412a83          	lw	s5,20(sp)
20403478:	01012b03          	lw	s6,16(sp)
2040347c:	00c12b83          	lw	s7,12(sp)
20403480:	00812c03          	lw	s8,8(sp)
20403484:	03010113          	addi	sp,sp,48
20403488:	00008067          	ret
	  if (n == p->_ind - 1)
2040348c:	00492783          	lw	a5,4(s2)
	  fn = p->_fns[n];
20403490:	0044a683          	lw	a3,4(s1)
	  if (n == p->_ind - 1)
20403494:	fff78793          	addi	a5,a5,-1
20403498:	04878a63          	beq	a5,s0,204034ec <__call_exitprocs+0x108>
	    p->_fns[n] = NULL;
2040349c:	0004a223          	sw	zero,4(s1)
	  if (!fn)
204034a0:	fa0688e3          	beqz	a3,20403450 <__call_exitprocs+0x6c>
	  if (!args || (args->_fntypes & i) == 0)
204034a4:	18892783          	lw	a5,392(s2)
	  i = 1 << n;
204034a8:	008a1733          	sll	a4,s4,s0
	  ind = p->_ind;
204034ac:	00492b83          	lw	s7,4(s2)
	  if (!args || (args->_fntypes & i) == 0)
204034b0:	00f777b3          	and	a5,a4,a5
204034b4:	00079e63          	bnez	a5,204034d0 <__call_exitprocs+0xec>
	    fn ();
204034b8:	000680e7          	jalr	a3
	  if (ind != p->_ind || *lastp != p)
204034bc:	00492783          	lw	a5,4(s2)
204034c0:	f77794e3          	bne	a5,s7,20403428 <__call_exitprocs+0x44>
204034c4:	148c2783          	lw	a5,328(s8)
204034c8:	f92784e3          	beq	a5,s2,20403450 <__call_exitprocs+0x6c>
204034cc:	f5dff06f          	j	20403428 <__call_exitprocs+0x44>
	  else if ((args->_is_cxa & i) == 0)
204034d0:	18c92783          	lw	a5,396(s2)
204034d4:	0844a583          	lw	a1,132(s1)
204034d8:	00f77733          	and	a4,a4,a5
204034dc:	00071c63          	bnez	a4,204034f4 <__call_exitprocs+0x110>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
204034e0:	000a8513          	mv	a0,s5
204034e4:	000680e7          	jalr	a3
204034e8:	fd5ff06f          	j	204034bc <__call_exitprocs+0xd8>
	    p->_ind--;
204034ec:	00892223          	sw	s0,4(s2)
204034f0:	fb1ff06f          	j	204034a0 <__call_exitprocs+0xbc>
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
204034f4:	00058513          	mv	a0,a1
204034f8:	000680e7          	jalr	a3
204034fc:	fc1ff06f          	j	204034bc <__call_exitprocs+0xd8>

20403500 <_exit>:

static inline long
__internal_syscall(long n, long _a0, long _a1, long _a2, long _a3, long _a4, long _a5)
{
  register long a0 asm("a0") = _a0;
  register long a1 asm("a1") = _a1;
20403500:	00000593          	li	a1,0
  register long a2 asm("a2") = _a2;
20403504:	00000613          	li	a2,0
  register long a3 asm("a3") = _a3;
20403508:	00000693          	li	a3,0
  register long a4 asm("a4") = _a4;
2040350c:	00000713          	li	a4,0
  register long a5 asm("a5") = _a5;
20403510:	00000793          	li	a5,0

#ifdef __riscv_32e
  register long syscall_id asm("t0") = n;
#else
  register long syscall_id asm("a7") = n;
20403514:	05d00893          	li	a7,93
#endif

  asm volatile ("scall"
20403518:	00000073          	ecall
		: "+r"(a0) : "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5), "r"(syscall_id));

  if (a0 < 0)
2040351c:	00054463          	bltz	a0,20403524 <_exit+0x24>
/* Exit a program without cleaning up files.  */
void
_exit(int exit_status)
{
  syscall_errno (SYS_exit, exit_status, 0, 0, 0, 0, 0);
  while (1);
20403520:	0000006f          	j	20403520 <_exit+0x20>
{
20403524:	ff010113          	addi	sp,sp,-16
20403528:	00812423          	sw	s0,8(sp)
2040352c:	00050413          	mv	s0,a0
20403530:	00112623          	sw	ra,12(sp)
  errno = -a0;
20403534:	40800433          	neg	s0,s0
20403538:	00c000ef          	jal	ra,20403544 <__errno>
2040353c:	00852023          	sw	s0,0(a0)
  while (1);
20403540:	0000006f          	j	20403540 <_exit+0x40>

20403544 <__errno>:
#ifndef _REENT_ONLY

int *
__errno ()
{
  return &_REENT->_errno;
20403544:	800007b7          	lui	a5,0x80000
}
20403548:	4347a503          	lw	a0,1076(a5) # 80000434 <_sp+0xffffc434>
2040354c:	00008067          	ret

20403550 <__divdi3>:

#ifdef L_divdi3
DWtype
__divdi3 (DWtype u, DWtype v)
{
  Wtype c = 0;
20403550:	00000313          	li	t1,0
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
20403554:	0005dc63          	bgez	a1,2040356c <__divdi3+0x1c>
    c = ~c,
    uu.ll = -uu.ll;
20403558:	40a00533          	neg	a0,a0
2040355c:	00a03833          	snez	a6,a0
20403560:	40b00733          	neg	a4,a1
20403564:	410705b3          	sub	a1,a4,a6
    c = ~c,
20403568:	fff00313          	li	t1,-1
  if (vv.s.high < 0)
2040356c:	0006dc63          	bgez	a3,20403584 <__divdi3+0x34>
    c = ~c,
    vv.ll = -vv.ll;
20403570:	40c00633          	neg	a2,a2
20403574:	00c037b3          	snez	a5,a2
20403578:	40d006b3          	neg	a3,a3
    c = ~c,
2040357c:	fff34313          	not	t1,t1
    vv.ll = -vv.ll;
20403580:	40f686b3          	sub	a3,a3,a5
  d0 = dd.s.low;
20403584:	00060813          	mv	a6,a2
  d1 = dd.s.high;
20403588:	00068713          	mv	a4,a3
  n0 = nn.s.low;
2040358c:	00050893          	mv	a7,a0
  n1 = nn.s.high;
20403590:	00058e13          	mv	t3,a1
  if (d1 == 0)
20403594:	2a069263          	bnez	a3,20403838 <__divdi3+0x2e8>
      if (d0 > n1)
20403598:	204046b7          	lui	a3,0x20404
2040359c:	ae068693          	addi	a3,a3,-1312 # 20403ae0 <__clz_tab>
204035a0:	0ec5f663          	bleu	a2,a1,2040368c <__divdi3+0x13c>
	  count_leading_zeros (bm, d0);
204035a4:	000107b7          	lui	a5,0x10
204035a8:	0cf67863          	bleu	a5,a2,20403678 <__divdi3+0x128>
204035ac:	0ff00e93          	li	t4,255
204035b0:	00cebeb3          	sltu	t4,t4,a2
204035b4:	003e9e93          	slli	t4,t4,0x3
204035b8:	01d657b3          	srl	a5,a2,t4
204035bc:	00f686b3          	add	a3,a3,a5
204035c0:	0006c783          	lbu	a5,0(a3)
204035c4:	01d78eb3          	add	t4,a5,t4
204035c8:	02000793          	li	a5,32
204035cc:	41d787b3          	sub	a5,a5,t4
	  if (bm != 0)
204035d0:	00078c63          	beqz	a5,204035e8 <__divdi3+0x98>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
204035d4:	00f59733          	sll	a4,a1,a5
204035d8:	01d55eb3          	srl	t4,a0,t4
	      d0 = d0 << bm;
204035dc:	00f61833          	sll	a6,a2,a5
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
204035e0:	00eeee33          	or	t3,t4,a4
	      n0 = n0 << bm;
204035e4:	00f518b3          	sll	a7,a0,a5
	  udiv_qrnnd (q0, n0, n1, n0, d0);
204035e8:	01085613          	srli	a2,a6,0x10
204035ec:	02ce77b3          	remu	a5,t3,a2
204035f0:	01081593          	slli	a1,a6,0x10
204035f4:	0105d593          	srli	a1,a1,0x10
204035f8:	0108d693          	srli	a3,a7,0x10
204035fc:	02ce5e33          	divu	t3,t3,a2
20403600:	01079793          	slli	a5,a5,0x10
20403604:	00d7e6b3          	or	a3,a5,a3
20403608:	03c58733          	mul	a4,a1,t3
2040360c:	000e0793          	mv	a5,t3
20403610:	00e6fe63          	bleu	a4,a3,2040362c <__divdi3+0xdc>
20403614:	010686b3          	add	a3,a3,a6
20403618:	fffe0793          	addi	a5,t3,-1
2040361c:	0106e863          	bltu	a3,a6,2040362c <__divdi3+0xdc>
20403620:	00e6f663          	bleu	a4,a3,2040362c <__divdi3+0xdc>
20403624:	ffee0793          	addi	a5,t3,-2
20403628:	010686b3          	add	a3,a3,a6
2040362c:	40e686b3          	sub	a3,a3,a4
20403630:	02c6f733          	remu	a4,a3,a2
20403634:	01089893          	slli	a7,a7,0x10
20403638:	0108d893          	srli	a7,a7,0x10
2040363c:	02c6d6b3          	divu	a3,a3,a2
20403640:	01071713          	slli	a4,a4,0x10
20403644:	011768b3          	or	a7,a4,a7
20403648:	02d585b3          	mul	a1,a1,a3
2040364c:	00068513          	mv	a0,a3
20403650:	00b8fc63          	bleu	a1,a7,20403668 <__divdi3+0x118>
20403654:	011808b3          	add	a7,a6,a7
20403658:	fff68513          	addi	a0,a3,-1
2040365c:	0108e663          	bltu	a7,a6,20403668 <__divdi3+0x118>
20403660:	00b8f463          	bleu	a1,a7,20403668 <__divdi3+0x118>
20403664:	ffe68513          	addi	a0,a3,-2
20403668:	01079793          	slli	a5,a5,0x10
2040366c:	00a7e7b3          	or	a5,a5,a0
	      q1 = 0;
20403670:	00000e13          	li	t3,0
20403674:	0e40006f          	j	20403758 <__divdi3+0x208>
	  count_leading_zeros (bm, d0);
20403678:	010007b7          	lui	a5,0x1000
2040367c:	01000e93          	li	t4,16
20403680:	f2f66ce3          	bltu	a2,a5,204035b8 <__divdi3+0x68>
20403684:	01800e93          	li	t4,24
20403688:	f31ff06f          	j	204035b8 <__divdi3+0x68>
	  if (d0 == 0)
2040368c:	00061663          	bnez	a2,20403698 <__divdi3+0x148>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
20403690:	00100813          	li	a6,1
20403694:	02e85833          	divu	a6,a6,a4
	  count_leading_zeros (bm, d0);
20403698:	000107b7          	lui	a5,0x10
2040369c:	0cf87e63          	bleu	a5,a6,20403778 <__divdi3+0x228>
204036a0:	0ff00793          	li	a5,255
204036a4:	0107f463          	bleu	a6,a5,204036ac <__divdi3+0x15c>
204036a8:	00800713          	li	a4,8
204036ac:	00e857b3          	srl	a5,a6,a4
204036b0:	00f686b3          	add	a3,a3,a5
204036b4:	0006c783          	lbu	a5,0(a3)
204036b8:	02000693          	li	a3,32
204036bc:	00e787b3          	add	a5,a5,a4
204036c0:	40f686b3          	sub	a3,a3,a5
	  if (bm == 0)
204036c4:	0c069463          	bnez	a3,2040378c <__divdi3+0x23c>
	      n1 -= d0;
204036c8:	41058733          	sub	a4,a1,a6
	      q1 = 1;
204036cc:	00100e13          	li	t3,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
204036d0:	01085613          	srli	a2,a6,0x10
204036d4:	01081593          	slli	a1,a6,0x10
204036d8:	0105d593          	srli	a1,a1,0x10
204036dc:	0108d693          	srli	a3,a7,0x10
204036e0:	02c777b3          	remu	a5,a4,a2
204036e4:	02c75733          	divu	a4,a4,a2
204036e8:	01079793          	slli	a5,a5,0x10
204036ec:	00d7e6b3          	or	a3,a5,a3
204036f0:	02e58533          	mul	a0,a1,a4
204036f4:	00070793          	mv	a5,a4
204036f8:	00a6fe63          	bleu	a0,a3,20403714 <__divdi3+0x1c4>
204036fc:	010686b3          	add	a3,a3,a6
20403700:	fff70793          	addi	a5,a4,-1
20403704:	0106e863          	bltu	a3,a6,20403714 <__divdi3+0x1c4>
20403708:	00a6f663          	bleu	a0,a3,20403714 <__divdi3+0x1c4>
2040370c:	ffe70793          	addi	a5,a4,-2
20403710:	010686b3          	add	a3,a3,a6
20403714:	40a686b3          	sub	a3,a3,a0
20403718:	02c6f733          	remu	a4,a3,a2
2040371c:	01089893          	slli	a7,a7,0x10
20403720:	0108d893          	srli	a7,a7,0x10
20403724:	02c6d6b3          	divu	a3,a3,a2
20403728:	01071713          	slli	a4,a4,0x10
2040372c:	011768b3          	or	a7,a4,a7
20403730:	02d585b3          	mul	a1,a1,a3
20403734:	00068513          	mv	a0,a3
20403738:	00b8fc63          	bleu	a1,a7,20403750 <__divdi3+0x200>
2040373c:	011808b3          	add	a7,a6,a7
20403740:	fff68513          	addi	a0,a3,-1
20403744:	0108e663          	bltu	a7,a6,20403750 <__divdi3+0x200>
20403748:	00b8f463          	bleu	a1,a7,20403750 <__divdi3+0x200>
2040374c:	ffe68513          	addi	a0,a3,-2
20403750:	01079793          	slli	a5,a5,0x10
20403754:	00a7e7b3          	or	a5,a5,a0
  return ww.ll;
20403758:	00078513          	mv	a0,a5
2040375c:	000e0593          	mv	a1,t3

  w = __udivmoddi4 (uu.ll, vv.ll, (UDWtype *) 0);
  if (c)
20403760:	00030a63          	beqz	t1,20403774 <__divdi3+0x224>
    w = -w;
20403764:	40f00533          	neg	a0,a5
20403768:	00a037b3          	snez	a5,a0
2040376c:	41c005b3          	neg	a1,t3
20403770:	40f585b3          	sub	a1,a1,a5

  return w;
}
20403774:	00008067          	ret
	  count_leading_zeros (bm, d0);
20403778:	010007b7          	lui	a5,0x1000
2040377c:	01000713          	li	a4,16
20403780:	f2f866e3          	bltu	a6,a5,204036ac <__divdi3+0x15c>
20403784:	01800713          	li	a4,24
20403788:	f25ff06f          	j	204036ac <__divdi3+0x15c>
	      d0 = d0 << bm;
2040378c:	00d81833          	sll	a6,a6,a3
	      n2 = n1 >> b;
20403790:	00f5deb3          	srl	t4,a1,a5
	      n0 = n0 << bm;
20403794:	00d518b3          	sll	a7,a0,a3
	      n1 = (n1 << bm) | (n0 >> b);
20403798:	00f557b3          	srl	a5,a0,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
2040379c:	01085513          	srli	a0,a6,0x10
	      n1 = (n1 << bm) | (n0 >> b);
204037a0:	00d59733          	sll	a4,a1,a3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
204037a4:	02aed5b3          	divu	a1,t4,a0
	      n1 = (n1 << bm) | (n0 >> b);
204037a8:	00e7e633          	or	a2,a5,a4
	      udiv_qrnnd (q1, n1, n2, n1, d0);
204037ac:	01081713          	slli	a4,a6,0x10
204037b0:	01075713          	srli	a4,a4,0x10
204037b4:	01065793          	srli	a5,a2,0x10
204037b8:	02aef6b3          	remu	a3,t4,a0
204037bc:	00058e13          	mv	t3,a1
204037c0:	02b70eb3          	mul	t4,a4,a1
204037c4:	01069693          	slli	a3,a3,0x10
204037c8:	00f6e7b3          	or	a5,a3,a5
204037cc:	01d7fe63          	bleu	t4,a5,204037e8 <__divdi3+0x298>
204037d0:	010787b3          	add	a5,a5,a6
204037d4:	fff58e13          	addi	t3,a1,-1
204037d8:	0107e863          	bltu	a5,a6,204037e8 <__divdi3+0x298>
204037dc:	01d7f663          	bleu	t4,a5,204037e8 <__divdi3+0x298>
204037e0:	ffe58e13          	addi	t3,a1,-2
204037e4:	010787b3          	add	a5,a5,a6
204037e8:	41d787b3          	sub	a5,a5,t4
204037ec:	02a7f5b3          	remu	a1,a5,a0
204037f0:	01061613          	slli	a2,a2,0x10
204037f4:	01065613          	srli	a2,a2,0x10
204037f8:	02a7d7b3          	divu	a5,a5,a0
204037fc:	01059593          	slli	a1,a1,0x10
20403800:	00c5e5b3          	or	a1,a1,a2
20403804:	02f70733          	mul	a4,a4,a5
20403808:	00078693          	mv	a3,a5
2040380c:	00e5fe63          	bleu	a4,a1,20403828 <__divdi3+0x2d8>
20403810:	010585b3          	add	a1,a1,a6
20403814:	fff78693          	addi	a3,a5,-1 # ffffff <__stack_size+0xfff7ff>
20403818:	0105e863          	bltu	a1,a6,20403828 <__divdi3+0x2d8>
2040381c:	00e5f663          	bleu	a4,a1,20403828 <__divdi3+0x2d8>
20403820:	ffe78693          	addi	a3,a5,-2
20403824:	010585b3          	add	a1,a1,a6
20403828:	010e1e13          	slli	t3,t3,0x10
2040382c:	40e58733          	sub	a4,a1,a4
20403830:	00de6e33          	or	t3,t3,a3
20403834:	e9dff06f          	j	204036d0 <__divdi3+0x180>
      if (d1 > n1)
20403838:	18d5e663          	bltu	a1,a3,204039c4 <__divdi3+0x474>
	  count_leading_zeros (bm, d1);
2040383c:	000107b7          	lui	a5,0x10
20403840:	04f6f463          	bleu	a5,a3,20403888 <__divdi3+0x338>
20403844:	0ff00813          	li	a6,255
20403848:	00d838b3          	sltu	a7,a6,a3
2040384c:	00389893          	slli	a7,a7,0x3
20403850:	20404737          	lui	a4,0x20404
20403854:	0116d7b3          	srl	a5,a3,a7
20403858:	ae070713          	addi	a4,a4,-1312 # 20403ae0 <__clz_tab>
2040385c:	00e787b3          	add	a5,a5,a4
20403860:	0007c803          	lbu	a6,0(a5) # 10000 <__stack_size+0xf800>
20403864:	02000e13          	li	t3,32
20403868:	01180833          	add	a6,a6,a7
2040386c:	410e0e33          	sub	t3,t3,a6
	  if (bm == 0)
20403870:	020e1663          	bnez	t3,2040389c <__divdi3+0x34c>
		  q0 = 1;
20403874:	00100793          	li	a5,1
	      if (n1 > d1 || n0 >= d0)
20403878:	eeb6e0e3          	bltu	a3,a1,20403758 <__divdi3+0x208>
2040387c:	00c53633          	sltu	a2,a0,a2
20403880:	00164793          	xori	a5,a2,1
20403884:	ed5ff06f          	j	20403758 <__divdi3+0x208>
	  count_leading_zeros (bm, d1);
20403888:	010007b7          	lui	a5,0x1000
2040388c:	01000893          	li	a7,16
20403890:	fcf6e0e3          	bltu	a3,a5,20403850 <__divdi3+0x300>
20403894:	01800893          	li	a7,24
20403898:	fb9ff06f          	j	20403850 <__divdi3+0x300>
	      d1 = (d1 << bm) | (d0 >> b);
2040389c:	010657b3          	srl	a5,a2,a6
204038a0:	01c696b3          	sll	a3,a3,t3
204038a4:	00d7e6b3          	or	a3,a5,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038a8:	0106df13          	srli	t5,a3,0x10
	      n2 = n1 >> b;
204038ac:	0105d7b3          	srl	a5,a1,a6
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038b0:	03e7f8b3          	remu	a7,a5,t5
204038b4:	01069e93          	slli	t4,a3,0x10
204038b8:	010ede93          	srli	t4,t4,0x10
	      n1 = (n1 << bm) | (n0 >> b);
204038bc:	01c59733          	sll	a4,a1,t3
204038c0:	01055833          	srl	a6,a0,a6
204038c4:	00e86733          	or	a4,a6,a4
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038c8:	01075813          	srli	a6,a4,0x10
	      d0 = d0 << bm;
204038cc:	01c61633          	sll	a2,a2,t3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
204038d0:	03e7d7b3          	divu	a5,a5,t5
204038d4:	01089893          	slli	a7,a7,0x10
204038d8:	0108e833          	or	a6,a7,a6
204038dc:	02fe8fb3          	mul	t6,t4,a5
204038e0:	00078593          	mv	a1,a5
204038e4:	01f87e63          	bleu	t6,a6,20403900 <__divdi3+0x3b0>
204038e8:	00d80833          	add	a6,a6,a3
204038ec:	fff78593          	addi	a1,a5,-1 # ffffff <__stack_size+0xfff7ff>
204038f0:	00d86863          	bltu	a6,a3,20403900 <__divdi3+0x3b0>
204038f4:	01f87663          	bleu	t6,a6,20403900 <__divdi3+0x3b0>
204038f8:	ffe78593          	addi	a1,a5,-2
204038fc:	00d80833          	add	a6,a6,a3
20403900:	41f80833          	sub	a6,a6,t6
20403904:	03e878b3          	remu	a7,a6,t5
20403908:	01071713          	slli	a4,a4,0x10
2040390c:	01075713          	srli	a4,a4,0x10
20403910:	03e85833          	divu	a6,a6,t5
20403914:	01089893          	slli	a7,a7,0x10
20403918:	00e8e733          	or	a4,a7,a4
2040391c:	030e8eb3          	mul	t4,t4,a6
20403920:	00080793          	mv	a5,a6
20403924:	01d77e63          	bleu	t4,a4,20403940 <__divdi3+0x3f0>
20403928:	00d70733          	add	a4,a4,a3
2040392c:	fff80793          	addi	a5,a6,-1 # 2ffff <__stack_size+0x2f7ff>
20403930:	00d76863          	bltu	a4,a3,20403940 <__divdi3+0x3f0>
20403934:	01d77663          	bleu	t4,a4,20403940 <__divdi3+0x3f0>
20403938:	ffe80793          	addi	a5,a6,-2
2040393c:	00d70733          	add	a4,a4,a3
20403940:	01059593          	slli	a1,a1,0x10
	      umul_ppmm (m1, m0, q0, d0);
20403944:	00010f37          	lui	t5,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
20403948:	00f5e7b3          	or	a5,a1,a5
	      umul_ppmm (m1, m0, q0, d0);
2040394c:	ffff0593          	addi	a1,t5,-1 # ffff <__stack_size+0xf7ff>
20403950:	00b7f8b3          	and	a7,a5,a1
20403954:	0107d813          	srli	a6,a5,0x10
20403958:	00b675b3          	and	a1,a2,a1
2040395c:	01065613          	srli	a2,a2,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
20403960:	41d70733          	sub	a4,a4,t4
	      umul_ppmm (m1, m0, q0, d0);
20403964:	02b88eb3          	mul	t4,a7,a1
20403968:	02b805b3          	mul	a1,a6,a1
2040396c:	010ed693          	srli	a3,t4,0x10
20403970:	02c888b3          	mul	a7,a7,a2
20403974:	00b888b3          	add	a7,a7,a1
20403978:	011686b3          	add	a3,a3,a7
2040397c:	02c80833          	mul	a6,a6,a2
20403980:	00b6f463          	bleu	a1,a3,20403988 <__divdi3+0x438>
20403984:	01e80833          	add	a6,a6,t5
20403988:	0106d613          	srli	a2,a3,0x10
2040398c:	01060833          	add	a6,a2,a6
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
20403990:	03076663          	bltu	a4,a6,204039bc <__divdi3+0x46c>
20403994:	cd071ee3          	bne	a4,a6,20403670 <__divdi3+0x120>
	      umul_ppmm (m1, m0, q0, d0);
20403998:	00010737          	lui	a4,0x10
2040399c:	fff70713          	addi	a4,a4,-1 # ffff <__stack_size+0xf7ff>
204039a0:	00e6f6b3          	and	a3,a3,a4
204039a4:	01069693          	slli	a3,a3,0x10
204039a8:	00eefeb3          	and	t4,t4,a4
	      n0 = n0 << bm;
204039ac:	01c51533          	sll	a0,a0,t3
	      umul_ppmm (m1, m0, q0, d0);
204039b0:	01d686b3          	add	a3,a3,t4
	      q1 = 0;
204039b4:	00000e13          	li	t3,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
204039b8:	dad570e3          	bleu	a3,a0,20403758 <__divdi3+0x208>
		  q0--;
204039bc:	fff78793          	addi	a5,a5,-1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
204039c0:	cb1ff06f          	j	20403670 <__divdi3+0x120>
	  q1 = 0;
204039c4:	00000e13          	li	t3,0
	  q0 = 0;
204039c8:	00000793          	li	a5,0
204039cc:	d8dff06f          	j	20403758 <__divdi3+0x208>
